
assign10_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001110  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  080012a0  080012a0  000022a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800130c  0800130c  00003054  2**0
                  CONTENTS
  4 .ARM          00000008  0800130c  0800130c  0000230c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001314  08001314  00003054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001314  08001314  00002314  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001318  08001318  00002318  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000054  20000000  0800131c  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00003054  2**0
                  CONTENTS
 10 .bss          00000168  20000054  20000054  00003054  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001bc  200001bc  00003054  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00003054  2**0
                  CONTENTS, READONLY
 13 .debug_info   000015ea  00000000  00000000  00003084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000656  00000000  00000000  0000466e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000138  00000000  00000000  00004cc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000d1  00000000  00000000  00004e00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000012db  00000000  00000000  00004ed1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001b3b  00000000  00000000  000061ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008bfe6  00000000  00000000  00007ce7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00093ccd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000858  00000000  00000000  00093d10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 0000001f  00000000  00000000  00094568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000072  00000000  00000000  00094587  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000054 	.word	0x20000054
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08001288 	.word	0x08001288

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000058 	.word	0x20000058
 80001cc:	08001288 	.word	0x08001288

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <DelayMs>:
uint32_t DWT_Init(void);

#ifndef DELAY_MS
#define DELAY_MS

static inline void DelayMs(volatile uint32_t ms) {
 8000270:	b480      	push	{r7}
 8000272:	b085      	sub	sp, #20
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
	uint32_t init_ticks = DWT->CYCCNT;
 8000278:	4b0e      	ldr	r3, [pc, #56]	@ (80002b4 <DelayMs+0x44>)
 800027a:	685b      	ldr	r3, [r3, #4]
 800027c:	60fb      	str	r3, [r7, #12]
	uint32_t ticks = (SystemCoreClock / 1000);
 800027e:	4b0e      	ldr	r3, [pc, #56]	@ (80002b8 <DelayMs+0x48>)
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	4a0e      	ldr	r2, [pc, #56]	@ (80002bc <DelayMs+0x4c>)
 8000284:	fba2 2303 	umull	r2, r3, r2, r3
 8000288:	099b      	lsrs	r3, r3, #6
 800028a:	60bb      	str	r3, [r7, #8]
	ms *= ticks;
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	68ba      	ldr	r2, [r7, #8]
 8000290:	fb02 f303 	mul.w	r3, r2, r3
 8000294:	607b      	str	r3, [r7, #4]
	while ((DWT->CYCCNT - init_ticks) < ms);
 8000296:	bf00      	nop
 8000298:	4b06      	ldr	r3, [pc, #24]	@ (80002b4 <DelayMs+0x44>)
 800029a:	685a      	ldr	r2, [r3, #4]
 800029c:	68fb      	ldr	r3, [r7, #12]
 800029e:	1ad2      	subs	r2, r2, r3
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	429a      	cmp	r2, r3
 80002a4:	d3f8      	bcc.n	8000298 <DelayMs+0x28>
}
 80002a6:	bf00      	nop
 80002a8:	bf00      	nop
 80002aa:	3714      	adds	r7, #20
 80002ac:	46bd      	mov	sp, r7
 80002ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b2:	4770      	bx	lr
 80002b4:	e0001000 	.word	0xe0001000
 80002b8:	20000000 	.word	0x20000000
 80002bc:	10624dd3 	.word	0x10624dd3

080002c0 <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 80002c0:	b590      	push	{r4, r7, lr}
 80002c2:	b093      	sub	sp, #76	@ 0x4c
 80002c4:	af02      	add	r7, sp, #8
	char str1[24], str2[20];
	RTC_Date d, dt = { .Date = 31, .Month = 12, .Year = 23, .WeekDay = 7 };
 80002c6:	4b2b      	ldr	r3, [pc, #172]	@ (8000374 <main+0xb4>)
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	60fb      	str	r3, [r7, #12]
	RTC_Time t, tm = { .Hours = 23, .Minutes = 59, .Seconds = 40 };
 80002cc:	4a2a      	ldr	r2, [pc, #168]	@ (8000378 <main+0xb8>)
 80002ce:	1d3b      	adds	r3, r7, #4
 80002d0:	6812      	ldr	r2, [r2, #0]
 80002d2:	4611      	mov	r1, r2
 80002d4:	8019      	strh	r1, [r3, #0]
 80002d6:	3302      	adds	r3, #2
 80002d8:	0c12      	lsrs	r2, r2, #16
 80002da:	701a      	strb	r2, [r3, #0]

	SystemInit();
 80002dc:	f000 fa3a 	bl	8000754 <SystemInit>
	UartInit(BAUD_9600);
 80002e0:	f44f 5016 	mov.w	r0, #9600	@ 0x2580
 80002e4:	f000 fa6c 	bl	80007c0 <UartInit>
	//LcdInit();
	//LcdPuts(LCD_LINE1, "DESD @ Sunbeam\n");
	//LcdPuts(LCD_LINE2, "STM32 RTC Demo!\n");
	//DelayMs(2000);
	//LcdWrite(LCD_CMD, LCD_CLEAR);
	RTC_Init(&dt, &tm);
 80002e8:	1d3a      	adds	r2, r7, #4
 80002ea:	f107 030c 	add.w	r3, r7, #12
 80002ee:	4611      	mov	r1, r2
 80002f0:	4618      	mov	r0, r3
 80002f2:	f000 f8a7 	bl	8000444 <RTC_Init>
	while(1) {
		RTC_GetTime(&t);
 80002f6:	f107 0308 	add.w	r3, r7, #8
 80002fa:	4618      	mov	r0, r3
 80002fc:	f000 f9ba 	bl	8000674 <RTC_GetTime>
		RTC_GetDate(&d);
 8000300:	f107 0310 	add.w	r3, r7, #16
 8000304:	4618      	mov	r0, r3
 8000306:	f000 f96f 	bl	80005e8 <RTC_GetDate>

		UartPuts("\r \n");
 800030a:	481c      	ldr	r0, [pc, #112]	@ (800037c <main+0xbc>)
 800030c:	f000 fade 	bl	80008cc <UartPuts>
		sprintf(str1, "DT=%02d-%02d-%02d W=%d", d.Date, d.Month, d.Year, d.WeekDay);
 8000310:	7c7b      	ldrb	r3, [r7, #17]
 8000312:	4619      	mov	r1, r3
 8000314:	7c3b      	ldrb	r3, [r7, #16]
 8000316:	461c      	mov	r4, r3
 8000318:	7cbb      	ldrb	r3, [r7, #18]
 800031a:	7cfa      	ldrb	r2, [r7, #19]
 800031c:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8000320:	9201      	str	r2, [sp, #4]
 8000322:	9300      	str	r3, [sp, #0]
 8000324:	4623      	mov	r3, r4
 8000326:	460a      	mov	r2, r1
 8000328:	4915      	ldr	r1, [pc, #84]	@ (8000380 <main+0xc0>)
 800032a:	f000 fb15 	bl	8000958 <siprintf>
		UartPuts(str1);
 800032e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000332:	4618      	mov	r0, r3
 8000334:	f000 faca 	bl	80008cc <UartPuts>
		UartPuts("\r \n");
 8000338:	4810      	ldr	r0, [pc, #64]	@ (800037c <main+0xbc>)
 800033a:	f000 fac7 	bl	80008cc <UartPuts>
		sprintf(str2, "TM=%02d:%02d:%02d", t.Hours, t.Minutes, t.Seconds);
 800033e:	7a3b      	ldrb	r3, [r7, #8]
 8000340:	461a      	mov	r2, r3
 8000342:	7a7b      	ldrb	r3, [r7, #9]
 8000344:	4619      	mov	r1, r3
 8000346:	7abb      	ldrb	r3, [r7, #10]
 8000348:	f107 0014 	add.w	r0, r7, #20
 800034c:	9300      	str	r3, [sp, #0]
 800034e:	460b      	mov	r3, r1
 8000350:	490c      	ldr	r1, [pc, #48]	@ (8000384 <main+0xc4>)
 8000352:	f000 fb01 	bl	8000958 <siprintf>
		UartPuts(str2);
 8000356:	f107 0314 	add.w	r3, r7, #20
 800035a:	4618      	mov	r0, r3
 800035c:	f000 fab6 	bl	80008cc <UartPuts>
		UartPuts("\r \n");
 8000360:	4806      	ldr	r0, [pc, #24]	@ (800037c <main+0xbc>)
 8000362:	f000 fab3 	bl	80008cc <UartPuts>

		DelayMs(1000);
 8000366:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800036a:	f7ff ff81 	bl	8000270 <DelayMs>
		RTC_GetTime(&t);
 800036e:	bf00      	nop
 8000370:	e7c1      	b.n	80002f6 <main+0x36>
 8000372:	bf00      	nop
 8000374:	080012d0 	.word	0x080012d0
 8000378:	080012d4 	.word	0x080012d4
 800037c:	080012a0 	.word	0x080012a0
 8000380:	080012a4 	.word	0x080012a4
 8000384:	080012bc 	.word	0x080012bc

08000388 <Bin2Bcd>:
 *      Author: Nilesh
 */

#include "rtc.h"

uint16_t Bin2Bcd(uint16_t val) {
 8000388:	b480      	push	{r7}
 800038a:	b085      	sub	sp, #20
 800038c:	af00      	add	r7, sp, #0
 800038e:	4603      	mov	r3, r0
 8000390:	80fb      	strh	r3, [r7, #6]
	uint16_t unit = val % 10;
 8000392:	88fa      	ldrh	r2, [r7, #6]
 8000394:	4b17      	ldr	r3, [pc, #92]	@ (80003f4 <Bin2Bcd+0x6c>)
 8000396:	fba3 1302 	umull	r1, r3, r3, r2
 800039a:	08d9      	lsrs	r1, r3, #3
 800039c:	460b      	mov	r3, r1
 800039e:	009b      	lsls	r3, r3, #2
 80003a0:	440b      	add	r3, r1
 80003a2:	005b      	lsls	r3, r3, #1
 80003a4:	1ad3      	subs	r3, r2, r3
 80003a6:	81fb      	strh	r3, [r7, #14]
	uint16_t tens = (val / 10) % 10;
 80003a8:	88fb      	ldrh	r3, [r7, #6]
 80003aa:	4a12      	ldr	r2, [pc, #72]	@ (80003f4 <Bin2Bcd+0x6c>)
 80003ac:	fba2 2303 	umull	r2, r3, r2, r3
 80003b0:	08db      	lsrs	r3, r3, #3
 80003b2:	b29a      	uxth	r2, r3
 80003b4:	4b0f      	ldr	r3, [pc, #60]	@ (80003f4 <Bin2Bcd+0x6c>)
 80003b6:	fba3 1302 	umull	r1, r3, r3, r2
 80003ba:	08d9      	lsrs	r1, r3, #3
 80003bc:	460b      	mov	r3, r1
 80003be:	009b      	lsls	r3, r3, #2
 80003c0:	440b      	add	r3, r1
 80003c2:	005b      	lsls	r3, r3, #1
 80003c4:	1ad3      	subs	r3, r2, r3
 80003c6:	81bb      	strh	r3, [r7, #12]
//	uint16_t hundreds = (val / 100) % 10;
//	uint16_t thousands = (val / 1000) % 10;
	uint16_t res = 0;
 80003c8:	2300      	movs	r3, #0
 80003ca:	817b      	strh	r3, [r7, #10]
	res |= unit;
 80003cc:	897a      	ldrh	r2, [r7, #10]
 80003ce:	89fb      	ldrh	r3, [r7, #14]
 80003d0:	4313      	orrs	r3, r2
 80003d2:	817b      	strh	r3, [r7, #10]
	res |= tens << 4;
 80003d4:	89bb      	ldrh	r3, [r7, #12]
 80003d6:	011b      	lsls	r3, r3, #4
 80003d8:	b21a      	sxth	r2, r3
 80003da:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80003de:	4313      	orrs	r3, r2
 80003e0:	b21b      	sxth	r3, r3
 80003e2:	817b      	strh	r3, [r7, #10]
//	res |= hundreds << 8;
//	res |= thousands << 12;
	return res;
 80003e4:	897b      	ldrh	r3, [r7, #10]
}
 80003e6:	4618      	mov	r0, r3
 80003e8:	3714      	adds	r7, #20
 80003ea:	46bd      	mov	sp, r7
 80003ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f0:	4770      	bx	lr
 80003f2:	bf00      	nop
 80003f4:	cccccccd 	.word	0xcccccccd

080003f8 <Bcd2Bin>:

uint16_t Bcd2Bin(uint16_t val) {
 80003f8:	b480      	push	{r7}
 80003fa:	b085      	sub	sp, #20
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	4603      	mov	r3, r0
 8000400:	80fb      	strh	r3, [r7, #6]
	uint16_t unit = (val & 0x0F);
 8000402:	88fb      	ldrh	r3, [r7, #6]
 8000404:	f003 030f 	and.w	r3, r3, #15
 8000408:	81fb      	strh	r3, [r7, #14]
	uint16_t tens = ((val >> 4) & 0x0F) * 10;
 800040a:	88fb      	ldrh	r3, [r7, #6]
 800040c:	091b      	lsrs	r3, r3, #4
 800040e:	b29b      	uxth	r3, r3
 8000410:	f003 030f 	and.w	r3, r3, #15
 8000414:	b29b      	uxth	r3, r3
 8000416:	461a      	mov	r2, r3
 8000418:	0092      	lsls	r2, r2, #2
 800041a:	4413      	add	r3, r2
 800041c:	005b      	lsls	r3, r3, #1
 800041e:	81bb      	strh	r3, [r7, #12]
//	uint16_t hundreds = ((val >> 8) & 0x0F) * 100;
//	uint16_t thousands = ((val >> 12) & 0x0F) * 1000;
	uint16_t res = 0;
 8000420:	2300      	movs	r3, #0
 8000422:	817b      	strh	r3, [r7, #10]
	res += unit;
 8000424:	897a      	ldrh	r2, [r7, #10]
 8000426:	89fb      	ldrh	r3, [r7, #14]
 8000428:	4413      	add	r3, r2
 800042a:	817b      	strh	r3, [r7, #10]
	res += tens;
 800042c:	897a      	ldrh	r2, [r7, #10]
 800042e:	89bb      	ldrh	r3, [r7, #12]
 8000430:	4413      	add	r3, r2
 8000432:	817b      	strh	r3, [r7, #10]
//	res += hundreds;
//	res += thousands;
	return res;
 8000434:	897b      	ldrh	r3, [r7, #10]
}
 8000436:	4618      	mov	r0, r3
 8000438:	3714      	adds	r7, #20
 800043a:	46bd      	mov	sp, r7
 800043c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000440:	4770      	bx	lr
	...

08000444 <RTC_Init>:


void RTC_Init(RTC_Date *dt, RTC_Time *tm) {
 8000444:	b580      	push	{r7, lr}
 8000446:	b082      	sub	sp, #8
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
 800044c:	6039      	str	r1, [r7, #0]
	// Initialize RTC
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;		//enable peripheral clock power
 800044e:	4b28      	ldr	r3, [pc, #160]	@ (80004f0 <RTC_Init+0xac>)
 8000450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000452:	4a27      	ldr	r2, [pc, #156]	@ (80004f0 <RTC_Init+0xac>)
 8000454:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000458:	6413      	str	r3, [r2, #64]	@ 0x40
	PWR->CR |= PWR_CR_DBP;			//enable access to the RTC registers (stm32 manual 5.4)
 800045a:	4b26      	ldr	r3, [pc, #152]	@ (80004f4 <RTC_Init+0xb0>)
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	4a25      	ldr	r2, [pc, #148]	@ (80004f4 <RTC_Init+0xb0>)
 8000460:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000464:	6013      	str	r3, [r2, #0]

	RCC->CSR |= RCC_CSR_LSION;				//enable LSI (stm32 manual 7.3.21)
 8000466:	4b22      	ldr	r3, [pc, #136]	@ (80004f0 <RTC_Init+0xac>)
 8000468:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800046a:	4a21      	ldr	r2, [pc, #132]	@ (80004f0 <RTC_Init+0xac>)
 800046c:	f043 0301 	orr.w	r3, r3, #1
 8000470:	6753      	str	r3, [r2, #116]	@ 0x74
	while(!(RCC->CSR & RCC_CSR_LSIRDY));	//wait for LSI ready flag
 8000472:	bf00      	nop
 8000474:	4b1e      	ldr	r3, [pc, #120]	@ (80004f0 <RTC_Init+0xac>)
 8000476:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000478:	f003 0302 	and.w	r3, r3, #2
 800047c:	2b00      	cmp	r3, #0
 800047e:	d0f9      	beq.n	8000474 <RTC_Init+0x30>

	RCC->BDCR |= RCC_BDCR_RTCEN | RCC_BDCR_RTCSEL_1;    // select LSI (32 KHz) and enable RTC (stm32 manual 7.3.21)
 8000480:	4b1b      	ldr	r3, [pc, #108]	@ (80004f0 <RTC_Init+0xac>)
 8000482:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000484:	4a1a      	ldr	r2, [pc, #104]	@ (80004f0 <RTC_Init+0xac>)
 8000486:	f443 4302 	orr.w	r3, r3, #33280	@ 0x8200
 800048a:	6713      	str	r3, [r2, #112]	@ 0x70

	RTC->WPR = 0xCA;			// enter key to unlock write protection
 800048c:	4b1a      	ldr	r3, [pc, #104]	@ (80004f8 <RTC_Init+0xb4>)
 800048e:	22ca      	movs	r2, #202	@ 0xca
 8000490:	625a      	str	r2, [r3, #36]	@ 0x24
	RTC->WPR = 0x53;			// key sequence must be 0xCA and then 0x53 (stm32 manual 26.3.5)
 8000492:	4b19      	ldr	r3, [pc, #100]	@ (80004f8 <RTC_Init+0xb4>)
 8000494:	2253      	movs	r2, #83	@ 0x53
 8000496:	625a      	str	r2, [r3, #36]	@ 0x24

	RTC->ISR |= RTC_ISR_INIT;	// enable rtc setup (i.e. register init)
 8000498:	4b17      	ldr	r3, [pc, #92]	@ (80004f8 <RTC_Init+0xb4>)
 800049a:	68db      	ldr	r3, [r3, #12]
 800049c:	4a16      	ldr	r2, [pc, #88]	@ (80004f8 <RTC_Init+0xb4>)
 800049e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80004a2:	60d3      	str	r3, [r2, #12]
	while(!(RTC->ISR & RTC_ISR_INITF));	// wait until register update is allowed
 80004a4:	bf00      	nop
 80004a6:	4b14      	ldr	r3, [pc, #80]	@ (80004f8 <RTC_Init+0xb4>)
 80004a8:	68db      	ldr	r3, [r3, #12]
 80004aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d0f9      	beq.n	80004a6 <RTC_Init+0x62>
	//	rtc_cntrclk = rtcclk / (async div + 1) * (sync div + 1)
	//		rtc_cntrclk should be 1 Hz (for accurate timing)
	//		high async div (7-bit) => low power | sync div (15-bit)
	//		for LSI = 32KHz = 32000 Hz and rtc_cntrclk = 1 Hz,
	//			if async div = 128, then sync div = 250
	RTC->PRER = ((128-1) << RTC_PRER_PREDIV_A_Pos) | ((250-1) << RTC_PRER_PREDIV_S_Pos);
 80004b2:	4b11      	ldr	r3, [pc, #68]	@ (80004f8 <RTC_Init+0xb4>)
 80004b4:	4a11      	ldr	r2, [pc, #68]	@ (80004fc <RTC_Init+0xb8>)
 80004b6:	611a      	str	r2, [r3, #16]

	RTC_SetDate(dt);
 80004b8:	6878      	ldr	r0, [r7, #4]
 80004ba:	f000 f821 	bl	8000500 <RTC_SetDate>
	RTC_SetTime(tm);
 80004be:	6838      	ldr	r0, [r7, #0]
 80004c0:	f000 f85c 	bl	800057c <RTC_SetTime>

	RTC->CR |= RTC_CR_BYPSHAD;		// rtc date/time should be read from calendar registers (not shadow registers)
 80004c4:	4b0c      	ldr	r3, [pc, #48]	@ (80004f8 <RTC_Init+0xb4>)
 80004c6:	689b      	ldr	r3, [r3, #8]
 80004c8:	4a0b      	ldr	r2, [pc, #44]	@ (80004f8 <RTC_Init+0xb4>)
 80004ca:	f043 0320 	orr.w	r3, r3, #32
 80004ce:	6093      	str	r3, [r2, #8]
	RTC->ISR &= ~RTC_ISR_INIT;		// rtc is free running now (not in initialization mode)
 80004d0:	4b09      	ldr	r3, [pc, #36]	@ (80004f8 <RTC_Init+0xb4>)
 80004d2:	68db      	ldr	r3, [r3, #12]
 80004d4:	4a08      	ldr	r2, [pc, #32]	@ (80004f8 <RTC_Init+0xb4>)
 80004d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80004da:	60d3      	str	r3, [r2, #12]
	PWR->CR &= ~PWR_CR_DBP;			// disable access to RTC registers (write protection)
 80004dc:	4b05      	ldr	r3, [pc, #20]	@ (80004f4 <RTC_Init+0xb0>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	4a04      	ldr	r2, [pc, #16]	@ (80004f4 <RTC_Init+0xb0>)
 80004e2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80004e6:	6013      	str	r3, [r2, #0]
}
 80004e8:	bf00      	nop
 80004ea:	3708      	adds	r7, #8
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bd80      	pop	{r7, pc}
 80004f0:	40023800 	.word	0x40023800
 80004f4:	40007000 	.word	0x40007000
 80004f8:	40002800 	.word	0x40002800
 80004fc:	007f00f9 	.word	0x007f00f9

08000500 <RTC_SetDate>:

void RTC_SetDate(RTC_Date *dt) {
 8000500:	b580      	push	{r7, lr}
 8000502:	b084      	sub	sp, #16
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
	uint8_t date = Bin2Bcd(dt->Date);
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	785b      	ldrb	r3, [r3, #1]
 800050c:	4618      	mov	r0, r3
 800050e:	f7ff ff3b 	bl	8000388 <Bin2Bcd>
 8000512:	4603      	mov	r3, r0
 8000514:	73fb      	strb	r3, [r7, #15]
	uint8_t month = Bin2Bcd(dt->Month);
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	781b      	ldrb	r3, [r3, #0]
 800051a:	4618      	mov	r0, r3
 800051c:	f7ff ff34 	bl	8000388 <Bin2Bcd>
 8000520:	4603      	mov	r3, r0
 8000522:	73bb      	strb	r3, [r7, #14]
	uint8_t year = Bin2Bcd(dt->Year);
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	789b      	ldrb	r3, [r3, #2]
 8000528:	4618      	mov	r0, r3
 800052a:	f7ff ff2d 	bl	8000388 <Bin2Bcd>
 800052e:	4603      	mov	r3, r0
 8000530:	737b      	strb	r3, [r7, #13]
	uint8_t weekday = Bin2Bcd(dt->WeekDay);
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	78db      	ldrb	r3, [r3, #3]
 8000536:	4618      	mov	r0, r3
 8000538:	f7ff ff26 	bl	8000388 <Bin2Bcd>
 800053c:	4603      	mov	r3, r0
 800053e:	733b      	strb	r3, [r7, #12]
	uint32_t dr = 0;
 8000540:	2300      	movs	r3, #0
 8000542:	60bb      	str	r3, [r7, #8]
	dr |= year << RTC_DR_YU_Pos;
 8000544:	7b7b      	ldrb	r3, [r7, #13]
 8000546:	041b      	lsls	r3, r3, #16
 8000548:	68ba      	ldr	r2, [r7, #8]
 800054a:	4313      	orrs	r3, r2
 800054c:	60bb      	str	r3, [r7, #8]
	dr |= weekday << RTC_DR_WDU_Pos;
 800054e:	7b3b      	ldrb	r3, [r7, #12]
 8000550:	035b      	lsls	r3, r3, #13
 8000552:	68ba      	ldr	r2, [r7, #8]
 8000554:	4313      	orrs	r3, r2
 8000556:	60bb      	str	r3, [r7, #8]
	dr |= month << RTC_DR_MU_Pos;
 8000558:	7bbb      	ldrb	r3, [r7, #14]
 800055a:	021b      	lsls	r3, r3, #8
 800055c:	68ba      	ldr	r2, [r7, #8]
 800055e:	4313      	orrs	r3, r2
 8000560:	60bb      	str	r3, [r7, #8]
	dr |= date << RTC_DR_DU_Pos;
 8000562:	7bfb      	ldrb	r3, [r7, #15]
 8000564:	68ba      	ldr	r2, [r7, #8]
 8000566:	4313      	orrs	r3, r2
 8000568:	60bb      	str	r3, [r7, #8]
	RTC->DR = dr;
 800056a:	4a03      	ldr	r2, [pc, #12]	@ (8000578 <RTC_SetDate+0x78>)
 800056c:	68bb      	ldr	r3, [r7, #8]
 800056e:	6053      	str	r3, [r2, #4]
}
 8000570:	bf00      	nop
 8000572:	3710      	adds	r7, #16
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}
 8000578:	40002800 	.word	0x40002800

0800057c <RTC_SetTime>:

void RTC_SetTime(RTC_Time *tm) {
 800057c:	b580      	push	{r7, lr}
 800057e:	b084      	sub	sp, #16
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
	uint8_t hrs = Bin2Bcd(tm->Hours);
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	4618      	mov	r0, r3
 800058a:	f7ff fefd 	bl	8000388 <Bin2Bcd>
 800058e:	4603      	mov	r3, r0
 8000590:	73fb      	strb	r3, [r7, #15]
	uint8_t min = Bin2Bcd(tm->Minutes);
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	785b      	ldrb	r3, [r3, #1]
 8000596:	4618      	mov	r0, r3
 8000598:	f7ff fef6 	bl	8000388 <Bin2Bcd>
 800059c:	4603      	mov	r3, r0
 800059e:	73bb      	strb	r3, [r7, #14]
	uint8_t sec = Bin2Bcd(tm->Seconds);
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	789b      	ldrb	r3, [r3, #2]
 80005a4:	4618      	mov	r0, r3
 80005a6:	f7ff feef 	bl	8000388 <Bin2Bcd>
 80005aa:	4603      	mov	r3, r0
 80005ac:	737b      	strb	r3, [r7, #13]
	uint32_t tr = 0;
 80005ae:	2300      	movs	r3, #0
 80005b0:	60bb      	str	r3, [r7, #8]
	tr |= hrs << RTC_TR_HU_Pos;
 80005b2:	7bfb      	ldrb	r3, [r7, #15]
 80005b4:	041b      	lsls	r3, r3, #16
 80005b6:	68ba      	ldr	r2, [r7, #8]
 80005b8:	4313      	orrs	r3, r2
 80005ba:	60bb      	str	r3, [r7, #8]
	tr |= min << RTC_TR_MNU_Pos;
 80005bc:	7bbb      	ldrb	r3, [r7, #14]
 80005be:	021b      	lsls	r3, r3, #8
 80005c0:	68ba      	ldr	r2, [r7, #8]
 80005c2:	4313      	orrs	r3, r2
 80005c4:	60bb      	str	r3, [r7, #8]
	tr |= sec << RTC_TR_SU_Pos;
 80005c6:	7b7b      	ldrb	r3, [r7, #13]
 80005c8:	68ba      	ldr	r2, [r7, #8]
 80005ca:	4313      	orrs	r3, r2
 80005cc:	60bb      	str	r3, [r7, #8]
	tr &= ~RTC_TR_PM; // 24-hours mode
 80005ce:	68bb      	ldr	r3, [r7, #8]
 80005d0:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80005d4:	60bb      	str	r3, [r7, #8]
	RTC->TR = tr;
 80005d6:	4a03      	ldr	r2, [pc, #12]	@ (80005e4 <RTC_SetTime+0x68>)
 80005d8:	68bb      	ldr	r3, [r7, #8]
 80005da:	6013      	str	r3, [r2, #0]
}
 80005dc:	bf00      	nop
 80005de:	3710      	adds	r7, #16
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	40002800 	.word	0x40002800

080005e8 <RTC_GetDate>:

void RTC_GetDate(RTC_Date *dt) {
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b084      	sub	sp, #16
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
	uint32_t dr = RTC->DR;
 80005f0:	4b1f      	ldr	r3, [pc, #124]	@ (8000670 <RTC_GetDate+0x88>)
 80005f2:	685b      	ldr	r3, [r3, #4]
 80005f4:	60fb      	str	r3, [r7, #12]
	uint8_t val = (dr & (RTC_DR_DT_Msk | RTC_DR_DU_Msk)) >> RTC_DR_DU_Pos;
 80005f6:	68fb      	ldr	r3, [r7, #12]
 80005f8:	b2db      	uxtb	r3, r3
 80005fa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80005fe:	72fb      	strb	r3, [r7, #11]
	dt->Date = Bcd2Bin(val);
 8000600:	7afb      	ldrb	r3, [r7, #11]
 8000602:	b29b      	uxth	r3, r3
 8000604:	4618      	mov	r0, r3
 8000606:	f7ff fef7 	bl	80003f8 <Bcd2Bin>
 800060a:	4603      	mov	r3, r0
 800060c:	b2da      	uxtb	r2, r3
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	705a      	strb	r2, [r3, #1]
	val = (dr & (RTC_DR_MT_Msk | RTC_DR_MU_Msk)) >> RTC_DR_MU_Pos;
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	0a1b      	lsrs	r3, r3, #8
 8000616:	b2db      	uxtb	r3, r3
 8000618:	f003 031f 	and.w	r3, r3, #31
 800061c:	72fb      	strb	r3, [r7, #11]
	dt->Month = Bcd2Bin(val);
 800061e:	7afb      	ldrb	r3, [r7, #11]
 8000620:	b29b      	uxth	r3, r3
 8000622:	4618      	mov	r0, r3
 8000624:	f7ff fee8 	bl	80003f8 <Bcd2Bin>
 8000628:	4603      	mov	r3, r0
 800062a:	b2da      	uxtb	r2, r3
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	701a      	strb	r2, [r3, #0]
	val = (dr & (RTC_DR_YT_Msk | RTC_DR_YU_Msk)) >> RTC_DR_YU_Pos;
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	0c1b      	lsrs	r3, r3, #16
 8000634:	72fb      	strb	r3, [r7, #11]
	dt->Year = Bcd2Bin(val);
 8000636:	7afb      	ldrb	r3, [r7, #11]
 8000638:	b29b      	uxth	r3, r3
 800063a:	4618      	mov	r0, r3
 800063c:	f7ff fedc 	bl	80003f8 <Bcd2Bin>
 8000640:	4603      	mov	r3, r0
 8000642:	b2da      	uxtb	r2, r3
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	709a      	strb	r2, [r3, #2]
	val = (dr & (RTC_DR_WDU_Msk)) >> RTC_DR_WDU_Pos;
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	0b5b      	lsrs	r3, r3, #13
 800064c:	b2db      	uxtb	r3, r3
 800064e:	f003 0307 	and.w	r3, r3, #7
 8000652:	72fb      	strb	r3, [r7, #11]
	dt->WeekDay = Bcd2Bin(val);
 8000654:	7afb      	ldrb	r3, [r7, #11]
 8000656:	b29b      	uxth	r3, r3
 8000658:	4618      	mov	r0, r3
 800065a:	f7ff fecd 	bl	80003f8 <Bcd2Bin>
 800065e:	4603      	mov	r3, r0
 8000660:	b2da      	uxtb	r2, r3
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	70da      	strb	r2, [r3, #3]
}
 8000666:	bf00      	nop
 8000668:	3710      	adds	r7, #16
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	40002800 	.word	0x40002800

08000674 <RTC_GetTime>:

void RTC_GetTime(RTC_Time *tm) {
 8000674:	b580      	push	{r7, lr}
 8000676:	b084      	sub	sp, #16
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
	uint32_t tr = RTC->TR;
 800067c:	4b19      	ldr	r3, [pc, #100]	@ (80006e4 <RTC_GetTime+0x70>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	60fb      	str	r3, [r7, #12]
	uint8_t val = (tr & (RTC_TR_HT_Msk | RTC_TR_HU_Msk)) >> RTC_TR_HU_Pos;
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	0c1b      	lsrs	r3, r3, #16
 8000686:	b2db      	uxtb	r3, r3
 8000688:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800068c:	72fb      	strb	r3, [r7, #11]
	tm->Hours = Bcd2Bin(val);
 800068e:	7afb      	ldrb	r3, [r7, #11]
 8000690:	b29b      	uxth	r3, r3
 8000692:	4618      	mov	r0, r3
 8000694:	f7ff feb0 	bl	80003f8 <Bcd2Bin>
 8000698:	4603      	mov	r3, r0
 800069a:	b2da      	uxtb	r2, r3
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	701a      	strb	r2, [r3, #0]
	val = (tr & (RTC_TR_MNT_Msk | RTC_TR_MNU_Msk)) >> RTC_TR_MNU_Pos;
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	0a1b      	lsrs	r3, r3, #8
 80006a4:	b2db      	uxtb	r3, r3
 80006a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80006aa:	72fb      	strb	r3, [r7, #11]
	tm->Minutes = Bcd2Bin(val);
 80006ac:	7afb      	ldrb	r3, [r7, #11]
 80006ae:	b29b      	uxth	r3, r3
 80006b0:	4618      	mov	r0, r3
 80006b2:	f7ff fea1 	bl	80003f8 <Bcd2Bin>
 80006b6:	4603      	mov	r3, r0
 80006b8:	b2da      	uxtb	r2, r3
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	705a      	strb	r2, [r3, #1]
	val = (tr & (RTC_TR_ST_Msk | RTC_TR_SU_Msk)) >> RTC_TR_SU_Pos;
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	b2db      	uxtb	r3, r3
 80006c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80006c6:	72fb      	strb	r3, [r7, #11]
	tm->Seconds = Bcd2Bin(val);
 80006c8:	7afb      	ldrb	r3, [r7, #11]
 80006ca:	b29b      	uxth	r3, r3
 80006cc:	4618      	mov	r0, r3
 80006ce:	f7ff fe93 	bl	80003f8 <Bcd2Bin>
 80006d2:	4603      	mov	r3, r0
 80006d4:	b2da      	uxtb	r2, r3
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	709a      	strb	r2, [r3, #2]
}
 80006da:	bf00      	nop
 80006dc:	3710      	adds	r7, #16
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	40002800 	.word	0x40002800

080006e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b086      	sub	sp, #24
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80006f0:	4a14      	ldr	r2, [pc, #80]	@ (8000744 <_sbrk+0x5c>)
 80006f2:	4b15      	ldr	r3, [pc, #84]	@ (8000748 <_sbrk+0x60>)
 80006f4:	1ad3      	subs	r3, r2, r3
 80006f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80006f8:	697b      	ldr	r3, [r7, #20]
 80006fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80006fc:	4b13      	ldr	r3, [pc, #76]	@ (800074c <_sbrk+0x64>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	2b00      	cmp	r3, #0
 8000702:	d102      	bne.n	800070a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000704:	4b11      	ldr	r3, [pc, #68]	@ (800074c <_sbrk+0x64>)
 8000706:	4a12      	ldr	r2, [pc, #72]	@ (8000750 <_sbrk+0x68>)
 8000708:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800070a:	4b10      	ldr	r3, [pc, #64]	@ (800074c <_sbrk+0x64>)
 800070c:	681a      	ldr	r2, [r3, #0]
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	4413      	add	r3, r2
 8000712:	693a      	ldr	r2, [r7, #16]
 8000714:	429a      	cmp	r2, r3
 8000716:	d207      	bcs.n	8000728 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000718:	f000 f93e 	bl	8000998 <__errno>
 800071c:	4603      	mov	r3, r0
 800071e:	220c      	movs	r2, #12
 8000720:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000722:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000726:	e009      	b.n	800073c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000728:	4b08      	ldr	r3, [pc, #32]	@ (800074c <_sbrk+0x64>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800072e:	4b07      	ldr	r3, [pc, #28]	@ (800074c <_sbrk+0x64>)
 8000730:	681a      	ldr	r2, [r3, #0]
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	4413      	add	r3, r2
 8000736:	4a05      	ldr	r2, [pc, #20]	@ (800074c <_sbrk+0x64>)
 8000738:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800073a:	68fb      	ldr	r3, [r7, #12]
}
 800073c:	4618      	mov	r0, r3
 800073e:	3718      	adds	r7, #24
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	20020000 	.word	0x20020000
 8000748:	00000400 	.word	0x00000400
 800074c:	20000070 	.word	0x20000070
 8000750:	200001c0 	.word	0x200001c0

08000754 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  DWT_Init();
 8000758:	f000 f802 	bl	8000760 <DWT_Init>
}
 800075c:	bf00      	nop
 800075e:	bd80      	pop	{r7, pc}

08000760 <DWT_Init>:
}
#pragma GCC pop_options


uint32_t DWT_Init(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000764:	4b14      	ldr	r3, [pc, #80]	@ (80007b8 <DWT_Init+0x58>)
 8000766:	68db      	ldr	r3, [r3, #12]
 8000768:	4a13      	ldr	r2, [pc, #76]	@ (80007b8 <DWT_Init+0x58>)
 800076a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800076e:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000770:	4b11      	ldr	r3, [pc, #68]	@ (80007b8 <DWT_Init+0x58>)
 8000772:	68db      	ldr	r3, [r3, #12]
 8000774:	4a10      	ldr	r2, [pc, #64]	@ (80007b8 <DWT_Init+0x58>)
 8000776:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800077a:	60d3      	str	r3, [r2, #12]
    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 800077c:	4b0f      	ldr	r3, [pc, #60]	@ (80007bc <DWT_Init+0x5c>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	4a0e      	ldr	r2, [pc, #56]	@ (80007bc <DWT_Init+0x5c>)
 8000782:	f023 0301 	bic.w	r3, r3, #1
 8000786:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000788:	4b0c      	ldr	r3, [pc, #48]	@ (80007bc <DWT_Init+0x5c>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	4a0b      	ldr	r2, [pc, #44]	@ (80007bc <DWT_Init+0x5c>)
 800078e:	f043 0301 	orr.w	r3, r3, #1
 8000792:	6013      	str	r3, [r2, #0]
    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 8000794:	4b09      	ldr	r3, [pc, #36]	@ (80007bc <DWT_Init+0x5c>)
 8000796:	2200      	movs	r2, #0
 8000798:	605a      	str	r2, [r3, #4]
    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 800079a:	bf00      	nop
    __ASM volatile ("NOP");
 800079c:	bf00      	nop
    __ASM volatile ("NOP");
 800079e:	bf00      	nop
    /* Check if clock cycle counter has started: 0 on success */
    return !(DWT->CYCCNT);
 80007a0:	4b06      	ldr	r3, [pc, #24]	@ (80007bc <DWT_Init+0x5c>)
 80007a2:	685b      	ldr	r3, [r3, #4]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	bf0c      	ite	eq
 80007a8:	2301      	moveq	r3, #1
 80007aa:	2300      	movne	r3, #0
 80007ac:	b2db      	uxtb	r3, r3
}
 80007ae:	4618      	mov	r0, r3
 80007b0:	46bd      	mov	sp, r7
 80007b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b6:	4770      	bx	lr
 80007b8:	e000edf0 	.word	0xe000edf0
 80007bc:	e0001000 	.word	0xe0001000

080007c0 <UartInit>:

#define TX_PIN	2
#define RX_PIN	3
#define USART_ALT_FN	7

void UartInit(uint32_t baud) {
 80007c0:	b480      	push	{r7}
 80007c2:	b083      	sub	sp, #12
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
	// UART GPIO Init -- PA.2 (Tx) and PA.3 (Rx)
	// enable clock
	RCC->AHB1ENR |= BV(RCC_AHB1ENR_GPIOAEN_Pos);
 80007c8:	4b31      	ldr	r3, [pc, #196]	@ (8000890 <UartInit+0xd0>)
 80007ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007cc:	4a30      	ldr	r2, [pc, #192]	@ (8000890 <UartInit+0xd0>)
 80007ce:	f043 0301 	orr.w	r3, r3, #1
 80007d2:	6313      	str	r3, [r2, #48]	@ 0x30
	//	alt fn = 0111 = 7 (Uart Tx and Rx)
	GPIOA->AFR[0] |= ((USART_ALT_FN << GPIO_AFRL_AFSEL3_Pos) | (USART_ALT_FN << GPIO_AFRL_AFSEL2_Pos));
 80007d4:	4b2f      	ldr	r3, [pc, #188]	@ (8000894 <UartInit+0xd4>)
 80007d6:	6a1b      	ldr	r3, [r3, #32]
 80007d8:	4a2e      	ldr	r2, [pc, #184]	@ (8000894 <UartInit+0xd4>)
 80007da:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 80007de:	6213      	str	r3, [r2, #32]
	// 	mode=10 (alt fn), speed=00 (low), pupdr=00 (none), typer=0 (push-pull)
	GPIOA->MODER |= (BV(TX_PIN * 2 + 1) | BV(RX_PIN * 2 + 1));
 80007e0:	4b2c      	ldr	r3, [pc, #176]	@ (8000894 <UartInit+0xd4>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	4a2b      	ldr	r2, [pc, #172]	@ (8000894 <UartInit+0xd4>)
 80007e6:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 80007ea:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(BV(TX_PIN * 2) | BV(RX_PIN * 2));
 80007ec:	4b29      	ldr	r3, [pc, #164]	@ (8000894 <UartInit+0xd4>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	4a28      	ldr	r2, [pc, #160]	@ (8000894 <UartInit+0xd4>)
 80007f2:	f023 0350 	bic.w	r3, r3, #80	@ 0x50
 80007f6:	6013      	str	r3, [r2, #0]
	GPIOA->OSPEEDR &= ~(BV(TX_PIN * 2) | BV(TX_PIN * 2 + 1) | BV(RX_PIN * 2) | BV(RX_PIN * 2 + 1));
 80007f8:	4b26      	ldr	r3, [pc, #152]	@ (8000894 <UartInit+0xd4>)
 80007fa:	689b      	ldr	r3, [r3, #8]
 80007fc:	4a25      	ldr	r2, [pc, #148]	@ (8000894 <UartInit+0xd4>)
 80007fe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000802:	6093      	str	r3, [r2, #8]
	GPIOA->PUPDR &= ~(BV(TX_PIN * 2) | BV(TX_PIN * 2 + 1) | BV(RX_PIN * 2) | BV(RX_PIN * 2 + 1));
 8000804:	4b23      	ldr	r3, [pc, #140]	@ (8000894 <UartInit+0xd4>)
 8000806:	68db      	ldr	r3, [r3, #12]
 8000808:	4a22      	ldr	r2, [pc, #136]	@ (8000894 <UartInit+0xd4>)
 800080a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800080e:	60d3      	str	r3, [r2, #12]
	GPIOA->OTYPER &= ~(BV(TX_PIN) | BV(RX_PIN));
 8000810:	4b20      	ldr	r3, [pc, #128]	@ (8000894 <UartInit+0xd4>)
 8000812:	685b      	ldr	r3, [r3, #4]
 8000814:	4a1f      	ldr	r2, [pc, #124]	@ (8000894 <UartInit+0xd4>)
 8000816:	f023 030c 	bic.w	r3, r3, #12
 800081a:	6053      	str	r3, [r2, #4]

	// UART Config
	// enable uart clock
	RCC->APB1ENR |= BV(RCC_APB1ENR_USART2EN_Pos);
 800081c:	4b1c      	ldr	r3, [pc, #112]	@ (8000890 <UartInit+0xd0>)
 800081e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000820:	4a1b      	ldr	r2, [pc, #108]	@ (8000890 <UartInit+0xd0>)
 8000822:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000826:	6413      	str	r3, [r2, #64]	@ 0x40
	// tx en (TE=1), rx en (RE=1), wordlen=8 (M=0), OVER8=0, disable parity (PCE=0)
	USART2->CR1 = BV(USART_CR1_TE_Pos) | BV(USART_CR1_RE_Pos);
 8000828:	4b1b      	ldr	r3, [pc, #108]	@ (8000898 <UartInit+0xd8>)
 800082a:	220c      	movs	r2, #12
 800082c:	60da      	str	r2, [r3, #12]
	// 1 stop bit (STOP=00), disable clock (CLKEN=0)
	USART2->CR2 = 0x00000000;
 800082e:	4b1a      	ldr	r3, [pc, #104]	@ (8000898 <UartInit+0xd8>)
 8000830:	2200      	movs	r2, #0
 8000832:	611a      	str	r2, [r3, #16]
	// no hw control, no irda, no dma, no interupts
	USART2->CR3 = 0x00000000;
 8000834:	4b18      	ldr	r3, [pc, #96]	@ (8000898 <UartInit+0xd8>)
 8000836:	2200      	movs	r2, #0
 8000838:	615a      	str	r2, [r3, #20]
	// set BRR for given baud rate
	switch(baud) {
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	f5b3 3fe1 	cmp.w	r3, #115200	@ 0x1c200
 8000840:	d016      	beq.n	8000870 <UartInit+0xb0>
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	f5b3 3fe1 	cmp.w	r3, #115200	@ 0x1c200
 8000848:	d816      	bhi.n	8000878 <UartInit+0xb8>
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	f5b3 5f16 	cmp.w	r3, #9600	@ 0x2580
 8000850:	d004      	beq.n	800085c <UartInit+0x9c>
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	f5b3 4f16 	cmp.w	r3, #38400	@ 0x9600
 8000858:	d005      	beq.n	8000866 <UartInit+0xa6>
 800085a:	e00d      	b.n	8000878 <UartInit+0xb8>
		case BAUD_9600:
			USART2->BRR = BAUD_BRR_9600;
 800085c:	4b0e      	ldr	r3, [pc, #56]	@ (8000898 <UartInit+0xd8>)
 800085e:	f240 6283 	movw	r2, #1667	@ 0x683
 8000862:	609a      	str	r2, [r3, #8]
			break;
 8000864:	e008      	b.n	8000878 <UartInit+0xb8>
		case BAUD_38400:
			USART2->BRR = BAUD_BRR_38400;
 8000866:	4b0c      	ldr	r3, [pc, #48]	@ (8000898 <UartInit+0xd8>)
 8000868:	f240 12a1 	movw	r2, #417	@ 0x1a1
 800086c:	609a      	str	r2, [r3, #8]
			break;
 800086e:	e003      	b.n	8000878 <UartInit+0xb8>
		case BAUD_115200:
			USART2->BRR = BAUD_BRR_115200;
 8000870:	4b09      	ldr	r3, [pc, #36]	@ (8000898 <UartInit+0xd8>)
 8000872:	228b      	movs	r2, #139	@ 0x8b
 8000874:	609a      	str	r2, [r3, #8]
			break;
 8000876:	bf00      	nop
	}
	// uart enable (UE=1)
	USART2->CR1 |= BV(USART_CR1_UE_Pos);
 8000878:	4b07      	ldr	r3, [pc, #28]	@ (8000898 <UartInit+0xd8>)
 800087a:	68db      	ldr	r3, [r3, #12]
 800087c:	4a06      	ldr	r2, [pc, #24]	@ (8000898 <UartInit+0xd8>)
 800087e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000882:	60d3      	str	r3, [r2, #12]
}
 8000884:	bf00      	nop
 8000886:	370c      	adds	r7, #12
 8000888:	46bd      	mov	sp, r7
 800088a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088e:	4770      	bx	lr
 8000890:	40023800 	.word	0x40023800
 8000894:	40020000 	.word	0x40020000
 8000898:	40004400 	.word	0x40004400

0800089c <UartPutch>:

void UartPutch(uint8_t ch) {
 800089c:	b480      	push	{r7}
 800089e:	b083      	sub	sp, #12
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	4603      	mov	r3, r0
 80008a4:	71fb      	strb	r3, [r7, #7]
	// wait until TDR is empty (i.e. prev byte transmitted)
	while((USART2->SR & BV(USART_SR_TXE_Pos)) == 0)
 80008a6:	bf00      	nop
 80008a8:	4b07      	ldr	r3, [pc, #28]	@ (80008c8 <UartPutch+0x2c>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d0f9      	beq.n	80008a8 <UartPutch+0xc>
		;
	// write new byte in TDR
	USART2->DR = ch;
 80008b4:	4a04      	ldr	r2, [pc, #16]	@ (80008c8 <UartPutch+0x2c>)
 80008b6:	79fb      	ldrb	r3, [r7, #7]
 80008b8:	6053      	str	r3, [r2, #4]
}
 80008ba:	bf00      	nop
 80008bc:	370c      	adds	r7, #12
 80008be:	46bd      	mov	sp, r7
 80008c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c4:	4770      	bx	lr
 80008c6:	bf00      	nop
 80008c8:	40004400 	.word	0x40004400

080008cc <UartPuts>:
	// read received byte from RDR
	char ch = USART2->DR;
	return ch;
}

void UartPuts(char str[]) {
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b084      	sub	sp, #16
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
	int i;
	for(i=0; str[i]!='\0'; i++)
 80008d4:	2300      	movs	r3, #0
 80008d6:	60fb      	str	r3, [r7, #12]
 80008d8:	e009      	b.n	80008ee <UartPuts+0x22>
		UartPutch(str[i]);
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	687a      	ldr	r2, [r7, #4]
 80008de:	4413      	add	r3, r2
 80008e0:	781b      	ldrb	r3, [r3, #0]
 80008e2:	4618      	mov	r0, r3
 80008e4:	f7ff ffda 	bl	800089c <UartPutch>
	for(i=0; str[i]!='\0'; i++)
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	3301      	adds	r3, #1
 80008ec:	60fb      	str	r3, [r7, #12]
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	687a      	ldr	r2, [r7, #4]
 80008f2:	4413      	add	r3, r2
 80008f4:	781b      	ldrb	r3, [r3, #0]
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d1ef      	bne.n	80008da <UartPuts+0xe>
}
 80008fa:	bf00      	nop
 80008fc:	bf00      	nop
 80008fe:	3710      	adds	r7, #16
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}

08000904 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000904:	480d      	ldr	r0, [pc, #52]	@ (800093c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000906:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000908:	f7ff ff24 	bl	8000754 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800090c:	480c      	ldr	r0, [pc, #48]	@ (8000940 <LoopForever+0x6>)
  ldr r1, =_edata
 800090e:	490d      	ldr	r1, [pc, #52]	@ (8000944 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000910:	4a0d      	ldr	r2, [pc, #52]	@ (8000948 <LoopForever+0xe>)
  movs r3, #0
 8000912:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000914:	e002      	b.n	800091c <LoopCopyDataInit>

08000916 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000916:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000918:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800091a:	3304      	adds	r3, #4

0800091c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800091c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800091e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000920:	d3f9      	bcc.n	8000916 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000922:	4a0a      	ldr	r2, [pc, #40]	@ (800094c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000924:	4c0a      	ldr	r4, [pc, #40]	@ (8000950 <LoopForever+0x16>)
  movs r3, #0
 8000926:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000928:	e001      	b.n	800092e <LoopFillZerobss>

0800092a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800092a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800092c:	3204      	adds	r2, #4

0800092e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800092e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000930:	d3fb      	bcc.n	800092a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000932:	f000 f837 	bl	80009a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000936:	f7ff fcc3 	bl	80002c0 <main>

0800093a <LoopForever>:

LoopForever:
  b LoopForever
 800093a:	e7fe      	b.n	800093a <LoopForever>
  ldr   r0, =_estack
 800093c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000940:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000944:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 8000948:	0800131c 	.word	0x0800131c
  ldr r2, =_sbss
 800094c:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 8000950:	200001bc 	.word	0x200001bc

08000954 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000954:	e7fe      	b.n	8000954 <ADC_IRQHandler>
	...

08000958 <siprintf>:
 8000958:	b40e      	push	{r1, r2, r3}
 800095a:	b500      	push	{lr}
 800095c:	b09c      	sub	sp, #112	@ 0x70
 800095e:	ab1d      	add	r3, sp, #116	@ 0x74
 8000960:	9002      	str	r0, [sp, #8]
 8000962:	9006      	str	r0, [sp, #24]
 8000964:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8000968:	4809      	ldr	r0, [pc, #36]	@ (8000990 <siprintf+0x38>)
 800096a:	9107      	str	r1, [sp, #28]
 800096c:	9104      	str	r1, [sp, #16]
 800096e:	4909      	ldr	r1, [pc, #36]	@ (8000994 <siprintf+0x3c>)
 8000970:	f853 2b04 	ldr.w	r2, [r3], #4
 8000974:	9105      	str	r1, [sp, #20]
 8000976:	6800      	ldr	r0, [r0, #0]
 8000978:	9301      	str	r3, [sp, #4]
 800097a:	a902      	add	r1, sp, #8
 800097c:	f000 f98c 	bl	8000c98 <_svfiprintf_r>
 8000980:	9b02      	ldr	r3, [sp, #8]
 8000982:	2200      	movs	r2, #0
 8000984:	701a      	strb	r2, [r3, #0]
 8000986:	b01c      	add	sp, #112	@ 0x70
 8000988:	f85d eb04 	ldr.w	lr, [sp], #4
 800098c:	b003      	add	sp, #12
 800098e:	4770      	bx	lr
 8000990:	20000004 	.word	0x20000004
 8000994:	ffff0208 	.word	0xffff0208

08000998 <__errno>:
 8000998:	4b01      	ldr	r3, [pc, #4]	@ (80009a0 <__errno+0x8>)
 800099a:	6818      	ldr	r0, [r3, #0]
 800099c:	4770      	bx	lr
 800099e:	bf00      	nop
 80009a0:	20000004 	.word	0x20000004

080009a4 <__libc_init_array>:
 80009a4:	b570      	push	{r4, r5, r6, lr}
 80009a6:	4d0d      	ldr	r5, [pc, #52]	@ (80009dc <__libc_init_array+0x38>)
 80009a8:	4c0d      	ldr	r4, [pc, #52]	@ (80009e0 <__libc_init_array+0x3c>)
 80009aa:	1b64      	subs	r4, r4, r5
 80009ac:	10a4      	asrs	r4, r4, #2
 80009ae:	2600      	movs	r6, #0
 80009b0:	42a6      	cmp	r6, r4
 80009b2:	d109      	bne.n	80009c8 <__libc_init_array+0x24>
 80009b4:	4d0b      	ldr	r5, [pc, #44]	@ (80009e4 <__libc_init_array+0x40>)
 80009b6:	4c0c      	ldr	r4, [pc, #48]	@ (80009e8 <__libc_init_array+0x44>)
 80009b8:	f000 fc66 	bl	8001288 <_init>
 80009bc:	1b64      	subs	r4, r4, r5
 80009be:	10a4      	asrs	r4, r4, #2
 80009c0:	2600      	movs	r6, #0
 80009c2:	42a6      	cmp	r6, r4
 80009c4:	d105      	bne.n	80009d2 <__libc_init_array+0x2e>
 80009c6:	bd70      	pop	{r4, r5, r6, pc}
 80009c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80009cc:	4798      	blx	r3
 80009ce:	3601      	adds	r6, #1
 80009d0:	e7ee      	b.n	80009b0 <__libc_init_array+0xc>
 80009d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80009d6:	4798      	blx	r3
 80009d8:	3601      	adds	r6, #1
 80009da:	e7f2      	b.n	80009c2 <__libc_init_array+0x1e>
 80009dc:	08001314 	.word	0x08001314
 80009e0:	08001314 	.word	0x08001314
 80009e4:	08001314 	.word	0x08001314
 80009e8:	08001318 	.word	0x08001318

080009ec <__retarget_lock_acquire_recursive>:
 80009ec:	4770      	bx	lr

080009ee <__retarget_lock_release_recursive>:
 80009ee:	4770      	bx	lr

080009f0 <_free_r>:
 80009f0:	b538      	push	{r3, r4, r5, lr}
 80009f2:	4605      	mov	r5, r0
 80009f4:	2900      	cmp	r1, #0
 80009f6:	d041      	beq.n	8000a7c <_free_r+0x8c>
 80009f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80009fc:	1f0c      	subs	r4, r1, #4
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	bfb8      	it	lt
 8000a02:	18e4      	addlt	r4, r4, r3
 8000a04:	f000 f8e0 	bl	8000bc8 <__malloc_lock>
 8000a08:	4a1d      	ldr	r2, [pc, #116]	@ (8000a80 <_free_r+0x90>)
 8000a0a:	6813      	ldr	r3, [r2, #0]
 8000a0c:	b933      	cbnz	r3, 8000a1c <_free_r+0x2c>
 8000a0e:	6063      	str	r3, [r4, #4]
 8000a10:	6014      	str	r4, [r2, #0]
 8000a12:	4628      	mov	r0, r5
 8000a14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000a18:	f000 b8dc 	b.w	8000bd4 <__malloc_unlock>
 8000a1c:	42a3      	cmp	r3, r4
 8000a1e:	d908      	bls.n	8000a32 <_free_r+0x42>
 8000a20:	6820      	ldr	r0, [r4, #0]
 8000a22:	1821      	adds	r1, r4, r0
 8000a24:	428b      	cmp	r3, r1
 8000a26:	bf01      	itttt	eq
 8000a28:	6819      	ldreq	r1, [r3, #0]
 8000a2a:	685b      	ldreq	r3, [r3, #4]
 8000a2c:	1809      	addeq	r1, r1, r0
 8000a2e:	6021      	streq	r1, [r4, #0]
 8000a30:	e7ed      	b.n	8000a0e <_free_r+0x1e>
 8000a32:	461a      	mov	r2, r3
 8000a34:	685b      	ldr	r3, [r3, #4]
 8000a36:	b10b      	cbz	r3, 8000a3c <_free_r+0x4c>
 8000a38:	42a3      	cmp	r3, r4
 8000a3a:	d9fa      	bls.n	8000a32 <_free_r+0x42>
 8000a3c:	6811      	ldr	r1, [r2, #0]
 8000a3e:	1850      	adds	r0, r2, r1
 8000a40:	42a0      	cmp	r0, r4
 8000a42:	d10b      	bne.n	8000a5c <_free_r+0x6c>
 8000a44:	6820      	ldr	r0, [r4, #0]
 8000a46:	4401      	add	r1, r0
 8000a48:	1850      	adds	r0, r2, r1
 8000a4a:	4283      	cmp	r3, r0
 8000a4c:	6011      	str	r1, [r2, #0]
 8000a4e:	d1e0      	bne.n	8000a12 <_free_r+0x22>
 8000a50:	6818      	ldr	r0, [r3, #0]
 8000a52:	685b      	ldr	r3, [r3, #4]
 8000a54:	6053      	str	r3, [r2, #4]
 8000a56:	4408      	add	r0, r1
 8000a58:	6010      	str	r0, [r2, #0]
 8000a5a:	e7da      	b.n	8000a12 <_free_r+0x22>
 8000a5c:	d902      	bls.n	8000a64 <_free_r+0x74>
 8000a5e:	230c      	movs	r3, #12
 8000a60:	602b      	str	r3, [r5, #0]
 8000a62:	e7d6      	b.n	8000a12 <_free_r+0x22>
 8000a64:	6820      	ldr	r0, [r4, #0]
 8000a66:	1821      	adds	r1, r4, r0
 8000a68:	428b      	cmp	r3, r1
 8000a6a:	bf04      	itt	eq
 8000a6c:	6819      	ldreq	r1, [r3, #0]
 8000a6e:	685b      	ldreq	r3, [r3, #4]
 8000a70:	6063      	str	r3, [r4, #4]
 8000a72:	bf04      	itt	eq
 8000a74:	1809      	addeq	r1, r1, r0
 8000a76:	6021      	streq	r1, [r4, #0]
 8000a78:	6054      	str	r4, [r2, #4]
 8000a7a:	e7ca      	b.n	8000a12 <_free_r+0x22>
 8000a7c:	bd38      	pop	{r3, r4, r5, pc}
 8000a7e:	bf00      	nop
 8000a80:	200001b8 	.word	0x200001b8

08000a84 <sbrk_aligned>:
 8000a84:	b570      	push	{r4, r5, r6, lr}
 8000a86:	4e0f      	ldr	r6, [pc, #60]	@ (8000ac4 <sbrk_aligned+0x40>)
 8000a88:	460c      	mov	r4, r1
 8000a8a:	6831      	ldr	r1, [r6, #0]
 8000a8c:	4605      	mov	r5, r0
 8000a8e:	b911      	cbnz	r1, 8000a96 <sbrk_aligned+0x12>
 8000a90:	f000 fba6 	bl	80011e0 <_sbrk_r>
 8000a94:	6030      	str	r0, [r6, #0]
 8000a96:	4621      	mov	r1, r4
 8000a98:	4628      	mov	r0, r5
 8000a9a:	f000 fba1 	bl	80011e0 <_sbrk_r>
 8000a9e:	1c43      	adds	r3, r0, #1
 8000aa0:	d103      	bne.n	8000aaa <sbrk_aligned+0x26>
 8000aa2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8000aa6:	4620      	mov	r0, r4
 8000aa8:	bd70      	pop	{r4, r5, r6, pc}
 8000aaa:	1cc4      	adds	r4, r0, #3
 8000aac:	f024 0403 	bic.w	r4, r4, #3
 8000ab0:	42a0      	cmp	r0, r4
 8000ab2:	d0f8      	beq.n	8000aa6 <sbrk_aligned+0x22>
 8000ab4:	1a21      	subs	r1, r4, r0
 8000ab6:	4628      	mov	r0, r5
 8000ab8:	f000 fb92 	bl	80011e0 <_sbrk_r>
 8000abc:	3001      	adds	r0, #1
 8000abe:	d1f2      	bne.n	8000aa6 <sbrk_aligned+0x22>
 8000ac0:	e7ef      	b.n	8000aa2 <sbrk_aligned+0x1e>
 8000ac2:	bf00      	nop
 8000ac4:	200001b4 	.word	0x200001b4

08000ac8 <_malloc_r>:
 8000ac8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000acc:	1ccd      	adds	r5, r1, #3
 8000ace:	f025 0503 	bic.w	r5, r5, #3
 8000ad2:	3508      	adds	r5, #8
 8000ad4:	2d0c      	cmp	r5, #12
 8000ad6:	bf38      	it	cc
 8000ad8:	250c      	movcc	r5, #12
 8000ada:	2d00      	cmp	r5, #0
 8000adc:	4606      	mov	r6, r0
 8000ade:	db01      	blt.n	8000ae4 <_malloc_r+0x1c>
 8000ae0:	42a9      	cmp	r1, r5
 8000ae2:	d904      	bls.n	8000aee <_malloc_r+0x26>
 8000ae4:	230c      	movs	r3, #12
 8000ae6:	6033      	str	r3, [r6, #0]
 8000ae8:	2000      	movs	r0, #0
 8000aea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000aee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000bc4 <_malloc_r+0xfc>
 8000af2:	f000 f869 	bl	8000bc8 <__malloc_lock>
 8000af6:	f8d8 3000 	ldr.w	r3, [r8]
 8000afa:	461c      	mov	r4, r3
 8000afc:	bb44      	cbnz	r4, 8000b50 <_malloc_r+0x88>
 8000afe:	4629      	mov	r1, r5
 8000b00:	4630      	mov	r0, r6
 8000b02:	f7ff ffbf 	bl	8000a84 <sbrk_aligned>
 8000b06:	1c43      	adds	r3, r0, #1
 8000b08:	4604      	mov	r4, r0
 8000b0a:	d158      	bne.n	8000bbe <_malloc_r+0xf6>
 8000b0c:	f8d8 4000 	ldr.w	r4, [r8]
 8000b10:	4627      	mov	r7, r4
 8000b12:	2f00      	cmp	r7, #0
 8000b14:	d143      	bne.n	8000b9e <_malloc_r+0xd6>
 8000b16:	2c00      	cmp	r4, #0
 8000b18:	d04b      	beq.n	8000bb2 <_malloc_r+0xea>
 8000b1a:	6823      	ldr	r3, [r4, #0]
 8000b1c:	4639      	mov	r1, r7
 8000b1e:	4630      	mov	r0, r6
 8000b20:	eb04 0903 	add.w	r9, r4, r3
 8000b24:	f000 fb5c 	bl	80011e0 <_sbrk_r>
 8000b28:	4581      	cmp	r9, r0
 8000b2a:	d142      	bne.n	8000bb2 <_malloc_r+0xea>
 8000b2c:	6821      	ldr	r1, [r4, #0]
 8000b2e:	1a6d      	subs	r5, r5, r1
 8000b30:	4629      	mov	r1, r5
 8000b32:	4630      	mov	r0, r6
 8000b34:	f7ff ffa6 	bl	8000a84 <sbrk_aligned>
 8000b38:	3001      	adds	r0, #1
 8000b3a:	d03a      	beq.n	8000bb2 <_malloc_r+0xea>
 8000b3c:	6823      	ldr	r3, [r4, #0]
 8000b3e:	442b      	add	r3, r5
 8000b40:	6023      	str	r3, [r4, #0]
 8000b42:	f8d8 3000 	ldr.w	r3, [r8]
 8000b46:	685a      	ldr	r2, [r3, #4]
 8000b48:	bb62      	cbnz	r2, 8000ba4 <_malloc_r+0xdc>
 8000b4a:	f8c8 7000 	str.w	r7, [r8]
 8000b4e:	e00f      	b.n	8000b70 <_malloc_r+0xa8>
 8000b50:	6822      	ldr	r2, [r4, #0]
 8000b52:	1b52      	subs	r2, r2, r5
 8000b54:	d420      	bmi.n	8000b98 <_malloc_r+0xd0>
 8000b56:	2a0b      	cmp	r2, #11
 8000b58:	d917      	bls.n	8000b8a <_malloc_r+0xc2>
 8000b5a:	1961      	adds	r1, r4, r5
 8000b5c:	42a3      	cmp	r3, r4
 8000b5e:	6025      	str	r5, [r4, #0]
 8000b60:	bf18      	it	ne
 8000b62:	6059      	strne	r1, [r3, #4]
 8000b64:	6863      	ldr	r3, [r4, #4]
 8000b66:	bf08      	it	eq
 8000b68:	f8c8 1000 	streq.w	r1, [r8]
 8000b6c:	5162      	str	r2, [r4, r5]
 8000b6e:	604b      	str	r3, [r1, #4]
 8000b70:	4630      	mov	r0, r6
 8000b72:	f000 f82f 	bl	8000bd4 <__malloc_unlock>
 8000b76:	f104 000b 	add.w	r0, r4, #11
 8000b7a:	1d23      	adds	r3, r4, #4
 8000b7c:	f020 0007 	bic.w	r0, r0, #7
 8000b80:	1ac2      	subs	r2, r0, r3
 8000b82:	bf1c      	itt	ne
 8000b84:	1a1b      	subne	r3, r3, r0
 8000b86:	50a3      	strne	r3, [r4, r2]
 8000b88:	e7af      	b.n	8000aea <_malloc_r+0x22>
 8000b8a:	6862      	ldr	r2, [r4, #4]
 8000b8c:	42a3      	cmp	r3, r4
 8000b8e:	bf0c      	ite	eq
 8000b90:	f8c8 2000 	streq.w	r2, [r8]
 8000b94:	605a      	strne	r2, [r3, #4]
 8000b96:	e7eb      	b.n	8000b70 <_malloc_r+0xa8>
 8000b98:	4623      	mov	r3, r4
 8000b9a:	6864      	ldr	r4, [r4, #4]
 8000b9c:	e7ae      	b.n	8000afc <_malloc_r+0x34>
 8000b9e:	463c      	mov	r4, r7
 8000ba0:	687f      	ldr	r7, [r7, #4]
 8000ba2:	e7b6      	b.n	8000b12 <_malloc_r+0x4a>
 8000ba4:	461a      	mov	r2, r3
 8000ba6:	685b      	ldr	r3, [r3, #4]
 8000ba8:	42a3      	cmp	r3, r4
 8000baa:	d1fb      	bne.n	8000ba4 <_malloc_r+0xdc>
 8000bac:	2300      	movs	r3, #0
 8000bae:	6053      	str	r3, [r2, #4]
 8000bb0:	e7de      	b.n	8000b70 <_malloc_r+0xa8>
 8000bb2:	230c      	movs	r3, #12
 8000bb4:	6033      	str	r3, [r6, #0]
 8000bb6:	4630      	mov	r0, r6
 8000bb8:	f000 f80c 	bl	8000bd4 <__malloc_unlock>
 8000bbc:	e794      	b.n	8000ae8 <_malloc_r+0x20>
 8000bbe:	6005      	str	r5, [r0, #0]
 8000bc0:	e7d6      	b.n	8000b70 <_malloc_r+0xa8>
 8000bc2:	bf00      	nop
 8000bc4:	200001b8 	.word	0x200001b8

08000bc8 <__malloc_lock>:
 8000bc8:	4801      	ldr	r0, [pc, #4]	@ (8000bd0 <__malloc_lock+0x8>)
 8000bca:	f7ff bf0f 	b.w	80009ec <__retarget_lock_acquire_recursive>
 8000bce:	bf00      	nop
 8000bd0:	200001b0 	.word	0x200001b0

08000bd4 <__malloc_unlock>:
 8000bd4:	4801      	ldr	r0, [pc, #4]	@ (8000bdc <__malloc_unlock+0x8>)
 8000bd6:	f7ff bf0a 	b.w	80009ee <__retarget_lock_release_recursive>
 8000bda:	bf00      	nop
 8000bdc:	200001b0 	.word	0x200001b0

08000be0 <__ssputs_r>:
 8000be0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000be4:	688e      	ldr	r6, [r1, #8]
 8000be6:	461f      	mov	r7, r3
 8000be8:	42be      	cmp	r6, r7
 8000bea:	680b      	ldr	r3, [r1, #0]
 8000bec:	4682      	mov	sl, r0
 8000bee:	460c      	mov	r4, r1
 8000bf0:	4690      	mov	r8, r2
 8000bf2:	d82d      	bhi.n	8000c50 <__ssputs_r+0x70>
 8000bf4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8000bf8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8000bfc:	d026      	beq.n	8000c4c <__ssputs_r+0x6c>
 8000bfe:	6965      	ldr	r5, [r4, #20]
 8000c00:	6909      	ldr	r1, [r1, #16]
 8000c02:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8000c06:	eba3 0901 	sub.w	r9, r3, r1
 8000c0a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8000c0e:	1c7b      	adds	r3, r7, #1
 8000c10:	444b      	add	r3, r9
 8000c12:	106d      	asrs	r5, r5, #1
 8000c14:	429d      	cmp	r5, r3
 8000c16:	bf38      	it	cc
 8000c18:	461d      	movcc	r5, r3
 8000c1a:	0553      	lsls	r3, r2, #21
 8000c1c:	d527      	bpl.n	8000c6e <__ssputs_r+0x8e>
 8000c1e:	4629      	mov	r1, r5
 8000c20:	f7ff ff52 	bl	8000ac8 <_malloc_r>
 8000c24:	4606      	mov	r6, r0
 8000c26:	b360      	cbz	r0, 8000c82 <__ssputs_r+0xa2>
 8000c28:	6921      	ldr	r1, [r4, #16]
 8000c2a:	464a      	mov	r2, r9
 8000c2c:	f000 fae8 	bl	8001200 <memcpy>
 8000c30:	89a3      	ldrh	r3, [r4, #12]
 8000c32:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8000c36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c3a:	81a3      	strh	r3, [r4, #12]
 8000c3c:	6126      	str	r6, [r4, #16]
 8000c3e:	6165      	str	r5, [r4, #20]
 8000c40:	444e      	add	r6, r9
 8000c42:	eba5 0509 	sub.w	r5, r5, r9
 8000c46:	6026      	str	r6, [r4, #0]
 8000c48:	60a5      	str	r5, [r4, #8]
 8000c4a:	463e      	mov	r6, r7
 8000c4c:	42be      	cmp	r6, r7
 8000c4e:	d900      	bls.n	8000c52 <__ssputs_r+0x72>
 8000c50:	463e      	mov	r6, r7
 8000c52:	6820      	ldr	r0, [r4, #0]
 8000c54:	4632      	mov	r2, r6
 8000c56:	4641      	mov	r1, r8
 8000c58:	f000 faa8 	bl	80011ac <memmove>
 8000c5c:	68a3      	ldr	r3, [r4, #8]
 8000c5e:	1b9b      	subs	r3, r3, r6
 8000c60:	60a3      	str	r3, [r4, #8]
 8000c62:	6823      	ldr	r3, [r4, #0]
 8000c64:	4433      	add	r3, r6
 8000c66:	6023      	str	r3, [r4, #0]
 8000c68:	2000      	movs	r0, #0
 8000c6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6e:	462a      	mov	r2, r5
 8000c70:	f000 fad4 	bl	800121c <_realloc_r>
 8000c74:	4606      	mov	r6, r0
 8000c76:	2800      	cmp	r0, #0
 8000c78:	d1e0      	bne.n	8000c3c <__ssputs_r+0x5c>
 8000c7a:	6921      	ldr	r1, [r4, #16]
 8000c7c:	4650      	mov	r0, sl
 8000c7e:	f7ff feb7 	bl	80009f0 <_free_r>
 8000c82:	230c      	movs	r3, #12
 8000c84:	f8ca 3000 	str.w	r3, [sl]
 8000c88:	89a3      	ldrh	r3, [r4, #12]
 8000c8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c8e:	81a3      	strh	r3, [r4, #12]
 8000c90:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c94:	e7e9      	b.n	8000c6a <__ssputs_r+0x8a>
	...

08000c98 <_svfiprintf_r>:
 8000c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c9c:	4698      	mov	r8, r3
 8000c9e:	898b      	ldrh	r3, [r1, #12]
 8000ca0:	061b      	lsls	r3, r3, #24
 8000ca2:	b09d      	sub	sp, #116	@ 0x74
 8000ca4:	4607      	mov	r7, r0
 8000ca6:	460d      	mov	r5, r1
 8000ca8:	4614      	mov	r4, r2
 8000caa:	d510      	bpl.n	8000cce <_svfiprintf_r+0x36>
 8000cac:	690b      	ldr	r3, [r1, #16]
 8000cae:	b973      	cbnz	r3, 8000cce <_svfiprintf_r+0x36>
 8000cb0:	2140      	movs	r1, #64	@ 0x40
 8000cb2:	f7ff ff09 	bl	8000ac8 <_malloc_r>
 8000cb6:	6028      	str	r0, [r5, #0]
 8000cb8:	6128      	str	r0, [r5, #16]
 8000cba:	b930      	cbnz	r0, 8000cca <_svfiprintf_r+0x32>
 8000cbc:	230c      	movs	r3, #12
 8000cbe:	603b      	str	r3, [r7, #0]
 8000cc0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000cc4:	b01d      	add	sp, #116	@ 0x74
 8000cc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000cca:	2340      	movs	r3, #64	@ 0x40
 8000ccc:	616b      	str	r3, [r5, #20]
 8000cce:	2300      	movs	r3, #0
 8000cd0:	9309      	str	r3, [sp, #36]	@ 0x24
 8000cd2:	2320      	movs	r3, #32
 8000cd4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8000cd8:	f8cd 800c 	str.w	r8, [sp, #12]
 8000cdc:	2330      	movs	r3, #48	@ 0x30
 8000cde:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8000e7c <_svfiprintf_r+0x1e4>
 8000ce2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000ce6:	f04f 0901 	mov.w	r9, #1
 8000cea:	4623      	mov	r3, r4
 8000cec:	469a      	mov	sl, r3
 8000cee:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000cf2:	b10a      	cbz	r2, 8000cf8 <_svfiprintf_r+0x60>
 8000cf4:	2a25      	cmp	r2, #37	@ 0x25
 8000cf6:	d1f9      	bne.n	8000cec <_svfiprintf_r+0x54>
 8000cf8:	ebba 0b04 	subs.w	fp, sl, r4
 8000cfc:	d00b      	beq.n	8000d16 <_svfiprintf_r+0x7e>
 8000cfe:	465b      	mov	r3, fp
 8000d00:	4622      	mov	r2, r4
 8000d02:	4629      	mov	r1, r5
 8000d04:	4638      	mov	r0, r7
 8000d06:	f7ff ff6b 	bl	8000be0 <__ssputs_r>
 8000d0a:	3001      	adds	r0, #1
 8000d0c:	f000 80a7 	beq.w	8000e5e <_svfiprintf_r+0x1c6>
 8000d10:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000d12:	445a      	add	r2, fp
 8000d14:	9209      	str	r2, [sp, #36]	@ 0x24
 8000d16:	f89a 3000 	ldrb.w	r3, [sl]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	f000 809f 	beq.w	8000e5e <_svfiprintf_r+0x1c6>
 8000d20:	2300      	movs	r3, #0
 8000d22:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000d26:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000d2a:	f10a 0a01 	add.w	sl, sl, #1
 8000d2e:	9304      	str	r3, [sp, #16]
 8000d30:	9307      	str	r3, [sp, #28]
 8000d32:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8000d36:	931a      	str	r3, [sp, #104]	@ 0x68
 8000d38:	4654      	mov	r4, sl
 8000d3a:	2205      	movs	r2, #5
 8000d3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000d40:	484e      	ldr	r0, [pc, #312]	@ (8000e7c <_svfiprintf_r+0x1e4>)
 8000d42:	f7ff fa45 	bl	80001d0 <memchr>
 8000d46:	9a04      	ldr	r2, [sp, #16]
 8000d48:	b9d8      	cbnz	r0, 8000d82 <_svfiprintf_r+0xea>
 8000d4a:	06d0      	lsls	r0, r2, #27
 8000d4c:	bf44      	itt	mi
 8000d4e:	2320      	movmi	r3, #32
 8000d50:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000d54:	0711      	lsls	r1, r2, #28
 8000d56:	bf44      	itt	mi
 8000d58:	232b      	movmi	r3, #43	@ 0x2b
 8000d5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000d5e:	f89a 3000 	ldrb.w	r3, [sl]
 8000d62:	2b2a      	cmp	r3, #42	@ 0x2a
 8000d64:	d015      	beq.n	8000d92 <_svfiprintf_r+0xfa>
 8000d66:	9a07      	ldr	r2, [sp, #28]
 8000d68:	4654      	mov	r4, sl
 8000d6a:	2000      	movs	r0, #0
 8000d6c:	f04f 0c0a 	mov.w	ip, #10
 8000d70:	4621      	mov	r1, r4
 8000d72:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000d76:	3b30      	subs	r3, #48	@ 0x30
 8000d78:	2b09      	cmp	r3, #9
 8000d7a:	d94b      	bls.n	8000e14 <_svfiprintf_r+0x17c>
 8000d7c:	b1b0      	cbz	r0, 8000dac <_svfiprintf_r+0x114>
 8000d7e:	9207      	str	r2, [sp, #28]
 8000d80:	e014      	b.n	8000dac <_svfiprintf_r+0x114>
 8000d82:	eba0 0308 	sub.w	r3, r0, r8
 8000d86:	fa09 f303 	lsl.w	r3, r9, r3
 8000d8a:	4313      	orrs	r3, r2
 8000d8c:	9304      	str	r3, [sp, #16]
 8000d8e:	46a2      	mov	sl, r4
 8000d90:	e7d2      	b.n	8000d38 <_svfiprintf_r+0xa0>
 8000d92:	9b03      	ldr	r3, [sp, #12]
 8000d94:	1d19      	adds	r1, r3, #4
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	9103      	str	r1, [sp, #12]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	bfbb      	ittet	lt
 8000d9e:	425b      	neglt	r3, r3
 8000da0:	f042 0202 	orrlt.w	r2, r2, #2
 8000da4:	9307      	strge	r3, [sp, #28]
 8000da6:	9307      	strlt	r3, [sp, #28]
 8000da8:	bfb8      	it	lt
 8000daa:	9204      	strlt	r2, [sp, #16]
 8000dac:	7823      	ldrb	r3, [r4, #0]
 8000dae:	2b2e      	cmp	r3, #46	@ 0x2e
 8000db0:	d10a      	bne.n	8000dc8 <_svfiprintf_r+0x130>
 8000db2:	7863      	ldrb	r3, [r4, #1]
 8000db4:	2b2a      	cmp	r3, #42	@ 0x2a
 8000db6:	d132      	bne.n	8000e1e <_svfiprintf_r+0x186>
 8000db8:	9b03      	ldr	r3, [sp, #12]
 8000dba:	1d1a      	adds	r2, r3, #4
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	9203      	str	r2, [sp, #12]
 8000dc0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8000dc4:	3402      	adds	r4, #2
 8000dc6:	9305      	str	r3, [sp, #20]
 8000dc8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8000e8c <_svfiprintf_r+0x1f4>
 8000dcc:	7821      	ldrb	r1, [r4, #0]
 8000dce:	2203      	movs	r2, #3
 8000dd0:	4650      	mov	r0, sl
 8000dd2:	f7ff f9fd 	bl	80001d0 <memchr>
 8000dd6:	b138      	cbz	r0, 8000de8 <_svfiprintf_r+0x150>
 8000dd8:	9b04      	ldr	r3, [sp, #16]
 8000dda:	eba0 000a 	sub.w	r0, r0, sl
 8000dde:	2240      	movs	r2, #64	@ 0x40
 8000de0:	4082      	lsls	r2, r0
 8000de2:	4313      	orrs	r3, r2
 8000de4:	3401      	adds	r4, #1
 8000de6:	9304      	str	r3, [sp, #16]
 8000de8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000dec:	4824      	ldr	r0, [pc, #144]	@ (8000e80 <_svfiprintf_r+0x1e8>)
 8000dee:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8000df2:	2206      	movs	r2, #6
 8000df4:	f7ff f9ec 	bl	80001d0 <memchr>
 8000df8:	2800      	cmp	r0, #0
 8000dfa:	d036      	beq.n	8000e6a <_svfiprintf_r+0x1d2>
 8000dfc:	4b21      	ldr	r3, [pc, #132]	@ (8000e84 <_svfiprintf_r+0x1ec>)
 8000dfe:	bb1b      	cbnz	r3, 8000e48 <_svfiprintf_r+0x1b0>
 8000e00:	9b03      	ldr	r3, [sp, #12]
 8000e02:	3307      	adds	r3, #7
 8000e04:	f023 0307 	bic.w	r3, r3, #7
 8000e08:	3308      	adds	r3, #8
 8000e0a:	9303      	str	r3, [sp, #12]
 8000e0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000e0e:	4433      	add	r3, r6
 8000e10:	9309      	str	r3, [sp, #36]	@ 0x24
 8000e12:	e76a      	b.n	8000cea <_svfiprintf_r+0x52>
 8000e14:	fb0c 3202 	mla	r2, ip, r2, r3
 8000e18:	460c      	mov	r4, r1
 8000e1a:	2001      	movs	r0, #1
 8000e1c:	e7a8      	b.n	8000d70 <_svfiprintf_r+0xd8>
 8000e1e:	2300      	movs	r3, #0
 8000e20:	3401      	adds	r4, #1
 8000e22:	9305      	str	r3, [sp, #20]
 8000e24:	4619      	mov	r1, r3
 8000e26:	f04f 0c0a 	mov.w	ip, #10
 8000e2a:	4620      	mov	r0, r4
 8000e2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000e30:	3a30      	subs	r2, #48	@ 0x30
 8000e32:	2a09      	cmp	r2, #9
 8000e34:	d903      	bls.n	8000e3e <_svfiprintf_r+0x1a6>
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d0c6      	beq.n	8000dc8 <_svfiprintf_r+0x130>
 8000e3a:	9105      	str	r1, [sp, #20]
 8000e3c:	e7c4      	b.n	8000dc8 <_svfiprintf_r+0x130>
 8000e3e:	fb0c 2101 	mla	r1, ip, r1, r2
 8000e42:	4604      	mov	r4, r0
 8000e44:	2301      	movs	r3, #1
 8000e46:	e7f0      	b.n	8000e2a <_svfiprintf_r+0x192>
 8000e48:	ab03      	add	r3, sp, #12
 8000e4a:	9300      	str	r3, [sp, #0]
 8000e4c:	462a      	mov	r2, r5
 8000e4e:	4b0e      	ldr	r3, [pc, #56]	@ (8000e88 <_svfiprintf_r+0x1f0>)
 8000e50:	a904      	add	r1, sp, #16
 8000e52:	4638      	mov	r0, r7
 8000e54:	f3af 8000 	nop.w
 8000e58:	1c42      	adds	r2, r0, #1
 8000e5a:	4606      	mov	r6, r0
 8000e5c:	d1d6      	bne.n	8000e0c <_svfiprintf_r+0x174>
 8000e5e:	89ab      	ldrh	r3, [r5, #12]
 8000e60:	065b      	lsls	r3, r3, #25
 8000e62:	f53f af2d 	bmi.w	8000cc0 <_svfiprintf_r+0x28>
 8000e66:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000e68:	e72c      	b.n	8000cc4 <_svfiprintf_r+0x2c>
 8000e6a:	ab03      	add	r3, sp, #12
 8000e6c:	9300      	str	r3, [sp, #0]
 8000e6e:	462a      	mov	r2, r5
 8000e70:	4b05      	ldr	r3, [pc, #20]	@ (8000e88 <_svfiprintf_r+0x1f0>)
 8000e72:	a904      	add	r1, sp, #16
 8000e74:	4638      	mov	r0, r7
 8000e76:	f000 f879 	bl	8000f6c <_printf_i>
 8000e7a:	e7ed      	b.n	8000e58 <_svfiprintf_r+0x1c0>
 8000e7c:	080012d7 	.word	0x080012d7
 8000e80:	080012e1 	.word	0x080012e1
 8000e84:	00000000 	.word	0x00000000
 8000e88:	08000be1 	.word	0x08000be1
 8000e8c:	080012dd 	.word	0x080012dd

08000e90 <_printf_common>:
 8000e90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e94:	4616      	mov	r6, r2
 8000e96:	4698      	mov	r8, r3
 8000e98:	688a      	ldr	r2, [r1, #8]
 8000e9a:	690b      	ldr	r3, [r1, #16]
 8000e9c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	bfb8      	it	lt
 8000ea4:	4613      	movlt	r3, r2
 8000ea6:	6033      	str	r3, [r6, #0]
 8000ea8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8000eac:	4607      	mov	r7, r0
 8000eae:	460c      	mov	r4, r1
 8000eb0:	b10a      	cbz	r2, 8000eb6 <_printf_common+0x26>
 8000eb2:	3301      	adds	r3, #1
 8000eb4:	6033      	str	r3, [r6, #0]
 8000eb6:	6823      	ldr	r3, [r4, #0]
 8000eb8:	0699      	lsls	r1, r3, #26
 8000eba:	bf42      	ittt	mi
 8000ebc:	6833      	ldrmi	r3, [r6, #0]
 8000ebe:	3302      	addmi	r3, #2
 8000ec0:	6033      	strmi	r3, [r6, #0]
 8000ec2:	6825      	ldr	r5, [r4, #0]
 8000ec4:	f015 0506 	ands.w	r5, r5, #6
 8000ec8:	d106      	bne.n	8000ed8 <_printf_common+0x48>
 8000eca:	f104 0a19 	add.w	sl, r4, #25
 8000ece:	68e3      	ldr	r3, [r4, #12]
 8000ed0:	6832      	ldr	r2, [r6, #0]
 8000ed2:	1a9b      	subs	r3, r3, r2
 8000ed4:	42ab      	cmp	r3, r5
 8000ed6:	dc26      	bgt.n	8000f26 <_printf_common+0x96>
 8000ed8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8000edc:	6822      	ldr	r2, [r4, #0]
 8000ede:	3b00      	subs	r3, #0
 8000ee0:	bf18      	it	ne
 8000ee2:	2301      	movne	r3, #1
 8000ee4:	0692      	lsls	r2, r2, #26
 8000ee6:	d42b      	bmi.n	8000f40 <_printf_common+0xb0>
 8000ee8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8000eec:	4641      	mov	r1, r8
 8000eee:	4638      	mov	r0, r7
 8000ef0:	47c8      	blx	r9
 8000ef2:	3001      	adds	r0, #1
 8000ef4:	d01e      	beq.n	8000f34 <_printf_common+0xa4>
 8000ef6:	6823      	ldr	r3, [r4, #0]
 8000ef8:	6922      	ldr	r2, [r4, #16]
 8000efa:	f003 0306 	and.w	r3, r3, #6
 8000efe:	2b04      	cmp	r3, #4
 8000f00:	bf02      	ittt	eq
 8000f02:	68e5      	ldreq	r5, [r4, #12]
 8000f04:	6833      	ldreq	r3, [r6, #0]
 8000f06:	1aed      	subeq	r5, r5, r3
 8000f08:	68a3      	ldr	r3, [r4, #8]
 8000f0a:	bf0c      	ite	eq
 8000f0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000f10:	2500      	movne	r5, #0
 8000f12:	4293      	cmp	r3, r2
 8000f14:	bfc4      	itt	gt
 8000f16:	1a9b      	subgt	r3, r3, r2
 8000f18:	18ed      	addgt	r5, r5, r3
 8000f1a:	2600      	movs	r6, #0
 8000f1c:	341a      	adds	r4, #26
 8000f1e:	42b5      	cmp	r5, r6
 8000f20:	d11a      	bne.n	8000f58 <_printf_common+0xc8>
 8000f22:	2000      	movs	r0, #0
 8000f24:	e008      	b.n	8000f38 <_printf_common+0xa8>
 8000f26:	2301      	movs	r3, #1
 8000f28:	4652      	mov	r2, sl
 8000f2a:	4641      	mov	r1, r8
 8000f2c:	4638      	mov	r0, r7
 8000f2e:	47c8      	blx	r9
 8000f30:	3001      	adds	r0, #1
 8000f32:	d103      	bne.n	8000f3c <_printf_common+0xac>
 8000f34:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000f38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3c:	3501      	adds	r5, #1
 8000f3e:	e7c6      	b.n	8000ece <_printf_common+0x3e>
 8000f40:	18e1      	adds	r1, r4, r3
 8000f42:	1c5a      	adds	r2, r3, #1
 8000f44:	2030      	movs	r0, #48	@ 0x30
 8000f46:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8000f4a:	4422      	add	r2, r4
 8000f4c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8000f50:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8000f54:	3302      	adds	r3, #2
 8000f56:	e7c7      	b.n	8000ee8 <_printf_common+0x58>
 8000f58:	2301      	movs	r3, #1
 8000f5a:	4622      	mov	r2, r4
 8000f5c:	4641      	mov	r1, r8
 8000f5e:	4638      	mov	r0, r7
 8000f60:	47c8      	blx	r9
 8000f62:	3001      	adds	r0, #1
 8000f64:	d0e6      	beq.n	8000f34 <_printf_common+0xa4>
 8000f66:	3601      	adds	r6, #1
 8000f68:	e7d9      	b.n	8000f1e <_printf_common+0x8e>
	...

08000f6c <_printf_i>:
 8000f6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000f70:	7e0f      	ldrb	r7, [r1, #24]
 8000f72:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8000f74:	2f78      	cmp	r7, #120	@ 0x78
 8000f76:	4691      	mov	r9, r2
 8000f78:	4680      	mov	r8, r0
 8000f7a:	460c      	mov	r4, r1
 8000f7c:	469a      	mov	sl, r3
 8000f7e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8000f82:	d807      	bhi.n	8000f94 <_printf_i+0x28>
 8000f84:	2f62      	cmp	r7, #98	@ 0x62
 8000f86:	d80a      	bhi.n	8000f9e <_printf_i+0x32>
 8000f88:	2f00      	cmp	r7, #0
 8000f8a:	f000 80d2 	beq.w	8001132 <_printf_i+0x1c6>
 8000f8e:	2f58      	cmp	r7, #88	@ 0x58
 8000f90:	f000 80b9 	beq.w	8001106 <_printf_i+0x19a>
 8000f94:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000f98:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8000f9c:	e03a      	b.n	8001014 <_printf_i+0xa8>
 8000f9e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8000fa2:	2b15      	cmp	r3, #21
 8000fa4:	d8f6      	bhi.n	8000f94 <_printf_i+0x28>
 8000fa6:	a101      	add	r1, pc, #4	@ (adr r1, 8000fac <_printf_i+0x40>)
 8000fa8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000fac:	08001005 	.word	0x08001005
 8000fb0:	08001019 	.word	0x08001019
 8000fb4:	08000f95 	.word	0x08000f95
 8000fb8:	08000f95 	.word	0x08000f95
 8000fbc:	08000f95 	.word	0x08000f95
 8000fc0:	08000f95 	.word	0x08000f95
 8000fc4:	08001019 	.word	0x08001019
 8000fc8:	08000f95 	.word	0x08000f95
 8000fcc:	08000f95 	.word	0x08000f95
 8000fd0:	08000f95 	.word	0x08000f95
 8000fd4:	08000f95 	.word	0x08000f95
 8000fd8:	08001119 	.word	0x08001119
 8000fdc:	08001043 	.word	0x08001043
 8000fe0:	080010d3 	.word	0x080010d3
 8000fe4:	08000f95 	.word	0x08000f95
 8000fe8:	08000f95 	.word	0x08000f95
 8000fec:	0800113b 	.word	0x0800113b
 8000ff0:	08000f95 	.word	0x08000f95
 8000ff4:	08001043 	.word	0x08001043
 8000ff8:	08000f95 	.word	0x08000f95
 8000ffc:	08000f95 	.word	0x08000f95
 8001000:	080010db 	.word	0x080010db
 8001004:	6833      	ldr	r3, [r6, #0]
 8001006:	1d1a      	adds	r2, r3, #4
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	6032      	str	r2, [r6, #0]
 800100c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001010:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001014:	2301      	movs	r3, #1
 8001016:	e09d      	b.n	8001154 <_printf_i+0x1e8>
 8001018:	6833      	ldr	r3, [r6, #0]
 800101a:	6820      	ldr	r0, [r4, #0]
 800101c:	1d19      	adds	r1, r3, #4
 800101e:	6031      	str	r1, [r6, #0]
 8001020:	0606      	lsls	r6, r0, #24
 8001022:	d501      	bpl.n	8001028 <_printf_i+0xbc>
 8001024:	681d      	ldr	r5, [r3, #0]
 8001026:	e003      	b.n	8001030 <_printf_i+0xc4>
 8001028:	0645      	lsls	r5, r0, #25
 800102a:	d5fb      	bpl.n	8001024 <_printf_i+0xb8>
 800102c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001030:	2d00      	cmp	r5, #0
 8001032:	da03      	bge.n	800103c <_printf_i+0xd0>
 8001034:	232d      	movs	r3, #45	@ 0x2d
 8001036:	426d      	negs	r5, r5
 8001038:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800103c:	4859      	ldr	r0, [pc, #356]	@ (80011a4 <_printf_i+0x238>)
 800103e:	230a      	movs	r3, #10
 8001040:	e011      	b.n	8001066 <_printf_i+0xfa>
 8001042:	6821      	ldr	r1, [r4, #0]
 8001044:	6833      	ldr	r3, [r6, #0]
 8001046:	0608      	lsls	r0, r1, #24
 8001048:	f853 5b04 	ldr.w	r5, [r3], #4
 800104c:	d402      	bmi.n	8001054 <_printf_i+0xe8>
 800104e:	0649      	lsls	r1, r1, #25
 8001050:	bf48      	it	mi
 8001052:	b2ad      	uxthmi	r5, r5
 8001054:	2f6f      	cmp	r7, #111	@ 0x6f
 8001056:	4853      	ldr	r0, [pc, #332]	@ (80011a4 <_printf_i+0x238>)
 8001058:	6033      	str	r3, [r6, #0]
 800105a:	bf14      	ite	ne
 800105c:	230a      	movne	r3, #10
 800105e:	2308      	moveq	r3, #8
 8001060:	2100      	movs	r1, #0
 8001062:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8001066:	6866      	ldr	r6, [r4, #4]
 8001068:	60a6      	str	r6, [r4, #8]
 800106a:	2e00      	cmp	r6, #0
 800106c:	bfa2      	ittt	ge
 800106e:	6821      	ldrge	r1, [r4, #0]
 8001070:	f021 0104 	bicge.w	r1, r1, #4
 8001074:	6021      	strge	r1, [r4, #0]
 8001076:	b90d      	cbnz	r5, 800107c <_printf_i+0x110>
 8001078:	2e00      	cmp	r6, #0
 800107a:	d04b      	beq.n	8001114 <_printf_i+0x1a8>
 800107c:	4616      	mov	r6, r2
 800107e:	fbb5 f1f3 	udiv	r1, r5, r3
 8001082:	fb03 5711 	mls	r7, r3, r1, r5
 8001086:	5dc7      	ldrb	r7, [r0, r7]
 8001088:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800108c:	462f      	mov	r7, r5
 800108e:	42bb      	cmp	r3, r7
 8001090:	460d      	mov	r5, r1
 8001092:	d9f4      	bls.n	800107e <_printf_i+0x112>
 8001094:	2b08      	cmp	r3, #8
 8001096:	d10b      	bne.n	80010b0 <_printf_i+0x144>
 8001098:	6823      	ldr	r3, [r4, #0]
 800109a:	07df      	lsls	r7, r3, #31
 800109c:	d508      	bpl.n	80010b0 <_printf_i+0x144>
 800109e:	6923      	ldr	r3, [r4, #16]
 80010a0:	6861      	ldr	r1, [r4, #4]
 80010a2:	4299      	cmp	r1, r3
 80010a4:	bfde      	ittt	le
 80010a6:	2330      	movle	r3, #48	@ 0x30
 80010a8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80010ac:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80010b0:	1b92      	subs	r2, r2, r6
 80010b2:	6122      	str	r2, [r4, #16]
 80010b4:	f8cd a000 	str.w	sl, [sp]
 80010b8:	464b      	mov	r3, r9
 80010ba:	aa03      	add	r2, sp, #12
 80010bc:	4621      	mov	r1, r4
 80010be:	4640      	mov	r0, r8
 80010c0:	f7ff fee6 	bl	8000e90 <_printf_common>
 80010c4:	3001      	adds	r0, #1
 80010c6:	d14a      	bne.n	800115e <_printf_i+0x1f2>
 80010c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80010cc:	b004      	add	sp, #16
 80010ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010d2:	6823      	ldr	r3, [r4, #0]
 80010d4:	f043 0320 	orr.w	r3, r3, #32
 80010d8:	6023      	str	r3, [r4, #0]
 80010da:	4833      	ldr	r0, [pc, #204]	@ (80011a8 <_printf_i+0x23c>)
 80010dc:	2778      	movs	r7, #120	@ 0x78
 80010de:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80010e2:	6823      	ldr	r3, [r4, #0]
 80010e4:	6831      	ldr	r1, [r6, #0]
 80010e6:	061f      	lsls	r7, r3, #24
 80010e8:	f851 5b04 	ldr.w	r5, [r1], #4
 80010ec:	d402      	bmi.n	80010f4 <_printf_i+0x188>
 80010ee:	065f      	lsls	r7, r3, #25
 80010f0:	bf48      	it	mi
 80010f2:	b2ad      	uxthmi	r5, r5
 80010f4:	6031      	str	r1, [r6, #0]
 80010f6:	07d9      	lsls	r1, r3, #31
 80010f8:	bf44      	itt	mi
 80010fa:	f043 0320 	orrmi.w	r3, r3, #32
 80010fe:	6023      	strmi	r3, [r4, #0]
 8001100:	b11d      	cbz	r5, 800110a <_printf_i+0x19e>
 8001102:	2310      	movs	r3, #16
 8001104:	e7ac      	b.n	8001060 <_printf_i+0xf4>
 8001106:	4827      	ldr	r0, [pc, #156]	@ (80011a4 <_printf_i+0x238>)
 8001108:	e7e9      	b.n	80010de <_printf_i+0x172>
 800110a:	6823      	ldr	r3, [r4, #0]
 800110c:	f023 0320 	bic.w	r3, r3, #32
 8001110:	6023      	str	r3, [r4, #0]
 8001112:	e7f6      	b.n	8001102 <_printf_i+0x196>
 8001114:	4616      	mov	r6, r2
 8001116:	e7bd      	b.n	8001094 <_printf_i+0x128>
 8001118:	6833      	ldr	r3, [r6, #0]
 800111a:	6825      	ldr	r5, [r4, #0]
 800111c:	6961      	ldr	r1, [r4, #20]
 800111e:	1d18      	adds	r0, r3, #4
 8001120:	6030      	str	r0, [r6, #0]
 8001122:	062e      	lsls	r6, r5, #24
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	d501      	bpl.n	800112c <_printf_i+0x1c0>
 8001128:	6019      	str	r1, [r3, #0]
 800112a:	e002      	b.n	8001132 <_printf_i+0x1c6>
 800112c:	0668      	lsls	r0, r5, #25
 800112e:	d5fb      	bpl.n	8001128 <_printf_i+0x1bc>
 8001130:	8019      	strh	r1, [r3, #0]
 8001132:	2300      	movs	r3, #0
 8001134:	6123      	str	r3, [r4, #16]
 8001136:	4616      	mov	r6, r2
 8001138:	e7bc      	b.n	80010b4 <_printf_i+0x148>
 800113a:	6833      	ldr	r3, [r6, #0]
 800113c:	1d1a      	adds	r2, r3, #4
 800113e:	6032      	str	r2, [r6, #0]
 8001140:	681e      	ldr	r6, [r3, #0]
 8001142:	6862      	ldr	r2, [r4, #4]
 8001144:	2100      	movs	r1, #0
 8001146:	4630      	mov	r0, r6
 8001148:	f7ff f842 	bl	80001d0 <memchr>
 800114c:	b108      	cbz	r0, 8001152 <_printf_i+0x1e6>
 800114e:	1b80      	subs	r0, r0, r6
 8001150:	6060      	str	r0, [r4, #4]
 8001152:	6863      	ldr	r3, [r4, #4]
 8001154:	6123      	str	r3, [r4, #16]
 8001156:	2300      	movs	r3, #0
 8001158:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800115c:	e7aa      	b.n	80010b4 <_printf_i+0x148>
 800115e:	6923      	ldr	r3, [r4, #16]
 8001160:	4632      	mov	r2, r6
 8001162:	4649      	mov	r1, r9
 8001164:	4640      	mov	r0, r8
 8001166:	47d0      	blx	sl
 8001168:	3001      	adds	r0, #1
 800116a:	d0ad      	beq.n	80010c8 <_printf_i+0x15c>
 800116c:	6823      	ldr	r3, [r4, #0]
 800116e:	079b      	lsls	r3, r3, #30
 8001170:	d413      	bmi.n	800119a <_printf_i+0x22e>
 8001172:	68e0      	ldr	r0, [r4, #12]
 8001174:	9b03      	ldr	r3, [sp, #12]
 8001176:	4298      	cmp	r0, r3
 8001178:	bfb8      	it	lt
 800117a:	4618      	movlt	r0, r3
 800117c:	e7a6      	b.n	80010cc <_printf_i+0x160>
 800117e:	2301      	movs	r3, #1
 8001180:	4632      	mov	r2, r6
 8001182:	4649      	mov	r1, r9
 8001184:	4640      	mov	r0, r8
 8001186:	47d0      	blx	sl
 8001188:	3001      	adds	r0, #1
 800118a:	d09d      	beq.n	80010c8 <_printf_i+0x15c>
 800118c:	3501      	adds	r5, #1
 800118e:	68e3      	ldr	r3, [r4, #12]
 8001190:	9903      	ldr	r1, [sp, #12]
 8001192:	1a5b      	subs	r3, r3, r1
 8001194:	42ab      	cmp	r3, r5
 8001196:	dcf2      	bgt.n	800117e <_printf_i+0x212>
 8001198:	e7eb      	b.n	8001172 <_printf_i+0x206>
 800119a:	2500      	movs	r5, #0
 800119c:	f104 0619 	add.w	r6, r4, #25
 80011a0:	e7f5      	b.n	800118e <_printf_i+0x222>
 80011a2:	bf00      	nop
 80011a4:	080012e8 	.word	0x080012e8
 80011a8:	080012f9 	.word	0x080012f9

080011ac <memmove>:
 80011ac:	4288      	cmp	r0, r1
 80011ae:	b510      	push	{r4, lr}
 80011b0:	eb01 0402 	add.w	r4, r1, r2
 80011b4:	d902      	bls.n	80011bc <memmove+0x10>
 80011b6:	4284      	cmp	r4, r0
 80011b8:	4623      	mov	r3, r4
 80011ba:	d807      	bhi.n	80011cc <memmove+0x20>
 80011bc:	1e43      	subs	r3, r0, #1
 80011be:	42a1      	cmp	r1, r4
 80011c0:	d008      	beq.n	80011d4 <memmove+0x28>
 80011c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80011c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80011ca:	e7f8      	b.n	80011be <memmove+0x12>
 80011cc:	4402      	add	r2, r0
 80011ce:	4601      	mov	r1, r0
 80011d0:	428a      	cmp	r2, r1
 80011d2:	d100      	bne.n	80011d6 <memmove+0x2a>
 80011d4:	bd10      	pop	{r4, pc}
 80011d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80011da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80011de:	e7f7      	b.n	80011d0 <memmove+0x24>

080011e0 <_sbrk_r>:
 80011e0:	b538      	push	{r3, r4, r5, lr}
 80011e2:	4d06      	ldr	r5, [pc, #24]	@ (80011fc <_sbrk_r+0x1c>)
 80011e4:	2300      	movs	r3, #0
 80011e6:	4604      	mov	r4, r0
 80011e8:	4608      	mov	r0, r1
 80011ea:	602b      	str	r3, [r5, #0]
 80011ec:	f7ff fa7c 	bl	80006e8 <_sbrk>
 80011f0:	1c43      	adds	r3, r0, #1
 80011f2:	d102      	bne.n	80011fa <_sbrk_r+0x1a>
 80011f4:	682b      	ldr	r3, [r5, #0]
 80011f6:	b103      	cbz	r3, 80011fa <_sbrk_r+0x1a>
 80011f8:	6023      	str	r3, [r4, #0]
 80011fa:	bd38      	pop	{r3, r4, r5, pc}
 80011fc:	200001ac 	.word	0x200001ac

08001200 <memcpy>:
 8001200:	440a      	add	r2, r1
 8001202:	4291      	cmp	r1, r2
 8001204:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8001208:	d100      	bne.n	800120c <memcpy+0xc>
 800120a:	4770      	bx	lr
 800120c:	b510      	push	{r4, lr}
 800120e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001212:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001216:	4291      	cmp	r1, r2
 8001218:	d1f9      	bne.n	800120e <memcpy+0xe>
 800121a:	bd10      	pop	{r4, pc}

0800121c <_realloc_r>:
 800121c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001220:	4680      	mov	r8, r0
 8001222:	4615      	mov	r5, r2
 8001224:	460c      	mov	r4, r1
 8001226:	b921      	cbnz	r1, 8001232 <_realloc_r+0x16>
 8001228:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800122c:	4611      	mov	r1, r2
 800122e:	f7ff bc4b 	b.w	8000ac8 <_malloc_r>
 8001232:	b92a      	cbnz	r2, 8001240 <_realloc_r+0x24>
 8001234:	f7ff fbdc 	bl	80009f0 <_free_r>
 8001238:	2400      	movs	r4, #0
 800123a:	4620      	mov	r0, r4
 800123c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001240:	f000 f81a 	bl	8001278 <_malloc_usable_size_r>
 8001244:	4285      	cmp	r5, r0
 8001246:	4606      	mov	r6, r0
 8001248:	d802      	bhi.n	8001250 <_realloc_r+0x34>
 800124a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800124e:	d8f4      	bhi.n	800123a <_realloc_r+0x1e>
 8001250:	4629      	mov	r1, r5
 8001252:	4640      	mov	r0, r8
 8001254:	f7ff fc38 	bl	8000ac8 <_malloc_r>
 8001258:	4607      	mov	r7, r0
 800125a:	2800      	cmp	r0, #0
 800125c:	d0ec      	beq.n	8001238 <_realloc_r+0x1c>
 800125e:	42b5      	cmp	r5, r6
 8001260:	462a      	mov	r2, r5
 8001262:	4621      	mov	r1, r4
 8001264:	bf28      	it	cs
 8001266:	4632      	movcs	r2, r6
 8001268:	f7ff ffca 	bl	8001200 <memcpy>
 800126c:	4621      	mov	r1, r4
 800126e:	4640      	mov	r0, r8
 8001270:	f7ff fbbe 	bl	80009f0 <_free_r>
 8001274:	463c      	mov	r4, r7
 8001276:	e7e0      	b.n	800123a <_realloc_r+0x1e>

08001278 <_malloc_usable_size_r>:
 8001278:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800127c:	1f18      	subs	r0, r3, #4
 800127e:	2b00      	cmp	r3, #0
 8001280:	bfbc      	itt	lt
 8001282:	580b      	ldrlt	r3, [r1, r0]
 8001284:	18c0      	addlt	r0, r0, r3
 8001286:	4770      	bx	lr

08001288 <_init>:
 8001288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800128a:	bf00      	nop
 800128c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800128e:	bc08      	pop	{r3}
 8001290:	469e      	mov	lr, r3
 8001292:	4770      	bx	lr

08001294 <_fini>:
 8001294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001296:	bf00      	nop
 8001298:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800129a:	bc08      	pop	{r3}
 800129c:	469e      	mov	lr, r3
 800129e:	4770      	bx	lr
