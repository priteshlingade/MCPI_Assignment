
led_menudriven.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000152c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a4  080016bc  080016bc  000026bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001860  08001860  00003054  2**0
                  CONTENTS
  4 .ARM          00000008  08001860  08001860  00002860  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001868  08001868  00003054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001868  08001868  00002868  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800186c  0800186c  0000286c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000054  20000000  08001870  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00003054  2**0
                  CONTENTS
 10 .bss          0000016c  20000054  20000054  00003054  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001c0  200001c0  00003054  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00003054  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001ba2  00000000  00000000  0000307e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000007e1  00000000  00000000  00004c20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000160  00000000  00000000  00005408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000ea  00000000  00000000  00005568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000146e  00000000  00000000  00005652  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000201a  00000000  00000000  00006ac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008c314  00000000  00000000  00008ada  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00094dee  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000a68  00000000  00000000  00094e34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 0000001f  00000000  00000000  0009589c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000081  00000000  00000000  000958bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000054 	.word	0x20000054
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080016a4 	.word	0x080016a4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000058 	.word	0x20000058
 80001cc:	080016a4 	.word	0x080016a4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <LedInit>:
 */

#include "led.h"
#include "stm32f4xx.h"

void LedInit(uint32_t pin) {
 8000280:	b480      	push	{r7}
 8000282:	b083      	sub	sp, #12
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
	// enable gpio clock (in AHB1ENR)
	RCC->AHB1ENR |= BV(LED_GPIO_EN);
 8000288:	4b28      	ldr	r3, [pc, #160]	@ (800032c <LedInit+0xac>)
 800028a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800028c:	4a27      	ldr	r2, [pc, #156]	@ (800032c <LedInit+0xac>)
 800028e:	f043 0308 	orr.w	r3, r3, #8
 8000292:	6313      	str	r3, [r2, #48]	@ 0x30
	// set gpio pin as output (in MODER)
	LED_GPIO->MODER &= ~BV(pin * 2 + 1);
 8000294:	4b26      	ldr	r3, [pc, #152]	@ (8000330 <LedInit+0xb0>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	687a      	ldr	r2, [r7, #4]
 800029a:	0052      	lsls	r2, r2, #1
 800029c:	3201      	adds	r2, #1
 800029e:	2101      	movs	r1, #1
 80002a0:	fa01 f202 	lsl.w	r2, r1, r2
 80002a4:	43d2      	mvns	r2, r2
 80002a6:	4611      	mov	r1, r2
 80002a8:	4a21      	ldr	r2, [pc, #132]	@ (8000330 <LedInit+0xb0>)
 80002aa:	400b      	ands	r3, r1
 80002ac:	6013      	str	r3, [r2, #0]
	LED_GPIO->MODER |= BV(pin * 2);
 80002ae:	4b20      	ldr	r3, [pc, #128]	@ (8000330 <LedInit+0xb0>)
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	687a      	ldr	r2, [r7, #4]
 80002b4:	0052      	lsls	r2, r2, #1
 80002b6:	2101      	movs	r1, #1
 80002b8:	fa01 f202 	lsl.w	r2, r1, r2
 80002bc:	4611      	mov	r1, r2
 80002be:	4a1c      	ldr	r2, [pc, #112]	@ (8000330 <LedInit+0xb0>)
 80002c0:	430b      	orrs	r3, r1
 80002c2:	6013      	str	r3, [r2, #0]
	// set gpio pin speed to low (in OSPEEDR)
	LED_GPIO->OSPEEDR &= ~(BV(pin * 2 + 1) | BV(pin * 2));
 80002c4:	4b1a      	ldr	r3, [pc, #104]	@ (8000330 <LedInit+0xb0>)
 80002c6:	689b      	ldr	r3, [r3, #8]
 80002c8:	687a      	ldr	r2, [r7, #4]
 80002ca:	0052      	lsls	r2, r2, #1
 80002cc:	3201      	adds	r2, #1
 80002ce:	2101      	movs	r1, #1
 80002d0:	4091      	lsls	r1, r2
 80002d2:	687a      	ldr	r2, [r7, #4]
 80002d4:	0052      	lsls	r2, r2, #1
 80002d6:	2001      	movs	r0, #1
 80002d8:	fa00 f202 	lsl.w	r2, r0, r2
 80002dc:	430a      	orrs	r2, r1
 80002de:	43d2      	mvns	r2, r2
 80002e0:	4611      	mov	r1, r2
 80002e2:	4a13      	ldr	r2, [pc, #76]	@ (8000330 <LedInit+0xb0>)
 80002e4:	400b      	ands	r3, r1
 80002e6:	6093      	str	r3, [r2, #8]
	// set gpio pin no pull up, no pull down (in PUPDR)
	LED_GPIO->PUPDR &= ~(BV(pin * 2 + 1) | BV(pin * 2));
 80002e8:	4b11      	ldr	r3, [pc, #68]	@ (8000330 <LedInit+0xb0>)
 80002ea:	68db      	ldr	r3, [r3, #12]
 80002ec:	687a      	ldr	r2, [r7, #4]
 80002ee:	0052      	lsls	r2, r2, #1
 80002f0:	3201      	adds	r2, #1
 80002f2:	2101      	movs	r1, #1
 80002f4:	4091      	lsls	r1, r2
 80002f6:	687a      	ldr	r2, [r7, #4]
 80002f8:	0052      	lsls	r2, r2, #1
 80002fa:	2001      	movs	r0, #1
 80002fc:	fa00 f202 	lsl.w	r2, r0, r2
 8000300:	430a      	orrs	r2, r1
 8000302:	43d2      	mvns	r2, r2
 8000304:	4611      	mov	r1, r2
 8000306:	4a0a      	ldr	r2, [pc, #40]	@ (8000330 <LedInit+0xb0>)
 8000308:	400b      	ands	r3, r1
 800030a:	60d3      	str	r3, [r2, #12]
	// set gpio pin type as push-pull (in OTYPER)
	LED_GPIO->OTYPER &= ~BV(pin);
 800030c:	4b08      	ldr	r3, [pc, #32]	@ (8000330 <LedInit+0xb0>)
 800030e:	685b      	ldr	r3, [r3, #4]
 8000310:	2101      	movs	r1, #1
 8000312:	687a      	ldr	r2, [r7, #4]
 8000314:	fa01 f202 	lsl.w	r2, r1, r2
 8000318:	43d2      	mvns	r2, r2
 800031a:	4611      	mov	r1, r2
 800031c:	4a04      	ldr	r2, [pc, #16]	@ (8000330 <LedInit+0xb0>)
 800031e:	400b      	ands	r3, r1
 8000320:	6053      	str	r3, [r2, #4]
}
 8000322:	bf00      	nop
 8000324:	370c      	adds	r7, #12
 8000326:	46bd      	mov	sp, r7
 8000328:	bc80      	pop	{r7}
 800032a:	4770      	bx	lr
 800032c:	40023800 	.word	0x40023800
 8000330:	40020c00 	.word	0x40020c00

08000334 <LedOn>:

void LedOn(uint32_t pin) {
 8000334:	b480      	push	{r7}
 8000336:	b083      	sub	sp, #12
 8000338:	af00      	add	r7, sp, #0
 800033a:	6078      	str	r0, [r7, #4]
	// set led pin (in ODR)
	LED_GPIO->ODR |= BV(pin);
 800033c:	4b07      	ldr	r3, [pc, #28]	@ (800035c <LedOn+0x28>)
 800033e:	695b      	ldr	r3, [r3, #20]
 8000340:	2101      	movs	r1, #1
 8000342:	687a      	ldr	r2, [r7, #4]
 8000344:	fa01 f202 	lsl.w	r2, r1, r2
 8000348:	4611      	mov	r1, r2
 800034a:	4a04      	ldr	r2, [pc, #16]	@ (800035c <LedOn+0x28>)
 800034c:	430b      	orrs	r3, r1
 800034e:	6153      	str	r3, [r2, #20]
}
 8000350:	bf00      	nop
 8000352:	370c      	adds	r7, #12
 8000354:	46bd      	mov	sp, r7
 8000356:	bc80      	pop	{r7}
 8000358:	4770      	bx	lr
 800035a:	bf00      	nop
 800035c:	40020c00 	.word	0x40020c00

08000360 <LedOff>:

void LedOff(uint32_t pin) {
 8000360:	b480      	push	{r7}
 8000362:	b083      	sub	sp, #12
 8000364:	af00      	add	r7, sp, #0
 8000366:	6078      	str	r0, [r7, #4]
	// clear led pin (in ODR)
	LED_GPIO->ODR &= ~BV(pin);
 8000368:	4b07      	ldr	r3, [pc, #28]	@ (8000388 <LedOff+0x28>)
 800036a:	695b      	ldr	r3, [r3, #20]
 800036c:	2101      	movs	r1, #1
 800036e:	687a      	ldr	r2, [r7, #4]
 8000370:	fa01 f202 	lsl.w	r2, r1, r2
 8000374:	43d2      	mvns	r2, r2
 8000376:	4611      	mov	r1, r2
 8000378:	4a03      	ldr	r2, [pc, #12]	@ (8000388 <LedOff+0x28>)
 800037a:	400b      	ands	r3, r1
 800037c:	6153      	str	r3, [r2, #20]
}
 800037e:	bf00      	nop
 8000380:	370c      	adds	r7, #12
 8000382:	46bd      	mov	sp, r7
 8000384:	bc80      	pop	{r7}
 8000386:	4770      	bx	lr
 8000388:	40020c00 	.word	0x40020c00

0800038c <DelayMs>:
uint32_t DWT_Init(void);

#ifndef DELAY_MS
#define DELAY_MS

static inline void DelayMs(volatile uint32_t ms) {
 800038c:	b480      	push	{r7}
 800038e:	b085      	sub	sp, #20
 8000390:	af00      	add	r7, sp, #0
 8000392:	6078      	str	r0, [r7, #4]
	uint32_t init_ticks = DWT->CYCCNT;
 8000394:	4b0e      	ldr	r3, [pc, #56]	@ (80003d0 <DelayMs+0x44>)
 8000396:	685b      	ldr	r3, [r3, #4]
 8000398:	60fb      	str	r3, [r7, #12]
	uint32_t ticks = (SystemCoreClock / 1000);
 800039a:	4b0e      	ldr	r3, [pc, #56]	@ (80003d4 <DelayMs+0x48>)
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	4a0e      	ldr	r2, [pc, #56]	@ (80003d8 <DelayMs+0x4c>)
 80003a0:	fba2 2303 	umull	r2, r3, r2, r3
 80003a4:	099b      	lsrs	r3, r3, #6
 80003a6:	60bb      	str	r3, [r7, #8]
	ms *= ticks;
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	68ba      	ldr	r2, [r7, #8]
 80003ac:	fb02 f303 	mul.w	r3, r2, r3
 80003b0:	607b      	str	r3, [r7, #4]
	while ((DWT->CYCCNT - init_ticks) < ms);
 80003b2:	bf00      	nop
 80003b4:	4b06      	ldr	r3, [pc, #24]	@ (80003d0 <DelayMs+0x44>)
 80003b6:	685a      	ldr	r2, [r3, #4]
 80003b8:	68fb      	ldr	r3, [r7, #12]
 80003ba:	1ad2      	subs	r2, r2, r3
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	429a      	cmp	r2, r3
 80003c0:	d3f8      	bcc.n	80003b4 <DelayMs+0x28>
}
 80003c2:	bf00      	nop
 80003c4:	bf00      	nop
 80003c6:	3714      	adds	r7, #20
 80003c8:	46bd      	mov	sp, r7
 80003ca:	bc80      	pop	{r7}
 80003cc:	4770      	bx	lr
 80003ce:	bf00      	nop
 80003d0:	e0001000 	.word	0xe0001000
 80003d4:	20000000 	.word	0x20000000
 80003d8:	10624dd3 	.word	0x10624dd3

080003dc <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	b08a      	sub	sp, #40	@ 0x28
 80003e0:	af00      	add	r7, sp, #0
	int c;
	char s[16];
	SystemInit();
 80003e2:	f000 fa05 	bl	80007f0 <SystemInit>
	LedInit(LED_RED);
 80003e6:	200e      	movs	r0, #14
 80003e8:	f7ff ff4a 	bl	8000280 <LedInit>
	LedInit(LED_ORANGE);
 80003ec:	200d      	movs	r0, #13
 80003ee:	f7ff ff47 	bl	8000280 <LedInit>
	LedInit(LED_GREEN);
 80003f2:	200c      	movs	r0, #12
 80003f4:	f7ff ff44 	bl	8000280 <LedInit>
	LedInit(LED_BLUE);
 80003f8:	200f      	movs	r0, #15
 80003fa:	f7ff ff41 	bl	8000280 <LedInit>
	UartInit(BAUD_9600);
 80003fe:	f44f 5016 	mov.w	r0, #9600	@ 0x2580
 8000402:	f000 fa2b 	bl	800085c <UartInit>
	SwitchInit(SWITCH);
 8000406:	2000      	movs	r0, #0
 8000408:	f000 f946 	bl	8000698 <SwitchInit>
	while(1)
	{

		UartPuts("\r1. Pattern 1\n");
 800040c:	488c      	ldr	r0, [pc, #560]	@ (8000640 <main+0x264>)
 800040e:	f000 fabf 	bl	8000990 <UartPuts>
		UartPuts("\r2. Pattern 2\n");
 8000412:	488c      	ldr	r0, [pc, #560]	@ (8000644 <main+0x268>)
 8000414:	f000 fabc 	bl	8000990 <UartPuts>
		UartPuts("\r3. Pattern 3\n");
 8000418:	488b      	ldr	r0, [pc, #556]	@ (8000648 <main+0x26c>)
 800041a:	f000 fab9 	bl	8000990 <UartPuts>
		UartPuts("\r4. Pattern 4\n");
 800041e:	488b      	ldr	r0, [pc, #556]	@ (800064c <main+0x270>)
 8000420:	f000 fab6 	bl	8000990 <UartPuts>
		UartPuts("\r   EXIT != 0\n");
 8000424:	488a      	ldr	r0, [pc, #552]	@ (8000650 <main+0x274>)
 8000426:	f000 fab3 	bl	8000990 <UartPuts>
		UartPuts("Choose Pattern:\n");
 800042a:	488a      	ldr	r0, [pc, #552]	@ (8000654 <main+0x278>)
 800042c:	f000 fab0 	bl	8000990 <UartPuts>

		UartGets(s);
 8000430:	1d3b      	adds	r3, r7, #4
 8000432:	4618      	mov	r0, r3
 8000434:	f000 fac8 	bl	80009c8 <UartGets>

		sscanf(s,"%d",&c);
 8000438:	f107 0214 	add.w	r2, r7, #20
 800043c:	1d3b      	adds	r3, r7, #4
 800043e:	4986      	ldr	r1, [pc, #536]	@ (8000658 <main+0x27c>)
 8000440:	4618      	mov	r0, r3
 8000442:	f000 fb11 	bl	8000a68 <siscanf>

		switch(c){
 8000446:	697b      	ldr	r3, [r7, #20]
 8000448:	3b01      	subs	r3, #1
 800044a:	2b03      	cmp	r3, #3
 800044c:	f200 80f2 	bhi.w	8000634 <main+0x258>
 8000450:	a201      	add	r2, pc, #4	@ (adr r2, 8000458 <main+0x7c>)
 8000452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000456:	bf00      	nop
 8000458:	08000469 	.word	0x08000469
 800045c:	080004f3 	.word	0x080004f3
 8000460:	0800057d 	.word	0x0800057d
 8000464:	080005d1 	.word	0x080005d1
			case 1:	for(int i=0;i<10;i++)
 8000468:	2300      	movs	r3, #0
 800046a:	627b      	str	r3, [r7, #36]	@ 0x24
 800046c:	e03d      	b.n	80004ea <main+0x10e>
					{
						LedOn(LED_GREEN);
 800046e:	200c      	movs	r0, #12
 8000470:	f7ff ff60 	bl	8000334 <LedOn>
						DelayMs(300);
 8000474:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000478:	f7ff ff88 	bl	800038c <DelayMs>
						LedOn(LED_ORANGE);
 800047c:	200d      	movs	r0, #13
 800047e:	f7ff ff59 	bl	8000334 <LedOn>
						DelayMs(300);
 8000482:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000486:	f7ff ff81 	bl	800038c <DelayMs>
						LedOn(LED_RED);
 800048a:	200e      	movs	r0, #14
 800048c:	f7ff ff52 	bl	8000334 <LedOn>
						DelayMs(300);
 8000490:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000494:	f7ff ff7a 	bl	800038c <DelayMs>
						LedOn(LED_BLUE);
 8000498:	200f      	movs	r0, #15
 800049a:	f7ff ff4b 	bl	8000334 <LedOn>
						DelayMs(300);
 800049e:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80004a2:	f7ff ff73 	bl	800038c <DelayMs>

						LedOff(LED_GREEN);
 80004a6:	200c      	movs	r0, #12
 80004a8:	f7ff ff5a 	bl	8000360 <LedOff>
						DelayMs(300);
 80004ac:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80004b0:	f7ff ff6c 	bl	800038c <DelayMs>
						LedOff(LED_ORANGE);
 80004b4:	200d      	movs	r0, #13
 80004b6:	f7ff ff53 	bl	8000360 <LedOff>
						DelayMs(300);
 80004ba:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80004be:	f7ff ff65 	bl	800038c <DelayMs>
						LedOff(LED_RED);
 80004c2:	200e      	movs	r0, #14
 80004c4:	f7ff ff4c 	bl	8000360 <LedOff>
						DelayMs(300);
 80004c8:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80004cc:	f7ff ff5e 	bl	800038c <DelayMs>
						LedOff(LED_BLUE);
 80004d0:	200f      	movs	r0, #15
 80004d2:	f7ff ff45 	bl	8000360 <LedOff>
						DelayMs(300);
 80004d6:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80004da:	f7ff ff57 	bl	800038c <DelayMs>
						i++;
 80004de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80004e0:	3301      	adds	r3, #1
 80004e2:	627b      	str	r3, [r7, #36]	@ 0x24
			case 1:	for(int i=0;i<10;i++)
 80004e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80004e6:	3301      	adds	r3, #1
 80004e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80004ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80004ec:	2b09      	cmp	r3, #9
 80004ee:	ddbe      	ble.n	800046e <main+0x92>
					}
			       break;
 80004f0:	e0a4      	b.n	800063c <main+0x260>

			case 2:	for(int i=0;i<10;i++)
 80004f2:	2300      	movs	r3, #0
 80004f4:	623b      	str	r3, [r7, #32]
 80004f6:	e03d      	b.n	8000574 <main+0x198>
					{
						LedOn(LED_GREEN);
 80004f8:	200c      	movs	r0, #12
 80004fa:	f7ff ff1b 	bl	8000334 <LedOn>
						DelayMs(300);
 80004fe:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000502:	f7ff ff43 	bl	800038c <DelayMs>
						LedOn(LED_RED);
 8000506:	200e      	movs	r0, #14
 8000508:	f7ff ff14 	bl	8000334 <LedOn>
						DelayMs(300);
 800050c:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000510:	f7ff ff3c 	bl	800038c <DelayMs>
						LedOn(LED_ORANGE);
 8000514:	200d      	movs	r0, #13
 8000516:	f7ff ff0d 	bl	8000334 <LedOn>
						DelayMs(300);
 800051a:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800051e:	f7ff ff35 	bl	800038c <DelayMs>
						LedOn(LED_BLUE);
 8000522:	200f      	movs	r0, #15
 8000524:	f7ff ff06 	bl	8000334 <LedOn>
						DelayMs(300);
 8000528:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800052c:	f7ff ff2e 	bl	800038c <DelayMs>

						LedOff(LED_GREEN);
 8000530:	200c      	movs	r0, #12
 8000532:	f7ff ff15 	bl	8000360 <LedOff>
						DelayMs(300);
 8000536:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800053a:	f7ff ff27 	bl	800038c <DelayMs>
						LedOff(LED_RED);
 800053e:	200e      	movs	r0, #14
 8000540:	f7ff ff0e 	bl	8000360 <LedOff>
						DelayMs(300);
 8000544:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000548:	f7ff ff20 	bl	800038c <DelayMs>
						LedOff(LED_ORANGE);
 800054c:	200d      	movs	r0, #13
 800054e:	f7ff ff07 	bl	8000360 <LedOff>
						DelayMs(300);
 8000552:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000556:	f7ff ff19 	bl	800038c <DelayMs>
						LedOff(LED_BLUE);
 800055a:	200f      	movs	r0, #15
 800055c:	f7ff ff00 	bl	8000360 <LedOff>
						DelayMs(300);
 8000560:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000564:	f7ff ff12 	bl	800038c <DelayMs>
				i++;
 8000568:	6a3b      	ldr	r3, [r7, #32]
 800056a:	3301      	adds	r3, #1
 800056c:	623b      	str	r3, [r7, #32]
			case 2:	for(int i=0;i<10;i++)
 800056e:	6a3b      	ldr	r3, [r7, #32]
 8000570:	3301      	adds	r3, #1
 8000572:	623b      	str	r3, [r7, #32]
 8000574:	6a3b      	ldr	r3, [r7, #32]
 8000576:	2b09      	cmp	r3, #9
 8000578:	ddbe      	ble.n	80004f8 <main+0x11c>
			}
					break;
 800057a:	e05f      	b.n	800063c <main+0x260>

			case 3:	for(int i=0;i<10;i++)
 800057c:	2300      	movs	r3, #0
 800057e:	61fb      	str	r3, [r7, #28]
 8000580:	e022      	b.n	80005c8 <main+0x1ec>
					{
						LedOn(LED_GREEN);
 8000582:	200c      	movs	r0, #12
 8000584:	f7ff fed6 	bl	8000334 <LedOn>
						LedOn(LED_RED);
 8000588:	200e      	movs	r0, #14
 800058a:	f7ff fed3 	bl	8000334 <LedOn>
						DelayMs(300);
 800058e:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000592:	f7ff fefb 	bl	800038c <DelayMs>

						LedOff(LED_RED);
 8000596:	200e      	movs	r0, #14
 8000598:	f7ff fee2 	bl	8000360 <LedOff>
						LedOff(LED_GREEN);
 800059c:	200c      	movs	r0, #12
 800059e:	f7ff fedf 	bl	8000360 <LedOff>

						LedOn(LED_ORANGE);
 80005a2:	200d      	movs	r0, #13
 80005a4:	f7ff fec6 	bl	8000334 <LedOn>
						LedOn(LED_BLUE);
 80005a8:	200f      	movs	r0, #15
 80005aa:	f7ff fec3 	bl	8000334 <LedOn>
						DelayMs(300);
 80005ae:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80005b2:	f7ff feeb 	bl	800038c <DelayMs>

						LedOff(LED_ORANGE);
 80005b6:	200d      	movs	r0, #13
 80005b8:	f7ff fed2 	bl	8000360 <LedOff>
						LedOff(LED_BLUE);
 80005bc:	200f      	movs	r0, #15
 80005be:	f7ff fecf 	bl	8000360 <LedOff>
			case 3:	for(int i=0;i<10;i++)
 80005c2:	69fb      	ldr	r3, [r7, #28]
 80005c4:	3301      	adds	r3, #1
 80005c6:	61fb      	str	r3, [r7, #28]
 80005c8:	69fb      	ldr	r3, [r7, #28]
 80005ca:	2b09      	cmp	r3, #9
 80005cc:	ddd9      	ble.n	8000582 <main+0x1a6>
					}
					break;
 80005ce:	e035      	b.n	800063c <main+0x260>

			case 4:
				for(int i=0;i<10;i++)
 80005d0:	2300      	movs	r3, #0
 80005d2:	61bb      	str	r3, [r7, #24]
 80005d4:	e027      	b.n	8000626 <main+0x24a>
					{
						LedOn(LED_GREEN);
 80005d6:	200c      	movs	r0, #12
 80005d8:	f7ff feac 	bl	8000334 <LedOn>
						DelayMs(300);
 80005dc:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80005e0:	f7ff fed4 	bl	800038c <DelayMs>
						LedOn(LED_ORANGE);
 80005e4:	200d      	movs	r0, #13
 80005e6:	f7ff fea5 	bl	8000334 <LedOn>
						DelayMs(300);
 80005ea:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80005ee:	f7ff fecd 	bl	800038c <DelayMs>

						LedOff(LED_GREEN);
 80005f2:	200c      	movs	r0, #12
 80005f4:	f7ff feb4 	bl	8000360 <LedOff>
						LedOn(LED_RED);
 80005f8:	200e      	movs	r0, #14
 80005fa:	f7ff fe9b 	bl	8000334 <LedOn>
						DelayMs(300);
 80005fe:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000602:	f7ff fec3 	bl	800038c <DelayMs>

						LedOff(LED_ORANGE);
 8000606:	200d      	movs	r0, #13
 8000608:	f7ff feaa 	bl	8000360 <LedOff>
						LedOn(LED_BLUE);
 800060c:	200f      	movs	r0, #15
 800060e:	f7ff fe91 	bl	8000334 <LedOn>
						DelayMs(300);
 8000612:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000616:	f7ff feb9 	bl	800038c <DelayMs>

						LedOff(LED_RED);
 800061a:	200e      	movs	r0, #14
 800061c:	f7ff fea0 	bl	8000360 <LedOff>
				for(int i=0;i<10;i++)
 8000620:	69bb      	ldr	r3, [r7, #24]
 8000622:	3301      	adds	r3, #1
 8000624:	61bb      	str	r3, [r7, #24]
 8000626:	69bb      	ldr	r3, [r7, #24]
 8000628:	2b09      	cmp	r3, #9
 800062a:	ddd4      	ble.n	80005d6 <main+0x1fa>


					}
						LedOff(LED_BLUE);
 800062c:	200f      	movs	r0, #15
 800062e:	f7ff fe97 	bl	8000360 <LedOff>
					break;
 8000632:	e003      	b.n	800063c <main+0x260>

			default :UartPuts("Invalid choice\n");
 8000634:	4809      	ldr	r0, [pc, #36]	@ (800065c <main+0x280>)
 8000636:	f000 f9ab 	bl	8000990 <UartPuts>
					break;
 800063a:	bf00      	nop
		UartPuts("\r1. Pattern 1\n");
 800063c:	e6e6      	b.n	800040c <main+0x30>
 800063e:	bf00      	nop
 8000640:	080016bc 	.word	0x080016bc
 8000644:	080016cc 	.word	0x080016cc
 8000648:	080016dc 	.word	0x080016dc
 800064c:	080016ec 	.word	0x080016ec
 8000650:	080016fc 	.word	0x080016fc
 8000654:	0800170c 	.word	0x0800170c
 8000658:	08001720 	.word	0x08001720
 800065c:	08001724 	.word	0x08001724

08000660 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000660:	b480      	push	{r7}
 8000662:	b083      	sub	sp, #12
 8000664:	af00      	add	r7, sp, #0
 8000666:	4603      	mov	r3, r0
 8000668:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800066a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800066e:	2b00      	cmp	r3, #0
 8000670:	db0b      	blt.n	800068a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000672:	79fb      	ldrb	r3, [r7, #7]
 8000674:	f003 021f 	and.w	r2, r3, #31
 8000678:	4906      	ldr	r1, [pc, #24]	@ (8000694 <__NVIC_EnableIRQ+0x34>)
 800067a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800067e:	095b      	lsrs	r3, r3, #5
 8000680:	2001      	movs	r0, #1
 8000682:	fa00 f202 	lsl.w	r2, r0, r2
 8000686:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800068a:	bf00      	nop
 800068c:	370c      	adds	r7, #12
 800068e:	46bd      	mov	sp, r7
 8000690:	bc80      	pop	{r7}
 8000692:	4770      	bx	lr
 8000694:	e000e100 	.word	0xe000e100

08000698 <SwitchInit>:
 *      Author: Yaash
 */

#include "switch.h"

void SwitchInit(uint32_t pin) {
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
	// enable gpio clock (in AHB1ENR)
	RCC->AHB1ENR |= BV(SWITCH_GPIO_EN);
 80006a0:	4b2a      	ldr	r3, [pc, #168]	@ (800074c <SwitchInit+0xb4>)
 80006a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006a4:	4a29      	ldr	r2, [pc, #164]	@ (800074c <SwitchInit+0xb4>)
 80006a6:	f043 0301 	orr.w	r3, r3, #1
 80006aa:	6313      	str	r3, [r2, #48]	@ 0x30
	// set gpio pin as input (in MODER)
	SWITCH_GPIO->MODER &= ~(BV(pin * 2 + 1) | BV(pin * 2));
 80006ac:	4b28      	ldr	r3, [pc, #160]	@ (8000750 <SwitchInit+0xb8>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	687a      	ldr	r2, [r7, #4]
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	3201      	adds	r2, #1
 80006b6:	2101      	movs	r1, #1
 80006b8:	4091      	lsls	r1, r2
 80006ba:	687a      	ldr	r2, [r7, #4]
 80006bc:	0052      	lsls	r2, r2, #1
 80006be:	2001      	movs	r0, #1
 80006c0:	fa00 f202 	lsl.w	r2, r0, r2
 80006c4:	430a      	orrs	r2, r1
 80006c6:	43d2      	mvns	r2, r2
 80006c8:	4611      	mov	r1, r2
 80006ca:	4a21      	ldr	r2, [pc, #132]	@ (8000750 <SwitchInit+0xb8>)
 80006cc:	400b      	ands	r3, r1
 80006ce:	6013      	str	r3, [r2, #0]
	// set gpio pin speed to low (in OSPEEDR)
	SWITCH_GPIO->OSPEEDR &= ~(BV(pin * 2 + 1) | BV(pin * 2));
 80006d0:	4b1f      	ldr	r3, [pc, #124]	@ (8000750 <SwitchInit+0xb8>)
 80006d2:	689b      	ldr	r3, [r3, #8]
 80006d4:	687a      	ldr	r2, [r7, #4]
 80006d6:	0052      	lsls	r2, r2, #1
 80006d8:	3201      	adds	r2, #1
 80006da:	2101      	movs	r1, #1
 80006dc:	4091      	lsls	r1, r2
 80006de:	687a      	ldr	r2, [r7, #4]
 80006e0:	0052      	lsls	r2, r2, #1
 80006e2:	2001      	movs	r0, #1
 80006e4:	fa00 f202 	lsl.w	r2, r0, r2
 80006e8:	430a      	orrs	r2, r1
 80006ea:	43d2      	mvns	r2, r2
 80006ec:	4611      	mov	r1, r2
 80006ee:	4a18      	ldr	r2, [pc, #96]	@ (8000750 <SwitchInit+0xb8>)
 80006f0:	400b      	ands	r3, r1
 80006f2:	6093      	str	r3, [r2, #8]
	// set gpio pin no pull up, no pull down (in PUPDR)
	SWITCH_GPIO->PUPDR &= ~(BV(pin * 2 + 1) | BV(pin * 2));
 80006f4:	4b16      	ldr	r3, [pc, #88]	@ (8000750 <SwitchInit+0xb8>)
 80006f6:	68db      	ldr	r3, [r3, #12]
 80006f8:	687a      	ldr	r2, [r7, #4]
 80006fa:	0052      	lsls	r2, r2, #1
 80006fc:	3201      	adds	r2, #1
 80006fe:	2101      	movs	r1, #1
 8000700:	4091      	lsls	r1, r2
 8000702:	687a      	ldr	r2, [r7, #4]
 8000704:	0052      	lsls	r2, r2, #1
 8000706:	2001      	movs	r0, #1
 8000708:	fa00 f202 	lsl.w	r2, r0, r2
 800070c:	430a      	orrs	r2, r1
 800070e:	43d2      	mvns	r2, r2
 8000710:	4611      	mov	r1, r2
 8000712:	4a0f      	ldr	r2, [pc, #60]	@ (8000750 <SwitchInit+0xb8>)
 8000714:	400b      	ands	r3, r1
 8000716:	60d3      	str	r3, [r2, #12]
	// enable falling edge detection (in FTSR)
	EXTI->FTSR |= BV(SWITCH);
 8000718:	4b0e      	ldr	r3, [pc, #56]	@ (8000754 <SwitchInit+0xbc>)
 800071a:	68db      	ldr	r3, [r3, #12]
 800071c:	4a0d      	ldr	r2, [pc, #52]	@ (8000754 <SwitchInit+0xbc>)
 800071e:	f043 0301 	orr.w	r3, r3, #1
 8000722:	60d3      	str	r3, [r2, #12]
	// enable (unmask) exti interrupt (in IMR)
	EXTI->IMR |= BV(SWITCH);
 8000724:	4b0b      	ldr	r3, [pc, #44]	@ (8000754 <SwitchInit+0xbc>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	4a0a      	ldr	r2, [pc, #40]	@ (8000754 <SwitchInit+0xbc>)
 800072a:	f043 0301 	orr.w	r3, r3, #1
 800072e:	6013      	str	r3, [r2, #0]
	// select exti interrupt (in SYSCFG->EXTICRx)
	SYSCFG->EXTICR[0] &= ~(BV(3) | BV(2) | BV(1) | BV(0));
 8000730:	4b09      	ldr	r3, [pc, #36]	@ (8000758 <SwitchInit+0xc0>)
 8000732:	689b      	ldr	r3, [r3, #8]
 8000734:	4a08      	ldr	r2, [pc, #32]	@ (8000758 <SwitchInit+0xc0>)
 8000736:	f023 030f 	bic.w	r3, r3, #15
 800073a:	6093      	str	r3, [r2, #8]
	// enable exti in NVIC (ISER or NVIC_EnableIRQ())
	//NVIC->ISER[0] |= BV(EXTI0_IRQn);
	NVIC_EnableIRQ(EXTI0_IRQn);
 800073c:	2006      	movs	r0, #6
 800073e:	f7ff ff8f 	bl	8000660 <__NVIC_EnableIRQ>
}
 8000742:	bf00      	nop
 8000744:	3708      	adds	r7, #8
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	40023800 	.word	0x40023800
 8000750:	40020000 	.word	0x40020000
 8000754:	40013c00 	.word	0x40013c00
 8000758:	40013800 	.word	0x40013800

0800075c <EXTI0_IRQHandler>:

// Global flag for interrupt
volatile int exti0_flag = 0;

// Switch EXTT0 IRQ Handler
void EXTI0_IRQHandler(void) {
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
    // Acknowledge interrupt (in PR)
	EXTI->PR |= BV(SWITCH);
 8000760:	4b06      	ldr	r3, [pc, #24]	@ (800077c <EXTI0_IRQHandler+0x20>)
 8000762:	695b      	ldr	r3, [r3, #20]
 8000764:	4a05      	ldr	r2, [pc, #20]	@ (800077c <EXTI0_IRQHandler+0x20>)
 8000766:	f043 0301 	orr.w	r3, r3, #1
 800076a:	6153      	str	r3, [r2, #20]
	// Handle interrupt
	exti0_flag = 1;
 800076c:	4b04      	ldr	r3, [pc, #16]	@ (8000780 <EXTI0_IRQHandler+0x24>)
 800076e:	2201      	movs	r2, #1
 8000770:	601a      	str	r2, [r3, #0]
}
 8000772:	bf00      	nop
 8000774:	46bd      	mov	sp, r7
 8000776:	bc80      	pop	{r7}
 8000778:	4770      	bx	lr
 800077a:	bf00      	nop
 800077c:	40013c00 	.word	0x40013c00
 8000780:	20000070 	.word	0x20000070

08000784 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b086      	sub	sp, #24
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800078c:	4a14      	ldr	r2, [pc, #80]	@ (80007e0 <_sbrk+0x5c>)
 800078e:	4b15      	ldr	r3, [pc, #84]	@ (80007e4 <_sbrk+0x60>)
 8000790:	1ad3      	subs	r3, r2, r3
 8000792:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000794:	697b      	ldr	r3, [r7, #20]
 8000796:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000798:	4b13      	ldr	r3, [pc, #76]	@ (80007e8 <_sbrk+0x64>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	2b00      	cmp	r3, #0
 800079e:	d102      	bne.n	80007a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007a0:	4b11      	ldr	r3, [pc, #68]	@ (80007e8 <_sbrk+0x64>)
 80007a2:	4a12      	ldr	r2, [pc, #72]	@ (80007ec <_sbrk+0x68>)
 80007a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007a6:	4b10      	ldr	r3, [pc, #64]	@ (80007e8 <_sbrk+0x64>)
 80007a8:	681a      	ldr	r2, [r3, #0]
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	4413      	add	r3, r2
 80007ae:	693a      	ldr	r2, [r7, #16]
 80007b0:	429a      	cmp	r2, r3
 80007b2:	d207      	bcs.n	80007c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007b4:	f000 f984 	bl	8000ac0 <__errno>
 80007b8:	4603      	mov	r3, r0
 80007ba:	220c      	movs	r2, #12
 80007bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80007be:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80007c2:	e009      	b.n	80007d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007c4:	4b08      	ldr	r3, [pc, #32]	@ (80007e8 <_sbrk+0x64>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007ca:	4b07      	ldr	r3, [pc, #28]	@ (80007e8 <_sbrk+0x64>)
 80007cc:	681a      	ldr	r2, [r3, #0]
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	4413      	add	r3, r2
 80007d2:	4a05      	ldr	r2, [pc, #20]	@ (80007e8 <_sbrk+0x64>)
 80007d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80007d6:	68fb      	ldr	r3, [r7, #12]
}
 80007d8:	4618      	mov	r0, r3
 80007da:	3718      	adds	r7, #24
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	20020000 	.word	0x20020000
 80007e4:	00000400 	.word	0x00000400
 80007e8:	20000074 	.word	0x20000074
 80007ec:	200001c0 	.word	0x200001c0

080007f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  DWT_Init();
 80007f4:	f000 f802 	bl	80007fc <DWT_Init>
}
 80007f8:	bf00      	nop
 80007fa:	bd80      	pop	{r7, pc}

080007fc <DWT_Init>:
}
#pragma GCC pop_options


uint32_t DWT_Init(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000800:	4b14      	ldr	r3, [pc, #80]	@ (8000854 <DWT_Init+0x58>)
 8000802:	68db      	ldr	r3, [r3, #12]
 8000804:	4a13      	ldr	r2, [pc, #76]	@ (8000854 <DWT_Init+0x58>)
 8000806:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800080a:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 800080c:	4b11      	ldr	r3, [pc, #68]	@ (8000854 <DWT_Init+0x58>)
 800080e:	68db      	ldr	r3, [r3, #12]
 8000810:	4a10      	ldr	r2, [pc, #64]	@ (8000854 <DWT_Init+0x58>)
 8000812:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000816:	60d3      	str	r3, [r2, #12]
    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000818:	4b0f      	ldr	r3, [pc, #60]	@ (8000858 <DWT_Init+0x5c>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	4a0e      	ldr	r2, [pc, #56]	@ (8000858 <DWT_Init+0x5c>)
 800081e:	f023 0301 	bic.w	r3, r3, #1
 8000822:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000824:	4b0c      	ldr	r3, [pc, #48]	@ (8000858 <DWT_Init+0x5c>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	4a0b      	ldr	r2, [pc, #44]	@ (8000858 <DWT_Init+0x5c>)
 800082a:	f043 0301 	orr.w	r3, r3, #1
 800082e:	6013      	str	r3, [r2, #0]
    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 8000830:	4b09      	ldr	r3, [pc, #36]	@ (8000858 <DWT_Init+0x5c>)
 8000832:	2200      	movs	r2, #0
 8000834:	605a      	str	r2, [r3, #4]
    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 8000836:	bf00      	nop
    __ASM volatile ("NOP");
 8000838:	bf00      	nop
    __ASM volatile ("NOP");
 800083a:	bf00      	nop
    /* Check if clock cycle counter has started: 0 on success */
    return !(DWT->CYCCNT);
 800083c:	4b06      	ldr	r3, [pc, #24]	@ (8000858 <DWT_Init+0x5c>)
 800083e:	685b      	ldr	r3, [r3, #4]
 8000840:	2b00      	cmp	r3, #0
 8000842:	bf0c      	ite	eq
 8000844:	2301      	moveq	r3, #1
 8000846:	2300      	movne	r3, #0
 8000848:	b2db      	uxtb	r3, r3
}
 800084a:	4618      	mov	r0, r3
 800084c:	46bd      	mov	sp, r7
 800084e:	bc80      	pop	{r7}
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	e000edf0 	.word	0xe000edf0
 8000858:	e0001000 	.word	0xe0001000

0800085c <UartInit>:

#define TX_PIN	2
#define RX_PIN	3
#define USART_ALT_FN	7

void UartInit(uint32_t baud) {
 800085c:	b480      	push	{r7}
 800085e:	b083      	sub	sp, #12
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
	// UART GPIO Init -- PA.2 (Tx) and PA.3 (Rx)
	// enable clock
	RCC->AHB1ENR |= BV(RCC_AHB1ENR_GPIOAEN_Pos);
 8000864:	4b31      	ldr	r3, [pc, #196]	@ (800092c <UartInit+0xd0>)
 8000866:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000868:	4a30      	ldr	r2, [pc, #192]	@ (800092c <UartInit+0xd0>)
 800086a:	f043 0301 	orr.w	r3, r3, #1
 800086e:	6313      	str	r3, [r2, #48]	@ 0x30
	//	alt fn = 0111 = 7 (Uart Tx and Rx)
	GPIOA->AFR[0] |= ((USART_ALT_FN << GPIO_AFRL_AFSEL3_Pos) | (USART_ALT_FN << GPIO_AFRL_AFSEL2_Pos));
 8000870:	4b2f      	ldr	r3, [pc, #188]	@ (8000930 <UartInit+0xd4>)
 8000872:	6a1b      	ldr	r3, [r3, #32]
 8000874:	4a2e      	ldr	r2, [pc, #184]	@ (8000930 <UartInit+0xd4>)
 8000876:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 800087a:	6213      	str	r3, [r2, #32]
	// 	mode=10 (alt fn), speed=00 (low), pupdr=00 (none), typer=0 (push-pull)
	GPIOA->MODER |= (BV(TX_PIN * 2 + 1) | BV(RX_PIN * 2 + 1));
 800087c:	4b2c      	ldr	r3, [pc, #176]	@ (8000930 <UartInit+0xd4>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4a2b      	ldr	r2, [pc, #172]	@ (8000930 <UartInit+0xd4>)
 8000882:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8000886:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(BV(TX_PIN * 2) | BV(RX_PIN * 2));
 8000888:	4b29      	ldr	r3, [pc, #164]	@ (8000930 <UartInit+0xd4>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	4a28      	ldr	r2, [pc, #160]	@ (8000930 <UartInit+0xd4>)
 800088e:	f023 0350 	bic.w	r3, r3, #80	@ 0x50
 8000892:	6013      	str	r3, [r2, #0]
	GPIOA->OSPEEDR &= ~(BV(TX_PIN * 2) | BV(TX_PIN * 2 + 1) | BV(RX_PIN * 2) | BV(RX_PIN * 2 + 1));
 8000894:	4b26      	ldr	r3, [pc, #152]	@ (8000930 <UartInit+0xd4>)
 8000896:	689b      	ldr	r3, [r3, #8]
 8000898:	4a25      	ldr	r2, [pc, #148]	@ (8000930 <UartInit+0xd4>)
 800089a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800089e:	6093      	str	r3, [r2, #8]
	GPIOA->PUPDR &= ~(BV(TX_PIN * 2) | BV(TX_PIN * 2 + 1) | BV(RX_PIN * 2) | BV(RX_PIN * 2 + 1));
 80008a0:	4b23      	ldr	r3, [pc, #140]	@ (8000930 <UartInit+0xd4>)
 80008a2:	68db      	ldr	r3, [r3, #12]
 80008a4:	4a22      	ldr	r2, [pc, #136]	@ (8000930 <UartInit+0xd4>)
 80008a6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80008aa:	60d3      	str	r3, [r2, #12]
	GPIOA->OTYPER &= ~(BV(TX_PIN) | BV(RX_PIN));
 80008ac:	4b20      	ldr	r3, [pc, #128]	@ (8000930 <UartInit+0xd4>)
 80008ae:	685b      	ldr	r3, [r3, #4]
 80008b0:	4a1f      	ldr	r2, [pc, #124]	@ (8000930 <UartInit+0xd4>)
 80008b2:	f023 030c 	bic.w	r3, r3, #12
 80008b6:	6053      	str	r3, [r2, #4]

	// UART Config
	// enable uart clock
	RCC->APB1ENR |= BV(RCC_APB1ENR_USART2EN_Pos);
 80008b8:	4b1c      	ldr	r3, [pc, #112]	@ (800092c <UartInit+0xd0>)
 80008ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008bc:	4a1b      	ldr	r2, [pc, #108]	@ (800092c <UartInit+0xd0>)
 80008be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008c2:	6413      	str	r3, [r2, #64]	@ 0x40
	// tx en (TE=1), rx en (RE=1), wordlen=8 (M=0), OVER8=0, disable parity (PCE=0)
	USART2->CR1 = BV(USART_CR1_TE_Pos) | BV(USART_CR1_RE_Pos);
 80008c4:	4b1b      	ldr	r3, [pc, #108]	@ (8000934 <UartInit+0xd8>)
 80008c6:	220c      	movs	r2, #12
 80008c8:	60da      	str	r2, [r3, #12]
	// 1 stop bit (STOP=00), disable clock (CLKEN=0)
	USART2->CR2 = 0x00000000;
 80008ca:	4b1a      	ldr	r3, [pc, #104]	@ (8000934 <UartInit+0xd8>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	611a      	str	r2, [r3, #16]
	// no hw control, no irda, no dma, no interupts
	USART2->CR3 = 0x00000000;
 80008d0:	4b18      	ldr	r3, [pc, #96]	@ (8000934 <UartInit+0xd8>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	615a      	str	r2, [r3, #20]
	// set BRR for given baud rate
	switch(baud) {
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	f5b3 3fe1 	cmp.w	r3, #115200	@ 0x1c200
 80008dc:	d016      	beq.n	800090c <UartInit+0xb0>
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	f5b3 3fe1 	cmp.w	r3, #115200	@ 0x1c200
 80008e4:	d816      	bhi.n	8000914 <UartInit+0xb8>
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	f5b3 5f16 	cmp.w	r3, #9600	@ 0x2580
 80008ec:	d004      	beq.n	80008f8 <UartInit+0x9c>
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	f5b3 4f16 	cmp.w	r3, #38400	@ 0x9600
 80008f4:	d005      	beq.n	8000902 <UartInit+0xa6>
 80008f6:	e00d      	b.n	8000914 <UartInit+0xb8>
		case BAUD_9600:
			USART2->BRR = BAUD_BRR_9600;
 80008f8:	4b0e      	ldr	r3, [pc, #56]	@ (8000934 <UartInit+0xd8>)
 80008fa:	f240 6283 	movw	r2, #1667	@ 0x683
 80008fe:	609a      	str	r2, [r3, #8]
			break;
 8000900:	e008      	b.n	8000914 <UartInit+0xb8>
		case BAUD_38400:
			USART2->BRR = BAUD_BRR_38400;
 8000902:	4b0c      	ldr	r3, [pc, #48]	@ (8000934 <UartInit+0xd8>)
 8000904:	f240 12a1 	movw	r2, #417	@ 0x1a1
 8000908:	609a      	str	r2, [r3, #8]
			break;
 800090a:	e003      	b.n	8000914 <UartInit+0xb8>
		case BAUD_115200:
			USART2->BRR = BAUD_BRR_115200;
 800090c:	4b09      	ldr	r3, [pc, #36]	@ (8000934 <UartInit+0xd8>)
 800090e:	228b      	movs	r2, #139	@ 0x8b
 8000910:	609a      	str	r2, [r3, #8]
			break;
 8000912:	bf00      	nop
	}
	// uart enable (UE=1)
	USART2->CR1 |= BV(USART_CR1_UE_Pos);
 8000914:	4b07      	ldr	r3, [pc, #28]	@ (8000934 <UartInit+0xd8>)
 8000916:	68db      	ldr	r3, [r3, #12]
 8000918:	4a06      	ldr	r2, [pc, #24]	@ (8000934 <UartInit+0xd8>)
 800091a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800091e:	60d3      	str	r3, [r2, #12]
}
 8000920:	bf00      	nop
 8000922:	370c      	adds	r7, #12
 8000924:	46bd      	mov	sp, r7
 8000926:	bc80      	pop	{r7}
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop
 800092c:	40023800 	.word	0x40023800
 8000930:	40020000 	.word	0x40020000
 8000934:	40004400 	.word	0x40004400

08000938 <UartPutch>:

void UartPutch(uint8_t ch) {
 8000938:	b480      	push	{r7}
 800093a:	b083      	sub	sp, #12
 800093c:	af00      	add	r7, sp, #0
 800093e:	4603      	mov	r3, r0
 8000940:	71fb      	strb	r3, [r7, #7]
	// wait until TDR is empty
	while((USART2->SR & BV(USART_SR_TXE_Pos)) == 0)
 8000942:	bf00      	nop
 8000944:	4b06      	ldr	r3, [pc, #24]	@ (8000960 <UartPutch+0x28>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800094c:	2b00      	cmp	r3, #0
 800094e:	d0f9      	beq.n	8000944 <UartPutch+0xc>
		;
	// write new byte in TDR
	USART2->DR = ch;
 8000950:	4a03      	ldr	r2, [pc, #12]	@ (8000960 <UartPutch+0x28>)
 8000952:	79fb      	ldrb	r3, [r7, #7]
 8000954:	6053      	str	r3, [r2, #4]
}
 8000956:	bf00      	nop
 8000958:	370c      	adds	r7, #12
 800095a:	46bd      	mov	sp, r7
 800095c:	bc80      	pop	{r7}
 800095e:	4770      	bx	lr
 8000960:	40004400 	.word	0x40004400

08000964 <UartGetch>:

uint8_t UartGetch(void) {
 8000964:	b480      	push	{r7}
 8000966:	b083      	sub	sp, #12
 8000968:	af00      	add	r7, sp, #0
	// wait until RDR is not empty (i.e. new byte received)
	while((USART2->SR & BV(USART_SR_RXNE_Pos)) == 0)
 800096a:	bf00      	nop
 800096c:	4b07      	ldr	r3, [pc, #28]	@ (800098c <UartGetch+0x28>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	f003 0320 	and.w	r3, r3, #32
 8000974:	2b00      	cmp	r3, #0
 8000976:	d0f9      	beq.n	800096c <UartGetch+0x8>
		;
	// read received byte from RDR
	char ch = USART2->DR;
 8000978:	4b04      	ldr	r3, [pc, #16]	@ (800098c <UartGetch+0x28>)
 800097a:	685b      	ldr	r3, [r3, #4]
 800097c:	71fb      	strb	r3, [r7, #7]
	return ch;
 800097e:	79fb      	ldrb	r3, [r7, #7]
}
 8000980:	4618      	mov	r0, r3
 8000982:	370c      	adds	r7, #12
 8000984:	46bd      	mov	sp, r7
 8000986:	bc80      	pop	{r7}
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop
 800098c:	40004400 	.word	0x40004400

08000990 <UartPuts>:

void UartPuts(char str[]) {
 8000990:	b580      	push	{r7, lr}
 8000992:	b084      	sub	sp, #16
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
	int i;
	for(i=0; str[i]!='\0'; i++)
 8000998:	2300      	movs	r3, #0
 800099a:	60fb      	str	r3, [r7, #12]
 800099c:	e009      	b.n	80009b2 <UartPuts+0x22>
		UartPutch(str[i]);
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	687a      	ldr	r2, [r7, #4]
 80009a2:	4413      	add	r3, r2
 80009a4:	781b      	ldrb	r3, [r3, #0]
 80009a6:	4618      	mov	r0, r3
 80009a8:	f7ff ffc6 	bl	8000938 <UartPutch>
	for(i=0; str[i]!='\0'; i++)
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	3301      	adds	r3, #1
 80009b0:	60fb      	str	r3, [r7, #12]
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	687a      	ldr	r2, [r7, #4]
 80009b6:	4413      	add	r3, r2
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d1ef      	bne.n	800099e <UartPuts+0xe>
}
 80009be:	bf00      	nop
 80009c0:	bf00      	nop
 80009c2:	3710      	adds	r7, #16
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}

080009c8 <UartGets>:

void UartGets(char str[]) {
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b084      	sub	sp, #16
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
	int i=0;
 80009d0:	2300      	movs	r3, #0
 80009d2:	60fb      	str	r3, [r7, #12]
	char ch;
	do {
		ch = UartGetch();
 80009d4:	f7ff ffc6 	bl	8000964 <UartGetch>
 80009d8:	4603      	mov	r3, r0
 80009da:	72fb      	strb	r3, [r7, #11]
		str[i] = ch;
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	687a      	ldr	r2, [r7, #4]
 80009e0:	4413      	add	r3, r2
 80009e2:	7afa      	ldrb	r2, [r7, #11]
 80009e4:	701a      	strb	r2, [r3, #0]
		i++;
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	3301      	adds	r3, #1
 80009ea:	60fb      	str	r3, [r7, #12]
	} while(ch != '\r');
 80009ec:	7afb      	ldrb	r3, [r7, #11]
 80009ee:	2b0d      	cmp	r3, #13
 80009f0:	d1f0      	bne.n	80009d4 <UartGets+0xc>
	str[i] = '\n';
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	687a      	ldr	r2, [r7, #4]
 80009f6:	4413      	add	r3, r2
 80009f8:	220a      	movs	r2, #10
 80009fa:	701a      	strb	r2, [r3, #0]
	i++;
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	3301      	adds	r3, #1
 8000a00:	60fb      	str	r3, [r7, #12]
	str[i] = '\0';
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	687a      	ldr	r2, [r7, #4]
 8000a06:	4413      	add	r3, r2
 8000a08:	2200      	movs	r2, #0
 8000a0a:	701a      	strb	r2, [r3, #0]
}
 8000a0c:	bf00      	nop
 8000a0e:	3710      	adds	r7, #16
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}

08000a14 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a14:	480d      	ldr	r0, [pc, #52]	@ (8000a4c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a16:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a18:	f7ff feea 	bl	80007f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a1c:	480c      	ldr	r0, [pc, #48]	@ (8000a50 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a1e:	490d      	ldr	r1, [pc, #52]	@ (8000a54 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a20:	4a0d      	ldr	r2, [pc, #52]	@ (8000a58 <LoopForever+0xe>)
  movs r3, #0
 8000a22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a24:	e002      	b.n	8000a2c <LoopCopyDataInit>

08000a26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a2a:	3304      	adds	r3, #4

08000a2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a30:	d3f9      	bcc.n	8000a26 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a32:	4a0a      	ldr	r2, [pc, #40]	@ (8000a5c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a34:	4c0a      	ldr	r4, [pc, #40]	@ (8000a60 <LoopForever+0x16>)
  movs r3, #0
 8000a36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a38:	e001      	b.n	8000a3e <LoopFillZerobss>

08000a3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a3c:	3204      	adds	r2, #4

08000a3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a40:	d3fb      	bcc.n	8000a3a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a42:	f000 f843 	bl	8000acc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a46:	f7ff fcc9 	bl	80003dc <main>

08000a4a <LoopForever>:

LoopForever:
  b LoopForever
 8000a4a:	e7fe      	b.n	8000a4a <LoopForever>
  ldr   r0, =_estack
 8000a4c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a54:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 8000a58:	08001870 	.word	0x08001870
  ldr r2, =_sbss
 8000a5c:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 8000a60:	200001c0 	.word	0x200001c0

08000a64 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a64:	e7fe      	b.n	8000a64 <ADC_IRQHandler>
	...

08000a68 <siscanf>:
 8000a68:	b40e      	push	{r1, r2, r3}
 8000a6a:	b530      	push	{r4, r5, lr}
 8000a6c:	b09c      	sub	sp, #112	@ 0x70
 8000a6e:	ac1f      	add	r4, sp, #124	@ 0x7c
 8000a70:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8000a74:	f854 5b04 	ldr.w	r5, [r4], #4
 8000a78:	f8ad 2014 	strh.w	r2, [sp, #20]
 8000a7c:	9002      	str	r0, [sp, #8]
 8000a7e:	9006      	str	r0, [sp, #24]
 8000a80:	f7ff fba6 	bl	80001d0 <strlen>
 8000a84:	4b0b      	ldr	r3, [pc, #44]	@ (8000ab4 <siscanf+0x4c>)
 8000a86:	9003      	str	r0, [sp, #12]
 8000a88:	9007      	str	r0, [sp, #28]
 8000a8a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8000a8c:	480a      	ldr	r0, [pc, #40]	@ (8000ab8 <siscanf+0x50>)
 8000a8e:	9401      	str	r4, [sp, #4]
 8000a90:	2300      	movs	r3, #0
 8000a92:	930f      	str	r3, [sp, #60]	@ 0x3c
 8000a94:	9314      	str	r3, [sp, #80]	@ 0x50
 8000a96:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000a9a:	f8ad 3016 	strh.w	r3, [sp, #22]
 8000a9e:	462a      	mov	r2, r5
 8000aa0:	4623      	mov	r3, r4
 8000aa2:	a902      	add	r1, sp, #8
 8000aa4:	6800      	ldr	r0, [r0, #0]
 8000aa6:	f000 f987 	bl	8000db8 <__ssvfiscanf_r>
 8000aaa:	b01c      	add	sp, #112	@ 0x70
 8000aac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000ab0:	b003      	add	sp, #12
 8000ab2:	4770      	bx	lr
 8000ab4:	08000abd 	.word	0x08000abd
 8000ab8:	20000004 	.word	0x20000004

08000abc <__seofread>:
 8000abc:	2000      	movs	r0, #0
 8000abe:	4770      	bx	lr

08000ac0 <__errno>:
 8000ac0:	4b01      	ldr	r3, [pc, #4]	@ (8000ac8 <__errno+0x8>)
 8000ac2:	6818      	ldr	r0, [r3, #0]
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop
 8000ac8:	20000004 	.word	0x20000004

08000acc <__libc_init_array>:
 8000acc:	b570      	push	{r4, r5, r6, lr}
 8000ace:	4d0d      	ldr	r5, [pc, #52]	@ (8000b04 <__libc_init_array+0x38>)
 8000ad0:	4c0d      	ldr	r4, [pc, #52]	@ (8000b08 <__libc_init_array+0x3c>)
 8000ad2:	1b64      	subs	r4, r4, r5
 8000ad4:	10a4      	asrs	r4, r4, #2
 8000ad6:	2600      	movs	r6, #0
 8000ad8:	42a6      	cmp	r6, r4
 8000ada:	d109      	bne.n	8000af0 <__libc_init_array+0x24>
 8000adc:	4d0b      	ldr	r5, [pc, #44]	@ (8000b0c <__libc_init_array+0x40>)
 8000ade:	4c0c      	ldr	r4, [pc, #48]	@ (8000b10 <__libc_init_array+0x44>)
 8000ae0:	f000 fde0 	bl	80016a4 <_init>
 8000ae4:	1b64      	subs	r4, r4, r5
 8000ae6:	10a4      	asrs	r4, r4, #2
 8000ae8:	2600      	movs	r6, #0
 8000aea:	42a6      	cmp	r6, r4
 8000aec:	d105      	bne.n	8000afa <__libc_init_array+0x2e>
 8000aee:	bd70      	pop	{r4, r5, r6, pc}
 8000af0:	f855 3b04 	ldr.w	r3, [r5], #4
 8000af4:	4798      	blx	r3
 8000af6:	3601      	adds	r6, #1
 8000af8:	e7ee      	b.n	8000ad8 <__libc_init_array+0xc>
 8000afa:	f855 3b04 	ldr.w	r3, [r5], #4
 8000afe:	4798      	blx	r3
 8000b00:	3601      	adds	r6, #1
 8000b02:	e7f2      	b.n	8000aea <__libc_init_array+0x1e>
 8000b04:	08001868 	.word	0x08001868
 8000b08:	08001868 	.word	0x08001868
 8000b0c:	08001868 	.word	0x08001868
 8000b10:	0800186c 	.word	0x0800186c

08000b14 <__retarget_lock_acquire_recursive>:
 8000b14:	4770      	bx	lr

08000b16 <__retarget_lock_release_recursive>:
 8000b16:	4770      	bx	lr

08000b18 <_free_r>:
 8000b18:	b538      	push	{r3, r4, r5, lr}
 8000b1a:	4605      	mov	r5, r0
 8000b1c:	2900      	cmp	r1, #0
 8000b1e:	d041      	beq.n	8000ba4 <_free_r+0x8c>
 8000b20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000b24:	1f0c      	subs	r4, r1, #4
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	bfb8      	it	lt
 8000b2a:	18e4      	addlt	r4, r4, r3
 8000b2c:	f000 f8e0 	bl	8000cf0 <__malloc_lock>
 8000b30:	4a1d      	ldr	r2, [pc, #116]	@ (8000ba8 <_free_r+0x90>)
 8000b32:	6813      	ldr	r3, [r2, #0]
 8000b34:	b933      	cbnz	r3, 8000b44 <_free_r+0x2c>
 8000b36:	6063      	str	r3, [r4, #4]
 8000b38:	6014      	str	r4, [r2, #0]
 8000b3a:	4628      	mov	r0, r5
 8000b3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b40:	f000 b8dc 	b.w	8000cfc <__malloc_unlock>
 8000b44:	42a3      	cmp	r3, r4
 8000b46:	d908      	bls.n	8000b5a <_free_r+0x42>
 8000b48:	6820      	ldr	r0, [r4, #0]
 8000b4a:	1821      	adds	r1, r4, r0
 8000b4c:	428b      	cmp	r3, r1
 8000b4e:	bf01      	itttt	eq
 8000b50:	6819      	ldreq	r1, [r3, #0]
 8000b52:	685b      	ldreq	r3, [r3, #4]
 8000b54:	1809      	addeq	r1, r1, r0
 8000b56:	6021      	streq	r1, [r4, #0]
 8000b58:	e7ed      	b.n	8000b36 <_free_r+0x1e>
 8000b5a:	461a      	mov	r2, r3
 8000b5c:	685b      	ldr	r3, [r3, #4]
 8000b5e:	b10b      	cbz	r3, 8000b64 <_free_r+0x4c>
 8000b60:	42a3      	cmp	r3, r4
 8000b62:	d9fa      	bls.n	8000b5a <_free_r+0x42>
 8000b64:	6811      	ldr	r1, [r2, #0]
 8000b66:	1850      	adds	r0, r2, r1
 8000b68:	42a0      	cmp	r0, r4
 8000b6a:	d10b      	bne.n	8000b84 <_free_r+0x6c>
 8000b6c:	6820      	ldr	r0, [r4, #0]
 8000b6e:	4401      	add	r1, r0
 8000b70:	1850      	adds	r0, r2, r1
 8000b72:	4283      	cmp	r3, r0
 8000b74:	6011      	str	r1, [r2, #0]
 8000b76:	d1e0      	bne.n	8000b3a <_free_r+0x22>
 8000b78:	6818      	ldr	r0, [r3, #0]
 8000b7a:	685b      	ldr	r3, [r3, #4]
 8000b7c:	6053      	str	r3, [r2, #4]
 8000b7e:	4408      	add	r0, r1
 8000b80:	6010      	str	r0, [r2, #0]
 8000b82:	e7da      	b.n	8000b3a <_free_r+0x22>
 8000b84:	d902      	bls.n	8000b8c <_free_r+0x74>
 8000b86:	230c      	movs	r3, #12
 8000b88:	602b      	str	r3, [r5, #0]
 8000b8a:	e7d6      	b.n	8000b3a <_free_r+0x22>
 8000b8c:	6820      	ldr	r0, [r4, #0]
 8000b8e:	1821      	adds	r1, r4, r0
 8000b90:	428b      	cmp	r3, r1
 8000b92:	bf04      	itt	eq
 8000b94:	6819      	ldreq	r1, [r3, #0]
 8000b96:	685b      	ldreq	r3, [r3, #4]
 8000b98:	6063      	str	r3, [r4, #4]
 8000b9a:	bf04      	itt	eq
 8000b9c:	1809      	addeq	r1, r1, r0
 8000b9e:	6021      	streq	r1, [r4, #0]
 8000ba0:	6054      	str	r4, [r2, #4]
 8000ba2:	e7ca      	b.n	8000b3a <_free_r+0x22>
 8000ba4:	bd38      	pop	{r3, r4, r5, pc}
 8000ba6:	bf00      	nop
 8000ba8:	200001bc 	.word	0x200001bc

08000bac <sbrk_aligned>:
 8000bac:	b570      	push	{r4, r5, r6, lr}
 8000bae:	4e0f      	ldr	r6, [pc, #60]	@ (8000bec <sbrk_aligned+0x40>)
 8000bb0:	460c      	mov	r4, r1
 8000bb2:	6831      	ldr	r1, [r6, #0]
 8000bb4:	4605      	mov	r5, r0
 8000bb6:	b911      	cbnz	r1, 8000bbe <sbrk_aligned+0x12>
 8000bb8:	f000 fc34 	bl	8001424 <_sbrk_r>
 8000bbc:	6030      	str	r0, [r6, #0]
 8000bbe:	4621      	mov	r1, r4
 8000bc0:	4628      	mov	r0, r5
 8000bc2:	f000 fc2f 	bl	8001424 <_sbrk_r>
 8000bc6:	1c43      	adds	r3, r0, #1
 8000bc8:	d103      	bne.n	8000bd2 <sbrk_aligned+0x26>
 8000bca:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8000bce:	4620      	mov	r0, r4
 8000bd0:	bd70      	pop	{r4, r5, r6, pc}
 8000bd2:	1cc4      	adds	r4, r0, #3
 8000bd4:	f024 0403 	bic.w	r4, r4, #3
 8000bd8:	42a0      	cmp	r0, r4
 8000bda:	d0f8      	beq.n	8000bce <sbrk_aligned+0x22>
 8000bdc:	1a21      	subs	r1, r4, r0
 8000bde:	4628      	mov	r0, r5
 8000be0:	f000 fc20 	bl	8001424 <_sbrk_r>
 8000be4:	3001      	adds	r0, #1
 8000be6:	d1f2      	bne.n	8000bce <sbrk_aligned+0x22>
 8000be8:	e7ef      	b.n	8000bca <sbrk_aligned+0x1e>
 8000bea:	bf00      	nop
 8000bec:	200001b8 	.word	0x200001b8

08000bf0 <_malloc_r>:
 8000bf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000bf4:	1ccd      	adds	r5, r1, #3
 8000bf6:	f025 0503 	bic.w	r5, r5, #3
 8000bfa:	3508      	adds	r5, #8
 8000bfc:	2d0c      	cmp	r5, #12
 8000bfe:	bf38      	it	cc
 8000c00:	250c      	movcc	r5, #12
 8000c02:	2d00      	cmp	r5, #0
 8000c04:	4606      	mov	r6, r0
 8000c06:	db01      	blt.n	8000c0c <_malloc_r+0x1c>
 8000c08:	42a9      	cmp	r1, r5
 8000c0a:	d904      	bls.n	8000c16 <_malloc_r+0x26>
 8000c0c:	230c      	movs	r3, #12
 8000c0e:	6033      	str	r3, [r6, #0]
 8000c10:	2000      	movs	r0, #0
 8000c12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000c16:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000cec <_malloc_r+0xfc>
 8000c1a:	f000 f869 	bl	8000cf0 <__malloc_lock>
 8000c1e:	f8d8 3000 	ldr.w	r3, [r8]
 8000c22:	461c      	mov	r4, r3
 8000c24:	bb44      	cbnz	r4, 8000c78 <_malloc_r+0x88>
 8000c26:	4629      	mov	r1, r5
 8000c28:	4630      	mov	r0, r6
 8000c2a:	f7ff ffbf 	bl	8000bac <sbrk_aligned>
 8000c2e:	1c43      	adds	r3, r0, #1
 8000c30:	4604      	mov	r4, r0
 8000c32:	d158      	bne.n	8000ce6 <_malloc_r+0xf6>
 8000c34:	f8d8 4000 	ldr.w	r4, [r8]
 8000c38:	4627      	mov	r7, r4
 8000c3a:	2f00      	cmp	r7, #0
 8000c3c:	d143      	bne.n	8000cc6 <_malloc_r+0xd6>
 8000c3e:	2c00      	cmp	r4, #0
 8000c40:	d04b      	beq.n	8000cda <_malloc_r+0xea>
 8000c42:	6823      	ldr	r3, [r4, #0]
 8000c44:	4639      	mov	r1, r7
 8000c46:	4630      	mov	r0, r6
 8000c48:	eb04 0903 	add.w	r9, r4, r3
 8000c4c:	f000 fbea 	bl	8001424 <_sbrk_r>
 8000c50:	4581      	cmp	r9, r0
 8000c52:	d142      	bne.n	8000cda <_malloc_r+0xea>
 8000c54:	6821      	ldr	r1, [r4, #0]
 8000c56:	1a6d      	subs	r5, r5, r1
 8000c58:	4629      	mov	r1, r5
 8000c5a:	4630      	mov	r0, r6
 8000c5c:	f7ff ffa6 	bl	8000bac <sbrk_aligned>
 8000c60:	3001      	adds	r0, #1
 8000c62:	d03a      	beq.n	8000cda <_malloc_r+0xea>
 8000c64:	6823      	ldr	r3, [r4, #0]
 8000c66:	442b      	add	r3, r5
 8000c68:	6023      	str	r3, [r4, #0]
 8000c6a:	f8d8 3000 	ldr.w	r3, [r8]
 8000c6e:	685a      	ldr	r2, [r3, #4]
 8000c70:	bb62      	cbnz	r2, 8000ccc <_malloc_r+0xdc>
 8000c72:	f8c8 7000 	str.w	r7, [r8]
 8000c76:	e00f      	b.n	8000c98 <_malloc_r+0xa8>
 8000c78:	6822      	ldr	r2, [r4, #0]
 8000c7a:	1b52      	subs	r2, r2, r5
 8000c7c:	d420      	bmi.n	8000cc0 <_malloc_r+0xd0>
 8000c7e:	2a0b      	cmp	r2, #11
 8000c80:	d917      	bls.n	8000cb2 <_malloc_r+0xc2>
 8000c82:	1961      	adds	r1, r4, r5
 8000c84:	42a3      	cmp	r3, r4
 8000c86:	6025      	str	r5, [r4, #0]
 8000c88:	bf18      	it	ne
 8000c8a:	6059      	strne	r1, [r3, #4]
 8000c8c:	6863      	ldr	r3, [r4, #4]
 8000c8e:	bf08      	it	eq
 8000c90:	f8c8 1000 	streq.w	r1, [r8]
 8000c94:	5162      	str	r2, [r4, r5]
 8000c96:	604b      	str	r3, [r1, #4]
 8000c98:	4630      	mov	r0, r6
 8000c9a:	f000 f82f 	bl	8000cfc <__malloc_unlock>
 8000c9e:	f104 000b 	add.w	r0, r4, #11
 8000ca2:	1d23      	adds	r3, r4, #4
 8000ca4:	f020 0007 	bic.w	r0, r0, #7
 8000ca8:	1ac2      	subs	r2, r0, r3
 8000caa:	bf1c      	itt	ne
 8000cac:	1a1b      	subne	r3, r3, r0
 8000cae:	50a3      	strne	r3, [r4, r2]
 8000cb0:	e7af      	b.n	8000c12 <_malloc_r+0x22>
 8000cb2:	6862      	ldr	r2, [r4, #4]
 8000cb4:	42a3      	cmp	r3, r4
 8000cb6:	bf0c      	ite	eq
 8000cb8:	f8c8 2000 	streq.w	r2, [r8]
 8000cbc:	605a      	strne	r2, [r3, #4]
 8000cbe:	e7eb      	b.n	8000c98 <_malloc_r+0xa8>
 8000cc0:	4623      	mov	r3, r4
 8000cc2:	6864      	ldr	r4, [r4, #4]
 8000cc4:	e7ae      	b.n	8000c24 <_malloc_r+0x34>
 8000cc6:	463c      	mov	r4, r7
 8000cc8:	687f      	ldr	r7, [r7, #4]
 8000cca:	e7b6      	b.n	8000c3a <_malloc_r+0x4a>
 8000ccc:	461a      	mov	r2, r3
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	42a3      	cmp	r3, r4
 8000cd2:	d1fb      	bne.n	8000ccc <_malloc_r+0xdc>
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	6053      	str	r3, [r2, #4]
 8000cd8:	e7de      	b.n	8000c98 <_malloc_r+0xa8>
 8000cda:	230c      	movs	r3, #12
 8000cdc:	6033      	str	r3, [r6, #0]
 8000cde:	4630      	mov	r0, r6
 8000ce0:	f000 f80c 	bl	8000cfc <__malloc_unlock>
 8000ce4:	e794      	b.n	8000c10 <_malloc_r+0x20>
 8000ce6:	6005      	str	r5, [r0, #0]
 8000ce8:	e7d6      	b.n	8000c98 <_malloc_r+0xa8>
 8000cea:	bf00      	nop
 8000cec:	200001bc 	.word	0x200001bc

08000cf0 <__malloc_lock>:
 8000cf0:	4801      	ldr	r0, [pc, #4]	@ (8000cf8 <__malloc_lock+0x8>)
 8000cf2:	f7ff bf0f 	b.w	8000b14 <__retarget_lock_acquire_recursive>
 8000cf6:	bf00      	nop
 8000cf8:	200001b4 	.word	0x200001b4

08000cfc <__malloc_unlock>:
 8000cfc:	4801      	ldr	r0, [pc, #4]	@ (8000d04 <__malloc_unlock+0x8>)
 8000cfe:	f7ff bf0a 	b.w	8000b16 <__retarget_lock_release_recursive>
 8000d02:	bf00      	nop
 8000d04:	200001b4 	.word	0x200001b4

08000d08 <_sungetc_r>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	1c4b      	adds	r3, r1, #1
 8000d0c:	4614      	mov	r4, r2
 8000d0e:	d103      	bne.n	8000d18 <_sungetc_r+0x10>
 8000d10:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8000d14:	4628      	mov	r0, r5
 8000d16:	bd38      	pop	{r3, r4, r5, pc}
 8000d18:	8993      	ldrh	r3, [r2, #12]
 8000d1a:	f023 0320 	bic.w	r3, r3, #32
 8000d1e:	8193      	strh	r3, [r2, #12]
 8000d20:	6853      	ldr	r3, [r2, #4]
 8000d22:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8000d24:	b2cd      	uxtb	r5, r1
 8000d26:	b18a      	cbz	r2, 8000d4c <_sungetc_r+0x44>
 8000d28:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8000d2a:	429a      	cmp	r2, r3
 8000d2c:	dd08      	ble.n	8000d40 <_sungetc_r+0x38>
 8000d2e:	6823      	ldr	r3, [r4, #0]
 8000d30:	1e5a      	subs	r2, r3, #1
 8000d32:	6022      	str	r2, [r4, #0]
 8000d34:	f803 5c01 	strb.w	r5, [r3, #-1]
 8000d38:	6863      	ldr	r3, [r4, #4]
 8000d3a:	3301      	adds	r3, #1
 8000d3c:	6063      	str	r3, [r4, #4]
 8000d3e:	e7e9      	b.n	8000d14 <_sungetc_r+0xc>
 8000d40:	4621      	mov	r1, r4
 8000d42:	f000 fb34 	bl	80013ae <__submore>
 8000d46:	2800      	cmp	r0, #0
 8000d48:	d0f1      	beq.n	8000d2e <_sungetc_r+0x26>
 8000d4a:	e7e1      	b.n	8000d10 <_sungetc_r+0x8>
 8000d4c:	6921      	ldr	r1, [r4, #16]
 8000d4e:	6822      	ldr	r2, [r4, #0]
 8000d50:	b141      	cbz	r1, 8000d64 <_sungetc_r+0x5c>
 8000d52:	4291      	cmp	r1, r2
 8000d54:	d206      	bcs.n	8000d64 <_sungetc_r+0x5c>
 8000d56:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8000d5a:	42a9      	cmp	r1, r5
 8000d5c:	d102      	bne.n	8000d64 <_sungetc_r+0x5c>
 8000d5e:	3a01      	subs	r2, #1
 8000d60:	6022      	str	r2, [r4, #0]
 8000d62:	e7ea      	b.n	8000d3a <_sungetc_r+0x32>
 8000d64:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8000d68:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000d6c:	6363      	str	r3, [r4, #52]	@ 0x34
 8000d6e:	2303      	movs	r3, #3
 8000d70:	63a3      	str	r3, [r4, #56]	@ 0x38
 8000d72:	4623      	mov	r3, r4
 8000d74:	f803 5f46 	strb.w	r5, [r3, #70]!
 8000d78:	6023      	str	r3, [r4, #0]
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	e7de      	b.n	8000d3c <_sungetc_r+0x34>

08000d7e <__ssrefill_r>:
 8000d7e:	b510      	push	{r4, lr}
 8000d80:	460c      	mov	r4, r1
 8000d82:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8000d84:	b169      	cbz	r1, 8000da2 <__ssrefill_r+0x24>
 8000d86:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000d8a:	4299      	cmp	r1, r3
 8000d8c:	d001      	beq.n	8000d92 <__ssrefill_r+0x14>
 8000d8e:	f7ff fec3 	bl	8000b18 <_free_r>
 8000d92:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000d94:	6063      	str	r3, [r4, #4]
 8000d96:	2000      	movs	r0, #0
 8000d98:	6360      	str	r0, [r4, #52]	@ 0x34
 8000d9a:	b113      	cbz	r3, 8000da2 <__ssrefill_r+0x24>
 8000d9c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8000d9e:	6023      	str	r3, [r4, #0]
 8000da0:	bd10      	pop	{r4, pc}
 8000da2:	6923      	ldr	r3, [r4, #16]
 8000da4:	6023      	str	r3, [r4, #0]
 8000da6:	2300      	movs	r3, #0
 8000da8:	6063      	str	r3, [r4, #4]
 8000daa:	89a3      	ldrh	r3, [r4, #12]
 8000dac:	f043 0320 	orr.w	r3, r3, #32
 8000db0:	81a3      	strh	r3, [r4, #12]
 8000db2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000db6:	e7f3      	b.n	8000da0 <__ssrefill_r+0x22>

08000db8 <__ssvfiscanf_r>:
 8000db8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000dbc:	460c      	mov	r4, r1
 8000dbe:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8000dc8:	49a5      	ldr	r1, [pc, #660]	@ (8001060 <__ssvfiscanf_r+0x2a8>)
 8000dca:	91a0      	str	r1, [sp, #640]	@ 0x280
 8000dcc:	f10d 0804 	add.w	r8, sp, #4
 8000dd0:	49a4      	ldr	r1, [pc, #656]	@ (8001064 <__ssvfiscanf_r+0x2ac>)
 8000dd2:	4fa5      	ldr	r7, [pc, #660]	@ (8001068 <__ssvfiscanf_r+0x2b0>)
 8000dd4:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8000dd8:	4606      	mov	r6, r0
 8000dda:	91a1      	str	r1, [sp, #644]	@ 0x284
 8000ddc:	9300      	str	r3, [sp, #0]
 8000dde:	7813      	ldrb	r3, [r2, #0]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	f000 8158 	beq.w	8001096 <__ssvfiscanf_r+0x2de>
 8000de6:	5cf9      	ldrb	r1, [r7, r3]
 8000de8:	f011 0108 	ands.w	r1, r1, #8
 8000dec:	f102 0501 	add.w	r5, r2, #1
 8000df0:	d019      	beq.n	8000e26 <__ssvfiscanf_r+0x6e>
 8000df2:	6863      	ldr	r3, [r4, #4]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	dd0f      	ble.n	8000e18 <__ssvfiscanf_r+0x60>
 8000df8:	6823      	ldr	r3, [r4, #0]
 8000dfa:	781a      	ldrb	r2, [r3, #0]
 8000dfc:	5cba      	ldrb	r2, [r7, r2]
 8000dfe:	0712      	lsls	r2, r2, #28
 8000e00:	d401      	bmi.n	8000e06 <__ssvfiscanf_r+0x4e>
 8000e02:	462a      	mov	r2, r5
 8000e04:	e7eb      	b.n	8000dde <__ssvfiscanf_r+0x26>
 8000e06:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8000e08:	3201      	adds	r2, #1
 8000e0a:	9245      	str	r2, [sp, #276]	@ 0x114
 8000e0c:	6862      	ldr	r2, [r4, #4]
 8000e0e:	3301      	adds	r3, #1
 8000e10:	3a01      	subs	r2, #1
 8000e12:	6062      	str	r2, [r4, #4]
 8000e14:	6023      	str	r3, [r4, #0]
 8000e16:	e7ec      	b.n	8000df2 <__ssvfiscanf_r+0x3a>
 8000e18:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8000e1a:	4621      	mov	r1, r4
 8000e1c:	4630      	mov	r0, r6
 8000e1e:	4798      	blx	r3
 8000e20:	2800      	cmp	r0, #0
 8000e22:	d0e9      	beq.n	8000df8 <__ssvfiscanf_r+0x40>
 8000e24:	e7ed      	b.n	8000e02 <__ssvfiscanf_r+0x4a>
 8000e26:	2b25      	cmp	r3, #37	@ 0x25
 8000e28:	d012      	beq.n	8000e50 <__ssvfiscanf_r+0x98>
 8000e2a:	4699      	mov	r9, r3
 8000e2c:	6863      	ldr	r3, [r4, #4]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	f340 8093 	ble.w	8000f5a <__ssvfiscanf_r+0x1a2>
 8000e34:	6822      	ldr	r2, [r4, #0]
 8000e36:	7813      	ldrb	r3, [r2, #0]
 8000e38:	454b      	cmp	r3, r9
 8000e3a:	f040 812c 	bne.w	8001096 <__ssvfiscanf_r+0x2de>
 8000e3e:	6863      	ldr	r3, [r4, #4]
 8000e40:	3b01      	subs	r3, #1
 8000e42:	6063      	str	r3, [r4, #4]
 8000e44:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8000e46:	3201      	adds	r2, #1
 8000e48:	3301      	adds	r3, #1
 8000e4a:	6022      	str	r2, [r4, #0]
 8000e4c:	9345      	str	r3, [sp, #276]	@ 0x114
 8000e4e:	e7d8      	b.n	8000e02 <__ssvfiscanf_r+0x4a>
 8000e50:	9141      	str	r1, [sp, #260]	@ 0x104
 8000e52:	9143      	str	r1, [sp, #268]	@ 0x10c
 8000e54:	7853      	ldrb	r3, [r2, #1]
 8000e56:	2b2a      	cmp	r3, #42	@ 0x2a
 8000e58:	bf02      	ittt	eq
 8000e5a:	2310      	moveq	r3, #16
 8000e5c:	1c95      	addeq	r5, r2, #2
 8000e5e:	9341      	streq	r3, [sp, #260]	@ 0x104
 8000e60:	220a      	movs	r2, #10
 8000e62:	46a9      	mov	r9, r5
 8000e64:	f819 1b01 	ldrb.w	r1, [r9], #1
 8000e68:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8000e6c:	2b09      	cmp	r3, #9
 8000e6e:	d91e      	bls.n	8000eae <__ssvfiscanf_r+0xf6>
 8000e70:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 800106c <__ssvfiscanf_r+0x2b4>
 8000e74:	2203      	movs	r2, #3
 8000e76:	4650      	mov	r0, sl
 8000e78:	f7ff f9b2 	bl	80001e0 <memchr>
 8000e7c:	b138      	cbz	r0, 8000e8e <__ssvfiscanf_r+0xd6>
 8000e7e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8000e80:	eba0 000a 	sub.w	r0, r0, sl
 8000e84:	2301      	movs	r3, #1
 8000e86:	4083      	lsls	r3, r0
 8000e88:	4313      	orrs	r3, r2
 8000e8a:	9341      	str	r3, [sp, #260]	@ 0x104
 8000e8c:	464d      	mov	r5, r9
 8000e8e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8000e92:	2b78      	cmp	r3, #120	@ 0x78
 8000e94:	d806      	bhi.n	8000ea4 <__ssvfiscanf_r+0xec>
 8000e96:	2b57      	cmp	r3, #87	@ 0x57
 8000e98:	d810      	bhi.n	8000ebc <__ssvfiscanf_r+0x104>
 8000e9a:	2b25      	cmp	r3, #37	@ 0x25
 8000e9c:	d0c5      	beq.n	8000e2a <__ssvfiscanf_r+0x72>
 8000e9e:	d857      	bhi.n	8000f50 <__ssvfiscanf_r+0x198>
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d065      	beq.n	8000f70 <__ssvfiscanf_r+0x1b8>
 8000ea4:	2303      	movs	r3, #3
 8000ea6:	9347      	str	r3, [sp, #284]	@ 0x11c
 8000ea8:	230a      	movs	r3, #10
 8000eaa:	9342      	str	r3, [sp, #264]	@ 0x108
 8000eac:	e078      	b.n	8000fa0 <__ssvfiscanf_r+0x1e8>
 8000eae:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8000eb0:	fb02 1103 	mla	r1, r2, r3, r1
 8000eb4:	3930      	subs	r1, #48	@ 0x30
 8000eb6:	9143      	str	r1, [sp, #268]	@ 0x10c
 8000eb8:	464d      	mov	r5, r9
 8000eba:	e7d2      	b.n	8000e62 <__ssvfiscanf_r+0xaa>
 8000ebc:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8000ec0:	2a20      	cmp	r2, #32
 8000ec2:	d8ef      	bhi.n	8000ea4 <__ssvfiscanf_r+0xec>
 8000ec4:	a101      	add	r1, pc, #4	@ (adr r1, 8000ecc <__ssvfiscanf_r+0x114>)
 8000ec6:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8000eca:	bf00      	nop
 8000ecc:	08000f7f 	.word	0x08000f7f
 8000ed0:	08000ea5 	.word	0x08000ea5
 8000ed4:	08000ea5 	.word	0x08000ea5
 8000ed8:	08000fd9 	.word	0x08000fd9
 8000edc:	08000ea5 	.word	0x08000ea5
 8000ee0:	08000ea5 	.word	0x08000ea5
 8000ee4:	08000ea5 	.word	0x08000ea5
 8000ee8:	08000ea5 	.word	0x08000ea5
 8000eec:	08000ea5 	.word	0x08000ea5
 8000ef0:	08000ea5 	.word	0x08000ea5
 8000ef4:	08000ea5 	.word	0x08000ea5
 8000ef8:	08000fef 	.word	0x08000fef
 8000efc:	08000fd5 	.word	0x08000fd5
 8000f00:	08000f57 	.word	0x08000f57
 8000f04:	08000f57 	.word	0x08000f57
 8000f08:	08000f57 	.word	0x08000f57
 8000f0c:	08000ea5 	.word	0x08000ea5
 8000f10:	08000f91 	.word	0x08000f91
 8000f14:	08000ea5 	.word	0x08000ea5
 8000f18:	08000ea5 	.word	0x08000ea5
 8000f1c:	08000ea5 	.word	0x08000ea5
 8000f20:	08000ea5 	.word	0x08000ea5
 8000f24:	08000fff 	.word	0x08000fff
 8000f28:	08000f99 	.word	0x08000f99
 8000f2c:	08000f77 	.word	0x08000f77
 8000f30:	08000ea5 	.word	0x08000ea5
 8000f34:	08000ea5 	.word	0x08000ea5
 8000f38:	08000ffb 	.word	0x08000ffb
 8000f3c:	08000ea5 	.word	0x08000ea5
 8000f40:	08000fd5 	.word	0x08000fd5
 8000f44:	08000ea5 	.word	0x08000ea5
 8000f48:	08000ea5 	.word	0x08000ea5
 8000f4c:	08000f7f 	.word	0x08000f7f
 8000f50:	3b45      	subs	r3, #69	@ 0x45
 8000f52:	2b02      	cmp	r3, #2
 8000f54:	d8a6      	bhi.n	8000ea4 <__ssvfiscanf_r+0xec>
 8000f56:	2305      	movs	r3, #5
 8000f58:	e021      	b.n	8000f9e <__ssvfiscanf_r+0x1e6>
 8000f5a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8000f5c:	4621      	mov	r1, r4
 8000f5e:	4630      	mov	r0, r6
 8000f60:	4798      	blx	r3
 8000f62:	2800      	cmp	r0, #0
 8000f64:	f43f af66 	beq.w	8000e34 <__ssvfiscanf_r+0x7c>
 8000f68:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8000f6a:	2800      	cmp	r0, #0
 8000f6c:	f040 808b 	bne.w	8001086 <__ssvfiscanf_r+0x2ce>
 8000f70:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000f74:	e08b      	b.n	800108e <__ssvfiscanf_r+0x2d6>
 8000f76:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8000f78:	f042 0220 	orr.w	r2, r2, #32
 8000f7c:	9241      	str	r2, [sp, #260]	@ 0x104
 8000f7e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8000f80:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000f84:	9241      	str	r2, [sp, #260]	@ 0x104
 8000f86:	2210      	movs	r2, #16
 8000f88:	2b6e      	cmp	r3, #110	@ 0x6e
 8000f8a:	9242      	str	r2, [sp, #264]	@ 0x108
 8000f8c:	d902      	bls.n	8000f94 <__ssvfiscanf_r+0x1dc>
 8000f8e:	e005      	b.n	8000f9c <__ssvfiscanf_r+0x1e4>
 8000f90:	2300      	movs	r3, #0
 8000f92:	9342      	str	r3, [sp, #264]	@ 0x108
 8000f94:	2303      	movs	r3, #3
 8000f96:	e002      	b.n	8000f9e <__ssvfiscanf_r+0x1e6>
 8000f98:	2308      	movs	r3, #8
 8000f9a:	9342      	str	r3, [sp, #264]	@ 0x108
 8000f9c:	2304      	movs	r3, #4
 8000f9e:	9347      	str	r3, [sp, #284]	@ 0x11c
 8000fa0:	6863      	ldr	r3, [r4, #4]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	dd39      	ble.n	800101a <__ssvfiscanf_r+0x262>
 8000fa6:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8000fa8:	0659      	lsls	r1, r3, #25
 8000faa:	d404      	bmi.n	8000fb6 <__ssvfiscanf_r+0x1fe>
 8000fac:	6823      	ldr	r3, [r4, #0]
 8000fae:	781a      	ldrb	r2, [r3, #0]
 8000fb0:	5cba      	ldrb	r2, [r7, r2]
 8000fb2:	0712      	lsls	r2, r2, #28
 8000fb4:	d438      	bmi.n	8001028 <__ssvfiscanf_r+0x270>
 8000fb6:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8000fb8:	2b02      	cmp	r3, #2
 8000fba:	dc47      	bgt.n	800104c <__ssvfiscanf_r+0x294>
 8000fbc:	466b      	mov	r3, sp
 8000fbe:	4622      	mov	r2, r4
 8000fc0:	a941      	add	r1, sp, #260	@ 0x104
 8000fc2:	4630      	mov	r0, r6
 8000fc4:	f000 f86c 	bl	80010a0 <_scanf_chars>
 8000fc8:	2801      	cmp	r0, #1
 8000fca:	d064      	beq.n	8001096 <__ssvfiscanf_r+0x2de>
 8000fcc:	2802      	cmp	r0, #2
 8000fce:	f47f af18 	bne.w	8000e02 <__ssvfiscanf_r+0x4a>
 8000fd2:	e7c9      	b.n	8000f68 <__ssvfiscanf_r+0x1b0>
 8000fd4:	220a      	movs	r2, #10
 8000fd6:	e7d7      	b.n	8000f88 <__ssvfiscanf_r+0x1d0>
 8000fd8:	4629      	mov	r1, r5
 8000fda:	4640      	mov	r0, r8
 8000fdc:	f000 f9ae 	bl	800133c <__sccl>
 8000fe0:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8000fe2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000fe6:	9341      	str	r3, [sp, #260]	@ 0x104
 8000fe8:	4605      	mov	r5, r0
 8000fea:	2301      	movs	r3, #1
 8000fec:	e7d7      	b.n	8000f9e <__ssvfiscanf_r+0x1e6>
 8000fee:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8000ff0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ff4:	9341      	str	r3, [sp, #260]	@ 0x104
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	e7d1      	b.n	8000f9e <__ssvfiscanf_r+0x1e6>
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	e7cf      	b.n	8000f9e <__ssvfiscanf_r+0x1e6>
 8000ffe:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8001000:	06c3      	lsls	r3, r0, #27
 8001002:	f53f aefe 	bmi.w	8000e02 <__ssvfiscanf_r+0x4a>
 8001006:	9b00      	ldr	r3, [sp, #0]
 8001008:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800100a:	1d19      	adds	r1, r3, #4
 800100c:	9100      	str	r1, [sp, #0]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	07c0      	lsls	r0, r0, #31
 8001012:	bf4c      	ite	mi
 8001014:	801a      	strhmi	r2, [r3, #0]
 8001016:	601a      	strpl	r2, [r3, #0]
 8001018:	e6f3      	b.n	8000e02 <__ssvfiscanf_r+0x4a>
 800101a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800101c:	4621      	mov	r1, r4
 800101e:	4630      	mov	r0, r6
 8001020:	4798      	blx	r3
 8001022:	2800      	cmp	r0, #0
 8001024:	d0bf      	beq.n	8000fa6 <__ssvfiscanf_r+0x1ee>
 8001026:	e79f      	b.n	8000f68 <__ssvfiscanf_r+0x1b0>
 8001028:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800102a:	3201      	adds	r2, #1
 800102c:	9245      	str	r2, [sp, #276]	@ 0x114
 800102e:	6862      	ldr	r2, [r4, #4]
 8001030:	3a01      	subs	r2, #1
 8001032:	2a00      	cmp	r2, #0
 8001034:	6062      	str	r2, [r4, #4]
 8001036:	dd02      	ble.n	800103e <__ssvfiscanf_r+0x286>
 8001038:	3301      	adds	r3, #1
 800103a:	6023      	str	r3, [r4, #0]
 800103c:	e7b6      	b.n	8000fac <__ssvfiscanf_r+0x1f4>
 800103e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8001040:	4621      	mov	r1, r4
 8001042:	4630      	mov	r0, r6
 8001044:	4798      	blx	r3
 8001046:	2800      	cmp	r0, #0
 8001048:	d0b0      	beq.n	8000fac <__ssvfiscanf_r+0x1f4>
 800104a:	e78d      	b.n	8000f68 <__ssvfiscanf_r+0x1b0>
 800104c:	2b04      	cmp	r3, #4
 800104e:	dc0f      	bgt.n	8001070 <__ssvfiscanf_r+0x2b8>
 8001050:	466b      	mov	r3, sp
 8001052:	4622      	mov	r2, r4
 8001054:	a941      	add	r1, sp, #260	@ 0x104
 8001056:	4630      	mov	r0, r6
 8001058:	f000 f87c 	bl	8001154 <_scanf_i>
 800105c:	e7b4      	b.n	8000fc8 <__ssvfiscanf_r+0x210>
 800105e:	bf00      	nop
 8001060:	08000d09 	.word	0x08000d09
 8001064:	08000d7f 	.word	0x08000d7f
 8001068:	08001760 	.word	0x08001760
 800106c:	08001740 	.word	0x08001740
 8001070:	4b0a      	ldr	r3, [pc, #40]	@ (800109c <__ssvfiscanf_r+0x2e4>)
 8001072:	2b00      	cmp	r3, #0
 8001074:	f43f aec5 	beq.w	8000e02 <__ssvfiscanf_r+0x4a>
 8001078:	466b      	mov	r3, sp
 800107a:	4622      	mov	r2, r4
 800107c:	a941      	add	r1, sp, #260	@ 0x104
 800107e:	4630      	mov	r0, r6
 8001080:	f3af 8000 	nop.w
 8001084:	e7a0      	b.n	8000fc8 <__ssvfiscanf_r+0x210>
 8001086:	89a3      	ldrh	r3, [r4, #12]
 8001088:	065b      	lsls	r3, r3, #25
 800108a:	f53f af71 	bmi.w	8000f70 <__ssvfiscanf_r+0x1b8>
 800108e:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8001092:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001096:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8001098:	e7f9      	b.n	800108e <__ssvfiscanf_r+0x2d6>
 800109a:	bf00      	nop
 800109c:	00000000 	.word	0x00000000

080010a0 <_scanf_chars>:
 80010a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80010a4:	4615      	mov	r5, r2
 80010a6:	688a      	ldr	r2, [r1, #8]
 80010a8:	4680      	mov	r8, r0
 80010aa:	460c      	mov	r4, r1
 80010ac:	b932      	cbnz	r2, 80010bc <_scanf_chars+0x1c>
 80010ae:	698a      	ldr	r2, [r1, #24]
 80010b0:	2a00      	cmp	r2, #0
 80010b2:	bf14      	ite	ne
 80010b4:	f04f 32ff 	movne.w	r2, #4294967295	@ 0xffffffff
 80010b8:	2201      	moveq	r2, #1
 80010ba:	608a      	str	r2, [r1, #8]
 80010bc:	6822      	ldr	r2, [r4, #0]
 80010be:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8001150 <_scanf_chars+0xb0>
 80010c2:	06d1      	lsls	r1, r2, #27
 80010c4:	bf5f      	itttt	pl
 80010c6:	681a      	ldrpl	r2, [r3, #0]
 80010c8:	1d11      	addpl	r1, r2, #4
 80010ca:	6019      	strpl	r1, [r3, #0]
 80010cc:	6816      	ldrpl	r6, [r2, #0]
 80010ce:	2700      	movs	r7, #0
 80010d0:	69a0      	ldr	r0, [r4, #24]
 80010d2:	b188      	cbz	r0, 80010f8 <_scanf_chars+0x58>
 80010d4:	2801      	cmp	r0, #1
 80010d6:	d107      	bne.n	80010e8 <_scanf_chars+0x48>
 80010d8:	682b      	ldr	r3, [r5, #0]
 80010da:	781a      	ldrb	r2, [r3, #0]
 80010dc:	6963      	ldr	r3, [r4, #20]
 80010de:	5c9b      	ldrb	r3, [r3, r2]
 80010e0:	b953      	cbnz	r3, 80010f8 <_scanf_chars+0x58>
 80010e2:	2f00      	cmp	r7, #0
 80010e4:	d031      	beq.n	800114a <_scanf_chars+0xaa>
 80010e6:	e022      	b.n	800112e <_scanf_chars+0x8e>
 80010e8:	2802      	cmp	r0, #2
 80010ea:	d120      	bne.n	800112e <_scanf_chars+0x8e>
 80010ec:	682b      	ldr	r3, [r5, #0]
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	f819 3003 	ldrb.w	r3, [r9, r3]
 80010f4:	071b      	lsls	r3, r3, #28
 80010f6:	d41a      	bmi.n	800112e <_scanf_chars+0x8e>
 80010f8:	6823      	ldr	r3, [r4, #0]
 80010fa:	06da      	lsls	r2, r3, #27
 80010fc:	bf5e      	ittt	pl
 80010fe:	682b      	ldrpl	r3, [r5, #0]
 8001100:	781b      	ldrbpl	r3, [r3, #0]
 8001102:	f806 3b01 	strbpl.w	r3, [r6], #1
 8001106:	682a      	ldr	r2, [r5, #0]
 8001108:	686b      	ldr	r3, [r5, #4]
 800110a:	3201      	adds	r2, #1
 800110c:	602a      	str	r2, [r5, #0]
 800110e:	68a2      	ldr	r2, [r4, #8]
 8001110:	3b01      	subs	r3, #1
 8001112:	3a01      	subs	r2, #1
 8001114:	606b      	str	r3, [r5, #4]
 8001116:	3701      	adds	r7, #1
 8001118:	60a2      	str	r2, [r4, #8]
 800111a:	b142      	cbz	r2, 800112e <_scanf_chars+0x8e>
 800111c:	2b00      	cmp	r3, #0
 800111e:	dcd7      	bgt.n	80010d0 <_scanf_chars+0x30>
 8001120:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8001124:	4629      	mov	r1, r5
 8001126:	4640      	mov	r0, r8
 8001128:	4798      	blx	r3
 800112a:	2800      	cmp	r0, #0
 800112c:	d0d0      	beq.n	80010d0 <_scanf_chars+0x30>
 800112e:	6823      	ldr	r3, [r4, #0]
 8001130:	f013 0310 	ands.w	r3, r3, #16
 8001134:	d105      	bne.n	8001142 <_scanf_chars+0xa2>
 8001136:	68e2      	ldr	r2, [r4, #12]
 8001138:	3201      	adds	r2, #1
 800113a:	60e2      	str	r2, [r4, #12]
 800113c:	69a2      	ldr	r2, [r4, #24]
 800113e:	b102      	cbz	r2, 8001142 <_scanf_chars+0xa2>
 8001140:	7033      	strb	r3, [r6, #0]
 8001142:	6923      	ldr	r3, [r4, #16]
 8001144:	443b      	add	r3, r7
 8001146:	6123      	str	r3, [r4, #16]
 8001148:	2000      	movs	r0, #0
 800114a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800114e:	bf00      	nop
 8001150:	08001760 	.word	0x08001760

08001154 <_scanf_i>:
 8001154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001158:	4698      	mov	r8, r3
 800115a:	4b74      	ldr	r3, [pc, #464]	@ (800132c <_scanf_i+0x1d8>)
 800115c:	460c      	mov	r4, r1
 800115e:	4682      	mov	sl, r0
 8001160:	4616      	mov	r6, r2
 8001162:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001166:	b087      	sub	sp, #28
 8001168:	ab03      	add	r3, sp, #12
 800116a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800116e:	4b70      	ldr	r3, [pc, #448]	@ (8001330 <_scanf_i+0x1dc>)
 8001170:	69a1      	ldr	r1, [r4, #24]
 8001172:	4a70      	ldr	r2, [pc, #448]	@ (8001334 <_scanf_i+0x1e0>)
 8001174:	2903      	cmp	r1, #3
 8001176:	bf08      	it	eq
 8001178:	461a      	moveq	r2, r3
 800117a:	68a3      	ldr	r3, [r4, #8]
 800117c:	9201      	str	r2, [sp, #4]
 800117e:	1e5a      	subs	r2, r3, #1
 8001180:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8001184:	bf88      	it	hi
 8001186:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800118a:	4627      	mov	r7, r4
 800118c:	bf82      	ittt	hi
 800118e:	eb03 0905 	addhi.w	r9, r3, r5
 8001192:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8001196:	60a3      	strhi	r3, [r4, #8]
 8001198:	f857 3b1c 	ldr.w	r3, [r7], #28
 800119c:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 80011a0:	bf98      	it	ls
 80011a2:	f04f 0900 	movls.w	r9, #0
 80011a6:	6023      	str	r3, [r4, #0]
 80011a8:	463d      	mov	r5, r7
 80011aa:	f04f 0b00 	mov.w	fp, #0
 80011ae:	6831      	ldr	r1, [r6, #0]
 80011b0:	ab03      	add	r3, sp, #12
 80011b2:	7809      	ldrb	r1, [r1, #0]
 80011b4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80011b8:	2202      	movs	r2, #2
 80011ba:	f7ff f811 	bl	80001e0 <memchr>
 80011be:	b328      	cbz	r0, 800120c <_scanf_i+0xb8>
 80011c0:	f1bb 0f01 	cmp.w	fp, #1
 80011c4:	d159      	bne.n	800127a <_scanf_i+0x126>
 80011c6:	6862      	ldr	r2, [r4, #4]
 80011c8:	b92a      	cbnz	r2, 80011d6 <_scanf_i+0x82>
 80011ca:	6822      	ldr	r2, [r4, #0]
 80011cc:	2108      	movs	r1, #8
 80011ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80011d2:	6061      	str	r1, [r4, #4]
 80011d4:	6022      	str	r2, [r4, #0]
 80011d6:	6822      	ldr	r2, [r4, #0]
 80011d8:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 80011dc:	6022      	str	r2, [r4, #0]
 80011de:	68a2      	ldr	r2, [r4, #8]
 80011e0:	1e51      	subs	r1, r2, #1
 80011e2:	60a1      	str	r1, [r4, #8]
 80011e4:	b192      	cbz	r2, 800120c <_scanf_i+0xb8>
 80011e6:	6832      	ldr	r2, [r6, #0]
 80011e8:	1c51      	adds	r1, r2, #1
 80011ea:	6031      	str	r1, [r6, #0]
 80011ec:	7812      	ldrb	r2, [r2, #0]
 80011ee:	f805 2b01 	strb.w	r2, [r5], #1
 80011f2:	6872      	ldr	r2, [r6, #4]
 80011f4:	3a01      	subs	r2, #1
 80011f6:	2a00      	cmp	r2, #0
 80011f8:	6072      	str	r2, [r6, #4]
 80011fa:	dc07      	bgt.n	800120c <_scanf_i+0xb8>
 80011fc:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8001200:	4631      	mov	r1, r6
 8001202:	4650      	mov	r0, sl
 8001204:	4790      	blx	r2
 8001206:	2800      	cmp	r0, #0
 8001208:	f040 8085 	bne.w	8001316 <_scanf_i+0x1c2>
 800120c:	f10b 0b01 	add.w	fp, fp, #1
 8001210:	f1bb 0f03 	cmp.w	fp, #3
 8001214:	d1cb      	bne.n	80011ae <_scanf_i+0x5a>
 8001216:	6863      	ldr	r3, [r4, #4]
 8001218:	b90b      	cbnz	r3, 800121e <_scanf_i+0xca>
 800121a:	230a      	movs	r3, #10
 800121c:	6063      	str	r3, [r4, #4]
 800121e:	6863      	ldr	r3, [r4, #4]
 8001220:	4945      	ldr	r1, [pc, #276]	@ (8001338 <_scanf_i+0x1e4>)
 8001222:	6960      	ldr	r0, [r4, #20]
 8001224:	1ac9      	subs	r1, r1, r3
 8001226:	f000 f889 	bl	800133c <__sccl>
 800122a:	f04f 0b00 	mov.w	fp, #0
 800122e:	68a3      	ldr	r3, [r4, #8]
 8001230:	6822      	ldr	r2, [r4, #0]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d03d      	beq.n	80012b2 <_scanf_i+0x15e>
 8001236:	6831      	ldr	r1, [r6, #0]
 8001238:	6960      	ldr	r0, [r4, #20]
 800123a:	f891 c000 	ldrb.w	ip, [r1]
 800123e:	f810 000c 	ldrb.w	r0, [r0, ip]
 8001242:	2800      	cmp	r0, #0
 8001244:	d035      	beq.n	80012b2 <_scanf_i+0x15e>
 8001246:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800124a:	d124      	bne.n	8001296 <_scanf_i+0x142>
 800124c:	0510      	lsls	r0, r2, #20
 800124e:	d522      	bpl.n	8001296 <_scanf_i+0x142>
 8001250:	f10b 0b01 	add.w	fp, fp, #1
 8001254:	f1b9 0f00 	cmp.w	r9, #0
 8001258:	d003      	beq.n	8001262 <_scanf_i+0x10e>
 800125a:	3301      	adds	r3, #1
 800125c:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 8001260:	60a3      	str	r3, [r4, #8]
 8001262:	6873      	ldr	r3, [r6, #4]
 8001264:	3b01      	subs	r3, #1
 8001266:	2b00      	cmp	r3, #0
 8001268:	6073      	str	r3, [r6, #4]
 800126a:	dd1b      	ble.n	80012a4 <_scanf_i+0x150>
 800126c:	6833      	ldr	r3, [r6, #0]
 800126e:	3301      	adds	r3, #1
 8001270:	6033      	str	r3, [r6, #0]
 8001272:	68a3      	ldr	r3, [r4, #8]
 8001274:	3b01      	subs	r3, #1
 8001276:	60a3      	str	r3, [r4, #8]
 8001278:	e7d9      	b.n	800122e <_scanf_i+0xda>
 800127a:	f1bb 0f02 	cmp.w	fp, #2
 800127e:	d1ae      	bne.n	80011de <_scanf_i+0x8a>
 8001280:	6822      	ldr	r2, [r4, #0]
 8001282:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8001286:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800128a:	d1bf      	bne.n	800120c <_scanf_i+0xb8>
 800128c:	2110      	movs	r1, #16
 800128e:	6061      	str	r1, [r4, #4]
 8001290:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001294:	e7a2      	b.n	80011dc <_scanf_i+0x88>
 8001296:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800129a:	6022      	str	r2, [r4, #0]
 800129c:	780b      	ldrb	r3, [r1, #0]
 800129e:	f805 3b01 	strb.w	r3, [r5], #1
 80012a2:	e7de      	b.n	8001262 <_scanf_i+0x10e>
 80012a4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80012a8:	4631      	mov	r1, r6
 80012aa:	4650      	mov	r0, sl
 80012ac:	4798      	blx	r3
 80012ae:	2800      	cmp	r0, #0
 80012b0:	d0df      	beq.n	8001272 <_scanf_i+0x11e>
 80012b2:	6823      	ldr	r3, [r4, #0]
 80012b4:	05d9      	lsls	r1, r3, #23
 80012b6:	d50d      	bpl.n	80012d4 <_scanf_i+0x180>
 80012b8:	42bd      	cmp	r5, r7
 80012ba:	d909      	bls.n	80012d0 <_scanf_i+0x17c>
 80012bc:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80012c0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80012c4:	4632      	mov	r2, r6
 80012c6:	4650      	mov	r0, sl
 80012c8:	4798      	blx	r3
 80012ca:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 80012ce:	464d      	mov	r5, r9
 80012d0:	42bd      	cmp	r5, r7
 80012d2:	d028      	beq.n	8001326 <_scanf_i+0x1d2>
 80012d4:	6822      	ldr	r2, [r4, #0]
 80012d6:	f012 0210 	ands.w	r2, r2, #16
 80012da:	d113      	bne.n	8001304 <_scanf_i+0x1b0>
 80012dc:	702a      	strb	r2, [r5, #0]
 80012de:	6863      	ldr	r3, [r4, #4]
 80012e0:	9e01      	ldr	r6, [sp, #4]
 80012e2:	4639      	mov	r1, r7
 80012e4:	4650      	mov	r0, sl
 80012e6:	47b0      	blx	r6
 80012e8:	f8d8 3000 	ldr.w	r3, [r8]
 80012ec:	6821      	ldr	r1, [r4, #0]
 80012ee:	1d1a      	adds	r2, r3, #4
 80012f0:	f8c8 2000 	str.w	r2, [r8]
 80012f4:	f011 0f20 	tst.w	r1, #32
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	d00f      	beq.n	800131c <_scanf_i+0x1c8>
 80012fc:	6018      	str	r0, [r3, #0]
 80012fe:	68e3      	ldr	r3, [r4, #12]
 8001300:	3301      	adds	r3, #1
 8001302:	60e3      	str	r3, [r4, #12]
 8001304:	6923      	ldr	r3, [r4, #16]
 8001306:	1bed      	subs	r5, r5, r7
 8001308:	445d      	add	r5, fp
 800130a:	442b      	add	r3, r5
 800130c:	6123      	str	r3, [r4, #16]
 800130e:	2000      	movs	r0, #0
 8001310:	b007      	add	sp, #28
 8001312:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001316:	f04f 0b00 	mov.w	fp, #0
 800131a:	e7ca      	b.n	80012b2 <_scanf_i+0x15e>
 800131c:	07ca      	lsls	r2, r1, #31
 800131e:	bf4c      	ite	mi
 8001320:	8018      	strhmi	r0, [r3, #0]
 8001322:	6018      	strpl	r0, [r3, #0]
 8001324:	e7eb      	b.n	80012fe <_scanf_i+0x1aa>
 8001326:	2001      	movs	r0, #1
 8001328:	e7f2      	b.n	8001310 <_scanf_i+0x1bc>
 800132a:	bf00      	nop
 800132c:	08001734 	.word	0x08001734
 8001330:	080015b1 	.word	0x080015b1
 8001334:	08001691 	.word	0x08001691
 8001338:	08001754 	.word	0x08001754

0800133c <__sccl>:
 800133c:	b570      	push	{r4, r5, r6, lr}
 800133e:	780b      	ldrb	r3, [r1, #0]
 8001340:	4604      	mov	r4, r0
 8001342:	2b5e      	cmp	r3, #94	@ 0x5e
 8001344:	bf0b      	itete	eq
 8001346:	784b      	ldrbeq	r3, [r1, #1]
 8001348:	1c4a      	addne	r2, r1, #1
 800134a:	1c8a      	addeq	r2, r1, #2
 800134c:	2100      	movne	r1, #0
 800134e:	bf08      	it	eq
 8001350:	2101      	moveq	r1, #1
 8001352:	3801      	subs	r0, #1
 8001354:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8001358:	f800 1f01 	strb.w	r1, [r0, #1]!
 800135c:	42a8      	cmp	r0, r5
 800135e:	d1fb      	bne.n	8001358 <__sccl+0x1c>
 8001360:	b90b      	cbnz	r3, 8001366 <__sccl+0x2a>
 8001362:	1e50      	subs	r0, r2, #1
 8001364:	bd70      	pop	{r4, r5, r6, pc}
 8001366:	f081 0101 	eor.w	r1, r1, #1
 800136a:	54e1      	strb	r1, [r4, r3]
 800136c:	4610      	mov	r0, r2
 800136e:	4602      	mov	r2, r0
 8001370:	f812 5b01 	ldrb.w	r5, [r2], #1
 8001374:	2d2d      	cmp	r5, #45	@ 0x2d
 8001376:	d005      	beq.n	8001384 <__sccl+0x48>
 8001378:	2d5d      	cmp	r5, #93	@ 0x5d
 800137a:	d016      	beq.n	80013aa <__sccl+0x6e>
 800137c:	2d00      	cmp	r5, #0
 800137e:	d0f1      	beq.n	8001364 <__sccl+0x28>
 8001380:	462b      	mov	r3, r5
 8001382:	e7f2      	b.n	800136a <__sccl+0x2e>
 8001384:	7846      	ldrb	r6, [r0, #1]
 8001386:	2e5d      	cmp	r6, #93	@ 0x5d
 8001388:	d0fa      	beq.n	8001380 <__sccl+0x44>
 800138a:	42b3      	cmp	r3, r6
 800138c:	dcf8      	bgt.n	8001380 <__sccl+0x44>
 800138e:	3002      	adds	r0, #2
 8001390:	461a      	mov	r2, r3
 8001392:	3201      	adds	r2, #1
 8001394:	4296      	cmp	r6, r2
 8001396:	54a1      	strb	r1, [r4, r2]
 8001398:	dcfb      	bgt.n	8001392 <__sccl+0x56>
 800139a:	1af2      	subs	r2, r6, r3
 800139c:	3a01      	subs	r2, #1
 800139e:	1c5d      	adds	r5, r3, #1
 80013a0:	42b3      	cmp	r3, r6
 80013a2:	bfa8      	it	ge
 80013a4:	2200      	movge	r2, #0
 80013a6:	18ab      	adds	r3, r5, r2
 80013a8:	e7e1      	b.n	800136e <__sccl+0x32>
 80013aa:	4610      	mov	r0, r2
 80013ac:	e7da      	b.n	8001364 <__sccl+0x28>

080013ae <__submore>:
 80013ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80013b2:	460c      	mov	r4, r1
 80013b4:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80013b6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80013ba:	4299      	cmp	r1, r3
 80013bc:	d11d      	bne.n	80013fa <__submore+0x4c>
 80013be:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80013c2:	f7ff fc15 	bl	8000bf0 <_malloc_r>
 80013c6:	b918      	cbnz	r0, 80013d0 <__submore+0x22>
 80013c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80013cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80013d0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80013d4:	63a3      	str	r3, [r4, #56]	@ 0x38
 80013d6:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 80013da:	6360      	str	r0, [r4, #52]	@ 0x34
 80013dc:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 80013e0:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80013e4:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 80013e8:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80013ec:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 80013f0:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 80013f4:	6020      	str	r0, [r4, #0]
 80013f6:	2000      	movs	r0, #0
 80013f8:	e7e8      	b.n	80013cc <__submore+0x1e>
 80013fa:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 80013fc:	0077      	lsls	r7, r6, #1
 80013fe:	463a      	mov	r2, r7
 8001400:	f000 f82e 	bl	8001460 <_realloc_r>
 8001404:	4605      	mov	r5, r0
 8001406:	2800      	cmp	r0, #0
 8001408:	d0de      	beq.n	80013c8 <__submore+0x1a>
 800140a:	eb00 0806 	add.w	r8, r0, r6
 800140e:	4601      	mov	r1, r0
 8001410:	4632      	mov	r2, r6
 8001412:	4640      	mov	r0, r8
 8001414:	f000 f816 	bl	8001444 <memcpy>
 8001418:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800141c:	f8c4 8000 	str.w	r8, [r4]
 8001420:	e7e9      	b.n	80013f6 <__submore+0x48>
	...

08001424 <_sbrk_r>:
 8001424:	b538      	push	{r3, r4, r5, lr}
 8001426:	4d06      	ldr	r5, [pc, #24]	@ (8001440 <_sbrk_r+0x1c>)
 8001428:	2300      	movs	r3, #0
 800142a:	4604      	mov	r4, r0
 800142c:	4608      	mov	r0, r1
 800142e:	602b      	str	r3, [r5, #0]
 8001430:	f7ff f9a8 	bl	8000784 <_sbrk>
 8001434:	1c43      	adds	r3, r0, #1
 8001436:	d102      	bne.n	800143e <_sbrk_r+0x1a>
 8001438:	682b      	ldr	r3, [r5, #0]
 800143a:	b103      	cbz	r3, 800143e <_sbrk_r+0x1a>
 800143c:	6023      	str	r3, [r4, #0]
 800143e:	bd38      	pop	{r3, r4, r5, pc}
 8001440:	200001b0 	.word	0x200001b0

08001444 <memcpy>:
 8001444:	440a      	add	r2, r1
 8001446:	4291      	cmp	r1, r2
 8001448:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800144c:	d100      	bne.n	8001450 <memcpy+0xc>
 800144e:	4770      	bx	lr
 8001450:	b510      	push	{r4, lr}
 8001452:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001456:	f803 4f01 	strb.w	r4, [r3, #1]!
 800145a:	4291      	cmp	r1, r2
 800145c:	d1f9      	bne.n	8001452 <memcpy+0xe>
 800145e:	bd10      	pop	{r4, pc}

08001460 <_realloc_r>:
 8001460:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001464:	4680      	mov	r8, r0
 8001466:	4615      	mov	r5, r2
 8001468:	460c      	mov	r4, r1
 800146a:	b921      	cbnz	r1, 8001476 <_realloc_r+0x16>
 800146c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001470:	4611      	mov	r1, r2
 8001472:	f7ff bbbd 	b.w	8000bf0 <_malloc_r>
 8001476:	b92a      	cbnz	r2, 8001484 <_realloc_r+0x24>
 8001478:	f7ff fb4e 	bl	8000b18 <_free_r>
 800147c:	2400      	movs	r4, #0
 800147e:	4620      	mov	r0, r4
 8001480:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001484:	f000 f906 	bl	8001694 <_malloc_usable_size_r>
 8001488:	4285      	cmp	r5, r0
 800148a:	4606      	mov	r6, r0
 800148c:	d802      	bhi.n	8001494 <_realloc_r+0x34>
 800148e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8001492:	d8f4      	bhi.n	800147e <_realloc_r+0x1e>
 8001494:	4629      	mov	r1, r5
 8001496:	4640      	mov	r0, r8
 8001498:	f7ff fbaa 	bl	8000bf0 <_malloc_r>
 800149c:	4607      	mov	r7, r0
 800149e:	2800      	cmp	r0, #0
 80014a0:	d0ec      	beq.n	800147c <_realloc_r+0x1c>
 80014a2:	42b5      	cmp	r5, r6
 80014a4:	462a      	mov	r2, r5
 80014a6:	4621      	mov	r1, r4
 80014a8:	bf28      	it	cs
 80014aa:	4632      	movcs	r2, r6
 80014ac:	f7ff ffca 	bl	8001444 <memcpy>
 80014b0:	4621      	mov	r1, r4
 80014b2:	4640      	mov	r0, r8
 80014b4:	f7ff fb30 	bl	8000b18 <_free_r>
 80014b8:	463c      	mov	r4, r7
 80014ba:	e7e0      	b.n	800147e <_realloc_r+0x1e>

080014bc <_strtol_l.constprop.0>:
 80014bc:	2b24      	cmp	r3, #36	@ 0x24
 80014be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80014c2:	4686      	mov	lr, r0
 80014c4:	4690      	mov	r8, r2
 80014c6:	d801      	bhi.n	80014cc <_strtol_l.constprop.0+0x10>
 80014c8:	2b01      	cmp	r3, #1
 80014ca:	d106      	bne.n	80014da <_strtol_l.constprop.0+0x1e>
 80014cc:	f7ff faf8 	bl	8000ac0 <__errno>
 80014d0:	2316      	movs	r3, #22
 80014d2:	6003      	str	r3, [r0, #0]
 80014d4:	2000      	movs	r0, #0
 80014d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80014da:	4834      	ldr	r0, [pc, #208]	@ (80015ac <_strtol_l.constprop.0+0xf0>)
 80014dc:	460d      	mov	r5, r1
 80014de:	462a      	mov	r2, r5
 80014e0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80014e4:	5d06      	ldrb	r6, [r0, r4]
 80014e6:	f016 0608 	ands.w	r6, r6, #8
 80014ea:	d1f8      	bne.n	80014de <_strtol_l.constprop.0+0x22>
 80014ec:	2c2d      	cmp	r4, #45	@ 0x2d
 80014ee:	d12d      	bne.n	800154c <_strtol_l.constprop.0+0x90>
 80014f0:	782c      	ldrb	r4, [r5, #0]
 80014f2:	2601      	movs	r6, #1
 80014f4:	1c95      	adds	r5, r2, #2
 80014f6:	f033 0210 	bics.w	r2, r3, #16
 80014fa:	d109      	bne.n	8001510 <_strtol_l.constprop.0+0x54>
 80014fc:	2c30      	cmp	r4, #48	@ 0x30
 80014fe:	d12a      	bne.n	8001556 <_strtol_l.constprop.0+0x9a>
 8001500:	782a      	ldrb	r2, [r5, #0]
 8001502:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8001506:	2a58      	cmp	r2, #88	@ 0x58
 8001508:	d125      	bne.n	8001556 <_strtol_l.constprop.0+0x9a>
 800150a:	786c      	ldrb	r4, [r5, #1]
 800150c:	2310      	movs	r3, #16
 800150e:	3502      	adds	r5, #2
 8001510:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8001514:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8001518:	2200      	movs	r2, #0
 800151a:	fbbc f9f3 	udiv	r9, ip, r3
 800151e:	4610      	mov	r0, r2
 8001520:	fb03 ca19 	mls	sl, r3, r9, ip
 8001524:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8001528:	2f09      	cmp	r7, #9
 800152a:	d81b      	bhi.n	8001564 <_strtol_l.constprop.0+0xa8>
 800152c:	463c      	mov	r4, r7
 800152e:	42a3      	cmp	r3, r4
 8001530:	dd27      	ble.n	8001582 <_strtol_l.constprop.0+0xc6>
 8001532:	1c57      	adds	r7, r2, #1
 8001534:	d007      	beq.n	8001546 <_strtol_l.constprop.0+0x8a>
 8001536:	4581      	cmp	r9, r0
 8001538:	d320      	bcc.n	800157c <_strtol_l.constprop.0+0xc0>
 800153a:	d101      	bne.n	8001540 <_strtol_l.constprop.0+0x84>
 800153c:	45a2      	cmp	sl, r4
 800153e:	db1d      	blt.n	800157c <_strtol_l.constprop.0+0xc0>
 8001540:	fb00 4003 	mla	r0, r0, r3, r4
 8001544:	2201      	movs	r2, #1
 8001546:	f815 4b01 	ldrb.w	r4, [r5], #1
 800154a:	e7eb      	b.n	8001524 <_strtol_l.constprop.0+0x68>
 800154c:	2c2b      	cmp	r4, #43	@ 0x2b
 800154e:	bf04      	itt	eq
 8001550:	782c      	ldrbeq	r4, [r5, #0]
 8001552:	1c95      	addeq	r5, r2, #2
 8001554:	e7cf      	b.n	80014f6 <_strtol_l.constprop.0+0x3a>
 8001556:	2b00      	cmp	r3, #0
 8001558:	d1da      	bne.n	8001510 <_strtol_l.constprop.0+0x54>
 800155a:	2c30      	cmp	r4, #48	@ 0x30
 800155c:	bf0c      	ite	eq
 800155e:	2308      	moveq	r3, #8
 8001560:	230a      	movne	r3, #10
 8001562:	e7d5      	b.n	8001510 <_strtol_l.constprop.0+0x54>
 8001564:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8001568:	2f19      	cmp	r7, #25
 800156a:	d801      	bhi.n	8001570 <_strtol_l.constprop.0+0xb4>
 800156c:	3c37      	subs	r4, #55	@ 0x37
 800156e:	e7de      	b.n	800152e <_strtol_l.constprop.0+0x72>
 8001570:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8001574:	2f19      	cmp	r7, #25
 8001576:	d804      	bhi.n	8001582 <_strtol_l.constprop.0+0xc6>
 8001578:	3c57      	subs	r4, #87	@ 0x57
 800157a:	e7d8      	b.n	800152e <_strtol_l.constprop.0+0x72>
 800157c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001580:	e7e1      	b.n	8001546 <_strtol_l.constprop.0+0x8a>
 8001582:	1c53      	adds	r3, r2, #1
 8001584:	d108      	bne.n	8001598 <_strtol_l.constprop.0+0xdc>
 8001586:	2322      	movs	r3, #34	@ 0x22
 8001588:	f8ce 3000 	str.w	r3, [lr]
 800158c:	4660      	mov	r0, ip
 800158e:	f1b8 0f00 	cmp.w	r8, #0
 8001592:	d0a0      	beq.n	80014d6 <_strtol_l.constprop.0+0x1a>
 8001594:	1e69      	subs	r1, r5, #1
 8001596:	e006      	b.n	80015a6 <_strtol_l.constprop.0+0xea>
 8001598:	b106      	cbz	r6, 800159c <_strtol_l.constprop.0+0xe0>
 800159a:	4240      	negs	r0, r0
 800159c:	f1b8 0f00 	cmp.w	r8, #0
 80015a0:	d099      	beq.n	80014d6 <_strtol_l.constprop.0+0x1a>
 80015a2:	2a00      	cmp	r2, #0
 80015a4:	d1f6      	bne.n	8001594 <_strtol_l.constprop.0+0xd8>
 80015a6:	f8c8 1000 	str.w	r1, [r8]
 80015aa:	e794      	b.n	80014d6 <_strtol_l.constprop.0+0x1a>
 80015ac:	08001760 	.word	0x08001760

080015b0 <_strtol_r>:
 80015b0:	f7ff bf84 	b.w	80014bc <_strtol_l.constprop.0>

080015b4 <_strtoul_l.constprop.0>:
 80015b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80015b8:	4e34      	ldr	r6, [pc, #208]	@ (800168c <_strtoul_l.constprop.0+0xd8>)
 80015ba:	4686      	mov	lr, r0
 80015bc:	460d      	mov	r5, r1
 80015be:	4628      	mov	r0, r5
 80015c0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80015c4:	5d37      	ldrb	r7, [r6, r4]
 80015c6:	f017 0708 	ands.w	r7, r7, #8
 80015ca:	d1f8      	bne.n	80015be <_strtoul_l.constprop.0+0xa>
 80015cc:	2c2d      	cmp	r4, #45	@ 0x2d
 80015ce:	d12f      	bne.n	8001630 <_strtoul_l.constprop.0+0x7c>
 80015d0:	782c      	ldrb	r4, [r5, #0]
 80015d2:	2701      	movs	r7, #1
 80015d4:	1c85      	adds	r5, r0, #2
 80015d6:	f033 0010 	bics.w	r0, r3, #16
 80015da:	d109      	bne.n	80015f0 <_strtoul_l.constprop.0+0x3c>
 80015dc:	2c30      	cmp	r4, #48	@ 0x30
 80015de:	d12c      	bne.n	800163a <_strtoul_l.constprop.0+0x86>
 80015e0:	7828      	ldrb	r0, [r5, #0]
 80015e2:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 80015e6:	2858      	cmp	r0, #88	@ 0x58
 80015e8:	d127      	bne.n	800163a <_strtoul_l.constprop.0+0x86>
 80015ea:	786c      	ldrb	r4, [r5, #1]
 80015ec:	2310      	movs	r3, #16
 80015ee:	3502      	adds	r5, #2
 80015f0:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 80015f4:	2600      	movs	r6, #0
 80015f6:	fbb8 f8f3 	udiv	r8, r8, r3
 80015fa:	fb03 f908 	mul.w	r9, r3, r8
 80015fe:	ea6f 0909 	mvn.w	r9, r9
 8001602:	4630      	mov	r0, r6
 8001604:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8001608:	f1bc 0f09 	cmp.w	ip, #9
 800160c:	d81c      	bhi.n	8001648 <_strtoul_l.constprop.0+0x94>
 800160e:	4664      	mov	r4, ip
 8001610:	42a3      	cmp	r3, r4
 8001612:	dd2a      	ble.n	800166a <_strtoul_l.constprop.0+0xb6>
 8001614:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8001618:	d007      	beq.n	800162a <_strtoul_l.constprop.0+0x76>
 800161a:	4580      	cmp	r8, r0
 800161c:	d322      	bcc.n	8001664 <_strtoul_l.constprop.0+0xb0>
 800161e:	d101      	bne.n	8001624 <_strtoul_l.constprop.0+0x70>
 8001620:	45a1      	cmp	r9, r4
 8001622:	db1f      	blt.n	8001664 <_strtoul_l.constprop.0+0xb0>
 8001624:	fb00 4003 	mla	r0, r0, r3, r4
 8001628:	2601      	movs	r6, #1
 800162a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800162e:	e7e9      	b.n	8001604 <_strtoul_l.constprop.0+0x50>
 8001630:	2c2b      	cmp	r4, #43	@ 0x2b
 8001632:	bf04      	itt	eq
 8001634:	782c      	ldrbeq	r4, [r5, #0]
 8001636:	1c85      	addeq	r5, r0, #2
 8001638:	e7cd      	b.n	80015d6 <_strtoul_l.constprop.0+0x22>
 800163a:	2b00      	cmp	r3, #0
 800163c:	d1d8      	bne.n	80015f0 <_strtoul_l.constprop.0+0x3c>
 800163e:	2c30      	cmp	r4, #48	@ 0x30
 8001640:	bf0c      	ite	eq
 8001642:	2308      	moveq	r3, #8
 8001644:	230a      	movne	r3, #10
 8001646:	e7d3      	b.n	80015f0 <_strtoul_l.constprop.0+0x3c>
 8001648:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800164c:	f1bc 0f19 	cmp.w	ip, #25
 8001650:	d801      	bhi.n	8001656 <_strtoul_l.constprop.0+0xa2>
 8001652:	3c37      	subs	r4, #55	@ 0x37
 8001654:	e7dc      	b.n	8001610 <_strtoul_l.constprop.0+0x5c>
 8001656:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800165a:	f1bc 0f19 	cmp.w	ip, #25
 800165e:	d804      	bhi.n	800166a <_strtoul_l.constprop.0+0xb6>
 8001660:	3c57      	subs	r4, #87	@ 0x57
 8001662:	e7d5      	b.n	8001610 <_strtoul_l.constprop.0+0x5c>
 8001664:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8001668:	e7df      	b.n	800162a <_strtoul_l.constprop.0+0x76>
 800166a:	1c73      	adds	r3, r6, #1
 800166c:	d106      	bne.n	800167c <_strtoul_l.constprop.0+0xc8>
 800166e:	2322      	movs	r3, #34	@ 0x22
 8001670:	f8ce 3000 	str.w	r3, [lr]
 8001674:	4630      	mov	r0, r6
 8001676:	b932      	cbnz	r2, 8001686 <_strtoul_l.constprop.0+0xd2>
 8001678:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800167c:	b107      	cbz	r7, 8001680 <_strtoul_l.constprop.0+0xcc>
 800167e:	4240      	negs	r0, r0
 8001680:	2a00      	cmp	r2, #0
 8001682:	d0f9      	beq.n	8001678 <_strtoul_l.constprop.0+0xc4>
 8001684:	b106      	cbz	r6, 8001688 <_strtoul_l.constprop.0+0xd4>
 8001686:	1e69      	subs	r1, r5, #1
 8001688:	6011      	str	r1, [r2, #0]
 800168a:	e7f5      	b.n	8001678 <_strtoul_l.constprop.0+0xc4>
 800168c:	08001760 	.word	0x08001760

08001690 <_strtoul_r>:
 8001690:	f7ff bf90 	b.w	80015b4 <_strtoul_l.constprop.0>

08001694 <_malloc_usable_size_r>:
 8001694:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001698:	1f18      	subs	r0, r3, #4
 800169a:	2b00      	cmp	r3, #0
 800169c:	bfbc      	itt	lt
 800169e:	580b      	ldrlt	r3, [r1, r0]
 80016a0:	18c0      	addlt	r0, r0, r3
 80016a2:	4770      	bx	lr

080016a4 <_init>:
 80016a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016a6:	bf00      	nop
 80016a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80016aa:	bc08      	pop	{r3}
 80016ac:	469e      	mov	lr, r3
 80016ae:	4770      	bx	lr

080016b0 <_fini>:
 80016b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016b2:	bf00      	nop
 80016b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80016b6:	bc08      	pop	{r3}
 80016b8:	469e      	mov	lr, r3
 80016ba:	4770      	bx	lr
